// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files
// DO NOT EDIT

use crate::Hyperlink;
use glib::object::IsA;
use glib::translate::*;
use std::fmt;
use std::ptr;

glib::wrapper! {
    #[doc(alias = "AtspiHypertext")]
    pub struct Hypertext(Interface<ffi::AtspiHypertext>);

    match fn {
        type_ => || ffi::atspi_hypertext_get_type(),
    }
}

pub const NONE_HYPERTEXT: Option<&Hypertext> = None;

pub trait HypertextExt: 'static {
    #[doc(alias = "atspi_hypertext_get_link")]
    #[doc(alias = "get_link")]
    fn link(&self, link_index: i32) -> Result<Option<Hyperlink>, glib::Error>;

    #[doc(alias = "atspi_hypertext_get_link_index")]
    #[doc(alias = "get_link_index")]
    fn link_index(&self, character_offset: i32) -> Result<i32, glib::Error>;

    #[doc(alias = "atspi_hypertext_get_n_links")]
    #[doc(alias = "get_n_links")]
    fn n_links(&self) -> Result<i32, glib::Error>;
}

impl<O: IsA<Hypertext>> HypertextExt for O {
    fn link(&self, link_index: i32) -> Result<Option<Hyperlink>, glib::Error> {
        unsafe {
            let mut error = ptr::null_mut();
            let ret = ffi::atspi_hypertext_get_link(self.as_ref().to_glib_none().0, link_index, &mut error);
            if error.is_null() { Ok(from_glib_full(ret)) } else { Err(from_glib_full(error)) }
        }
    }

    fn link_index(&self, character_offset: i32) -> Result<i32, glib::Error> {
        unsafe {
            let mut error = ptr::null_mut();
            let ret = ffi::atspi_hypertext_get_link_index(self.as_ref().to_glib_none().0, character_offset, &mut error);
            if error.is_null() { Ok(ret) } else { Err(from_glib_full(error)) }
        }
    }

    fn n_links(&self) -> Result<i32, glib::Error> {
        unsafe {
            let mut error = ptr::null_mut();
            let ret = ffi::atspi_hypertext_get_n_links(self.as_ref().to_glib_none().0, &mut error);
            if error.is_null() { Ok(ret) } else { Err(from_glib_full(error)) }
        }
    }
}

impl fmt::Display for Hypertext {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        f.write_str("Hypertext")
    }
}
