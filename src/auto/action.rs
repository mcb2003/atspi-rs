// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files
// DO NOT EDIT

use glib::object::IsA;
use glib::translate::*;
use std::fmt;
use std::ptr;

glib::wrapper! {
    #[doc(alias = "AtspiAction")]
    pub struct Action(Interface<ffi::AtspiAction>);

    match fn {
        type_ => || ffi::atspi_action_get_type(),
    }
}

pub const NONE_ACTION: Option<&Action> = None;

pub trait ActionExt: 'static {
    #[doc(alias = "atspi_action_do_action")]
    fn do_action(&self, i: i32) -> Result<(), glib::Error>;

    #[doc(alias = "atspi_action_get_action_description")]
    #[doc(alias = "get_action_description")]
    fn action_description(&self, i: i32) -> Result<glib::GString, glib::Error>;

    #[doc(alias = "atspi_action_get_action_name")]
    #[doc(alias = "get_action_name")]
    fn action_name(&self, i: i32) -> Result<glib::GString, glib::Error>;

    #[cfg_attr(feature = "v2_10", deprecated = "Since 2.10")]
    #[doc(alias = "atspi_action_get_description")]
    #[doc(alias = "get_description")]
    fn description(&self, i: i32) -> Result<glib::GString, glib::Error>;

    #[doc(alias = "atspi_action_get_key_binding")]
    #[doc(alias = "get_key_binding")]
    fn key_binding(&self, i: i32) -> Result<glib::GString, glib::Error>;

    #[doc(alias = "atspi_action_get_localized_name")]
    #[doc(alias = "get_localized_name")]
    fn localized_name(&self, i: i32) -> Result<glib::GString, glib::Error>;

    #[doc(alias = "atspi_action_get_n_actions")]
    #[doc(alias = "get_n_actions")]
    fn n_actions(&self) -> Result<i32, glib::Error>;

    #[cfg_attr(feature = "v2_10", deprecated = "Since 2.10")]
    #[doc(alias = "atspi_action_get_name")]
    #[doc(alias = "get_name")]
    fn name(&self, i: i32) -> Result<glib::GString, glib::Error>;
}

impl<O: IsA<Action>> ActionExt for O {
    fn do_action(&self, i: i32) -> Result<(), glib::Error> {
        unsafe {
            let mut error = ptr::null_mut();
            let _ = ffi::atspi_action_do_action(self.as_ref().to_glib_none().0, i, &mut error);
            if error.is_null() { Ok(()) } else { Err(from_glib_full(error)) }
        }
    }

    fn action_description(&self, i: i32) -> Result<glib::GString, glib::Error> {
        unsafe {
            let mut error = ptr::null_mut();
            let ret = ffi::atspi_action_get_action_description(self.as_ref().to_glib_none().0, i, &mut error);
            if error.is_null() { Ok(from_glib_full(ret)) } else { Err(from_glib_full(error)) }
        }
    }

    fn action_name(&self, i: i32) -> Result<glib::GString, glib::Error> {
        unsafe {
            let mut error = ptr::null_mut();
            let ret = ffi::atspi_action_get_action_name(self.as_ref().to_glib_none().0, i, &mut error);
            if error.is_null() { Ok(from_glib_full(ret)) } else { Err(from_glib_full(error)) }
        }
    }

    fn description(&self, i: i32) -> Result<glib::GString, glib::Error> {
        unsafe {
            let mut error = ptr::null_mut();
            let ret = ffi::atspi_action_get_description(self.as_ref().to_glib_none().0, i, &mut error);
            if error.is_null() { Ok(from_glib_full(ret)) } else { Err(from_glib_full(error)) }
        }
    }

    fn key_binding(&self, i: i32) -> Result<glib::GString, glib::Error> {
        unsafe {
            let mut error = ptr::null_mut();
            let ret = ffi::atspi_action_get_key_binding(self.as_ref().to_glib_none().0, i, &mut error);
            if error.is_null() { Ok(from_glib_full(ret)) } else { Err(from_glib_full(error)) }
        }
    }

    fn localized_name(&self, i: i32) -> Result<glib::GString, glib::Error> {
        unsafe {
            let mut error = ptr::null_mut();
            let ret = ffi::atspi_action_get_localized_name(self.as_ref().to_glib_none().0, i, &mut error);
            if error.is_null() { Ok(from_glib_full(ret)) } else { Err(from_glib_full(error)) }
        }
    }

    fn n_actions(&self) -> Result<i32, glib::Error> {
        unsafe {
            let mut error = ptr::null_mut();
            let ret = ffi::atspi_action_get_n_actions(self.as_ref().to_glib_none().0, &mut error);
            if error.is_null() { Ok(ret) } else { Err(from_glib_full(error)) }
        }
    }

    fn name(&self, i: i32) -> Result<glib::GString, glib::Error> {
        unsafe {
            let mut error = ptr::null_mut();
            let ret = ffi::atspi_action_get_name(self.as_ref().to_glib_none().0, i, &mut error);
            if error.is_null() { Ok(from_glib_full(ret)) } else { Err(from_glib_full(error)) }
        }
    }
}

impl fmt::Display for Action {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        f.write_str("Action")
    }
}
