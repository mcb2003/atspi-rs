// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files
// DO NOT EDIT

use glib::object::IsA;
use glib::translate::*;
use std::fmt;
use std::ptr;

glib::wrapper! {
    #[doc(alias = "AtspiValue")]
    pub struct Value(Interface<ffi::AtspiValue>);

    match fn {
        type_ => || ffi::atspi_value_get_type(),
    }
}

pub const NONE_VALUE: Option<&Value> = None;

pub trait ValueExt: 'static {
    #[doc(alias = "atspi_value_get_current_value")]
    #[doc(alias = "get_current_value")]
    fn current_value(&self) -> Result<f64, glib::Error>;

    #[doc(alias = "atspi_value_get_maximum_value")]
    #[doc(alias = "get_maximum_value")]
    fn maximum_value(&self) -> Result<f64, glib::Error>;

    #[doc(alias = "atspi_value_get_minimum_increment")]
    #[doc(alias = "get_minimum_increment")]
    fn minimum_increment(&self) -> Result<f64, glib::Error>;

    #[doc(alias = "atspi_value_get_minimum_value")]
    #[doc(alias = "get_minimum_value")]
    fn minimum_value(&self) -> Result<f64, glib::Error>;

    #[doc(alias = "atspi_value_set_current_value")]
    fn set_current_value(&self, new_value: f64) -> Result<(), glib::Error>;
}

impl<O: IsA<Value>> ValueExt for O {
    fn current_value(&self) -> Result<f64, glib::Error> {
        unsafe {
            let mut error = ptr::null_mut();
            let ret = ffi::atspi_value_get_current_value(self.as_ref().to_glib_none().0, &mut error);
            if error.is_null() { Ok(ret) } else { Err(from_glib_full(error)) }
        }
    }

    fn maximum_value(&self) -> Result<f64, glib::Error> {
        unsafe {
            let mut error = ptr::null_mut();
            let ret = ffi::atspi_value_get_maximum_value(self.as_ref().to_glib_none().0, &mut error);
            if error.is_null() { Ok(ret) } else { Err(from_glib_full(error)) }
        }
    }

    fn minimum_increment(&self) -> Result<f64, glib::Error> {
        unsafe {
            let mut error = ptr::null_mut();
            let ret = ffi::atspi_value_get_minimum_increment(self.as_ref().to_glib_none().0, &mut error);
            if error.is_null() { Ok(ret) } else { Err(from_glib_full(error)) }
        }
    }

    fn minimum_value(&self) -> Result<f64, glib::Error> {
        unsafe {
            let mut error = ptr::null_mut();
            let ret = ffi::atspi_value_get_minimum_value(self.as_ref().to_glib_none().0, &mut error);
            if error.is_null() { Ok(ret) } else { Err(from_glib_full(error)) }
        }
    }

    fn set_current_value(&self, new_value: f64) -> Result<(), glib::Error> {
        unsafe {
            let mut error = ptr::null_mut();
            let _ = ffi::atspi_value_set_current_value(self.as_ref().to_glib_none().0, new_value, &mut error);
            if error.is_null() { Ok(()) } else { Err(from_glib_full(error)) }
        }
    }
}

impl fmt::Display for Value {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        f.write_str("Value")
    }
}
