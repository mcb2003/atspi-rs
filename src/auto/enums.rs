// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files
// DO NOT EDIT

use glib::translate::*;
use glib::value::FromValue;
use glib::value::ToValue;
use glib::StaticType;
use glib::Type;
use std::fmt;

#[derive(Debug, Eq, PartialEq, Ord, PartialOrd, Hash)]
#[derive(Clone, Copy)]
#[non_exhaustive]
#[doc(alias = "AtspiCollectionMatchType")]
pub enum CollectionMatchType {
    #[doc(alias = "ATSPI_Collection_MATCH_INVALID")]
    Invalid,
    #[doc(alias = "ATSPI_Collection_MATCH_ALL")]
    All,
    #[doc(alias = "ATSPI_Collection_MATCH_ANY")]
    Any,
    #[doc(alias = "ATSPI_Collection_MATCH_NONE")]
    None,
    #[doc(alias = "ATSPI_Collection_MATCH_EMPTY")]
    Empty,
    #[doc(alias = "ATSPI_Collection_MATCH_LAST_DEFINED")]
    LastDefined,
#[doc(hidden)]
    __Unknown(i32),
}

impl fmt::Display for CollectionMatchType {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "CollectionMatchType::{}", match *self {
            Self::Invalid => "Invalid",
            Self::All => "All",
            Self::Any => "Any",
            Self::None => "None",
            Self::Empty => "Empty",
            Self::LastDefined => "LastDefined",
            _ => "Unknown",
        })
    }
}

#[doc(hidden)]
impl IntoGlib for CollectionMatchType {
    type GlibType = ffi::AtspiCollectionMatchType;

    fn into_glib(self) -> ffi::AtspiCollectionMatchType {
        match self {
            Self::Invalid => ffi::ATSPI_Collection_MATCH_INVALID,
            Self::All => ffi::ATSPI_Collection_MATCH_ALL,
            Self::Any => ffi::ATSPI_Collection_MATCH_ANY,
            Self::None => ffi::ATSPI_Collection_MATCH_NONE,
            Self::Empty => ffi::ATSPI_Collection_MATCH_EMPTY,
            Self::LastDefined => ffi::ATSPI_Collection_MATCH_LAST_DEFINED,
            Self::__Unknown(value) => value,
}
    }
}

#[doc(hidden)]
impl FromGlib<ffi::AtspiCollectionMatchType> for CollectionMatchType {
    unsafe fn from_glib(value: ffi::AtspiCollectionMatchType) -> Self {
        match value {
            ffi::ATSPI_Collection_MATCH_INVALID => Self::Invalid,
            ffi::ATSPI_Collection_MATCH_ALL => Self::All,
            ffi::ATSPI_Collection_MATCH_ANY => Self::Any,
            ffi::ATSPI_Collection_MATCH_NONE => Self::None,
            ffi::ATSPI_Collection_MATCH_EMPTY => Self::Empty,
            ffi::ATSPI_Collection_MATCH_LAST_DEFINED => Self::LastDefined,
            value => Self::__Unknown(value),
}
    }
}

impl StaticType for CollectionMatchType {
    fn static_type() -> Type {
        unsafe { from_glib(ffi::atspi_collection_match_type_get_type()) }
    }
}

impl glib::value::ValueType for CollectionMatchType {
    type Type = Self;
}

unsafe impl<'a> FromValue<'a> for CollectionMatchType {
    type Checker = glib::value::GenericValueTypeChecker<Self>;

    unsafe fn from_value(value: &'a glib::Value) -> Self {
        from_glib(glib::gobject_ffi::g_value_get_enum(value.to_glib_none().0))
    }
}

impl ToValue for CollectionMatchType {
    fn to_value(&self) -> glib::Value {
        let mut value = glib::Value::for_value_type::<Self>();
        unsafe {
            glib::gobject_ffi::g_value_set_enum(value.to_glib_none_mut().0, self.into_glib());
        }
        value
    }

    fn value_type(&self) -> glib::Type {
        Self::static_type()
    }
}

#[derive(Debug, Eq, PartialEq, Ord, PartialOrd, Hash)]
#[derive(Clone, Copy)]
#[non_exhaustive]
#[doc(alias = "AtspiCollectionSortOrder")]
pub enum CollectionSortOrder {
    #[doc(alias = "ATSPI_Collection_SORT_ORDER_INVALID")]
    Invalid,
    #[doc(alias = "ATSPI_Collection_SORT_ORDER_CANONICAL")]
    Canonical,
    #[doc(alias = "ATSPI_Collection_SORT_ORDER_FLOW")]
    Flow,
    #[doc(alias = "ATSPI_Collection_SORT_ORDER_TAB")]
    Tab,
    #[doc(alias = "ATSPI_Collection_SORT_ORDER_REVERSE_CANONICAL")]
    ReverseCanonical,
    #[doc(alias = "ATSPI_Collection_SORT_ORDER_REVERSE_FLOW")]
    ReverseFlow,
    #[doc(alias = "ATSPI_Collection_SORT_ORDER_REVERSE_TAB")]
    ReverseTab,
    #[doc(alias = "ATSPI_Collection_SORT_ORDER_LAST_DEFINED")]
    LastDefined,
#[doc(hidden)]
    __Unknown(i32),
}

impl fmt::Display for CollectionSortOrder {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "CollectionSortOrder::{}", match *self {
            Self::Invalid => "Invalid",
            Self::Canonical => "Canonical",
            Self::Flow => "Flow",
            Self::Tab => "Tab",
            Self::ReverseCanonical => "ReverseCanonical",
            Self::ReverseFlow => "ReverseFlow",
            Self::ReverseTab => "ReverseTab",
            Self::LastDefined => "LastDefined",
            _ => "Unknown",
        })
    }
}

#[doc(hidden)]
impl IntoGlib for CollectionSortOrder {
    type GlibType = ffi::AtspiCollectionSortOrder;

    fn into_glib(self) -> ffi::AtspiCollectionSortOrder {
        match self {
            Self::Invalid => ffi::ATSPI_Collection_SORT_ORDER_INVALID,
            Self::Canonical => ffi::ATSPI_Collection_SORT_ORDER_CANONICAL,
            Self::Flow => ffi::ATSPI_Collection_SORT_ORDER_FLOW,
            Self::Tab => ffi::ATSPI_Collection_SORT_ORDER_TAB,
            Self::ReverseCanonical => ffi::ATSPI_Collection_SORT_ORDER_REVERSE_CANONICAL,
            Self::ReverseFlow => ffi::ATSPI_Collection_SORT_ORDER_REVERSE_FLOW,
            Self::ReverseTab => ffi::ATSPI_Collection_SORT_ORDER_REVERSE_TAB,
            Self::LastDefined => ffi::ATSPI_Collection_SORT_ORDER_LAST_DEFINED,
            Self::__Unknown(value) => value,
}
    }
}

#[doc(hidden)]
impl FromGlib<ffi::AtspiCollectionSortOrder> for CollectionSortOrder {
    unsafe fn from_glib(value: ffi::AtspiCollectionSortOrder) -> Self {
        match value {
            ffi::ATSPI_Collection_SORT_ORDER_INVALID => Self::Invalid,
            ffi::ATSPI_Collection_SORT_ORDER_CANONICAL => Self::Canonical,
            ffi::ATSPI_Collection_SORT_ORDER_FLOW => Self::Flow,
            ffi::ATSPI_Collection_SORT_ORDER_TAB => Self::Tab,
            ffi::ATSPI_Collection_SORT_ORDER_REVERSE_CANONICAL => Self::ReverseCanonical,
            ffi::ATSPI_Collection_SORT_ORDER_REVERSE_FLOW => Self::ReverseFlow,
            ffi::ATSPI_Collection_SORT_ORDER_REVERSE_TAB => Self::ReverseTab,
            ffi::ATSPI_Collection_SORT_ORDER_LAST_DEFINED => Self::LastDefined,
            value => Self::__Unknown(value),
}
    }
}

impl StaticType for CollectionSortOrder {
    fn static_type() -> Type {
        unsafe { from_glib(ffi::atspi_collection_sort_order_get_type()) }
    }
}

impl glib::value::ValueType for CollectionSortOrder {
    type Type = Self;
}

unsafe impl<'a> FromValue<'a> for CollectionSortOrder {
    type Checker = glib::value::GenericValueTypeChecker<Self>;

    unsafe fn from_value(value: &'a glib::Value) -> Self {
        from_glib(glib::gobject_ffi::g_value_get_enum(value.to_glib_none().0))
    }
}

impl ToValue for CollectionSortOrder {
    fn to_value(&self) -> glib::Value {
        let mut value = glib::Value::for_value_type::<Self>();
        unsafe {
            glib::gobject_ffi::g_value_set_enum(value.to_glib_none_mut().0, self.into_glib());
        }
        value
    }

    fn value_type(&self) -> glib::Type {
        Self::static_type()
    }
}

#[derive(Debug, Eq, PartialEq, Ord, PartialOrd, Hash)]
#[derive(Clone, Copy)]
#[non_exhaustive]
#[doc(alias = "AtspiCollectionTreeTraversalType")]
pub enum CollectionTreeTraversalType {
    #[doc(alias = "ATSPI_Collection_TREE_RESTRICT_CHILDREN")]
    RestrictChildren,
    #[doc(alias = "ATSPI_Collection_TREE_RESTRICT_SIBLING")]
    RestrictSibling,
    #[doc(alias = "ATSPI_Collection_TREE_INORDER")]
    Inorder,
    #[doc(alias = "ATSPI_Collection_TREE_LAST_DEFINED")]
    LastDefined,
#[doc(hidden)]
    __Unknown(i32),
}

impl fmt::Display for CollectionTreeTraversalType {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "CollectionTreeTraversalType::{}", match *self {
            Self::RestrictChildren => "RestrictChildren",
            Self::RestrictSibling => "RestrictSibling",
            Self::Inorder => "Inorder",
            Self::LastDefined => "LastDefined",
            _ => "Unknown",
        })
    }
}

#[doc(hidden)]
impl IntoGlib for CollectionTreeTraversalType {
    type GlibType = ffi::AtspiCollectionTreeTraversalType;

    fn into_glib(self) -> ffi::AtspiCollectionTreeTraversalType {
        match self {
            Self::RestrictChildren => ffi::ATSPI_Collection_TREE_RESTRICT_CHILDREN,
            Self::RestrictSibling => ffi::ATSPI_Collection_TREE_RESTRICT_SIBLING,
            Self::Inorder => ffi::ATSPI_Collection_TREE_INORDER,
            Self::LastDefined => ffi::ATSPI_Collection_TREE_LAST_DEFINED,
            Self::__Unknown(value) => value,
}
    }
}

#[doc(hidden)]
impl FromGlib<ffi::AtspiCollectionTreeTraversalType> for CollectionTreeTraversalType {
    unsafe fn from_glib(value: ffi::AtspiCollectionTreeTraversalType) -> Self {
        match value {
            ffi::ATSPI_Collection_TREE_RESTRICT_CHILDREN => Self::RestrictChildren,
            ffi::ATSPI_Collection_TREE_RESTRICT_SIBLING => Self::RestrictSibling,
            ffi::ATSPI_Collection_TREE_INORDER => Self::Inorder,
            ffi::ATSPI_Collection_TREE_LAST_DEFINED => Self::LastDefined,
            value => Self::__Unknown(value),
}
    }
}

impl StaticType for CollectionTreeTraversalType {
    fn static_type() -> Type {
        unsafe { from_glib(ffi::atspi_collection_tree_traversal_type_get_type()) }
    }
}

impl glib::value::ValueType for CollectionTreeTraversalType {
    type Type = Self;
}

unsafe impl<'a> FromValue<'a> for CollectionTreeTraversalType {
    type Checker = glib::value::GenericValueTypeChecker<Self>;

    unsafe fn from_value(value: &'a glib::Value) -> Self {
        from_glib(glib::gobject_ffi::g_value_get_enum(value.to_glib_none().0))
    }
}

impl ToValue for CollectionTreeTraversalType {
    fn to_value(&self) -> glib::Value {
        let mut value = glib::Value::for_value_type::<Self>();
        unsafe {
            glib::gobject_ffi::g_value_set_enum(value.to_glib_none_mut().0, self.into_glib());
        }
        value
    }

    fn value_type(&self) -> glib::Type {
        Self::static_type()
    }
}

#[derive(Debug, Eq, PartialEq, Ord, PartialOrd, Hash)]
#[derive(Clone, Copy)]
#[non_exhaustive]
#[doc(alias = "AtspiComponentLayer")]
pub enum ComponentLayer {
    #[doc(alias = "ATSPI_LAYER_INVALID")]
    Invalid,
    #[doc(alias = "ATSPI_LAYER_BACKGROUND")]
    Background,
    #[doc(alias = "ATSPI_LAYER_CANVAS")]
    Canvas,
    #[doc(alias = "ATSPI_LAYER_WIDGET")]
    Widget,
    #[doc(alias = "ATSPI_LAYER_MDI")]
    Mdi,
    #[doc(alias = "ATSPI_LAYER_POPUP")]
    Popup,
    #[doc(alias = "ATSPI_LAYER_OVERLAY")]
    Overlay,
    #[doc(alias = "ATSPI_LAYER_WINDOW")]
    Window,
    #[doc(alias = "ATSPI_LAYER_LAST_DEFINED")]
    LastDefined,
#[doc(hidden)]
    __Unknown(i32),
}

impl fmt::Display for ComponentLayer {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "ComponentLayer::{}", match *self {
            Self::Invalid => "Invalid",
            Self::Background => "Background",
            Self::Canvas => "Canvas",
            Self::Widget => "Widget",
            Self::Mdi => "Mdi",
            Self::Popup => "Popup",
            Self::Overlay => "Overlay",
            Self::Window => "Window",
            Self::LastDefined => "LastDefined",
            _ => "Unknown",
        })
    }
}

#[doc(hidden)]
impl IntoGlib for ComponentLayer {
    type GlibType = ffi::AtspiComponentLayer;

    fn into_glib(self) -> ffi::AtspiComponentLayer {
        match self {
            Self::Invalid => ffi::ATSPI_LAYER_INVALID,
            Self::Background => ffi::ATSPI_LAYER_BACKGROUND,
            Self::Canvas => ffi::ATSPI_LAYER_CANVAS,
            Self::Widget => ffi::ATSPI_LAYER_WIDGET,
            Self::Mdi => ffi::ATSPI_LAYER_MDI,
            Self::Popup => ffi::ATSPI_LAYER_POPUP,
            Self::Overlay => ffi::ATSPI_LAYER_OVERLAY,
            Self::Window => ffi::ATSPI_LAYER_WINDOW,
            Self::LastDefined => ffi::ATSPI_LAYER_LAST_DEFINED,
            Self::__Unknown(value) => value,
}
    }
}

#[doc(hidden)]
impl FromGlib<ffi::AtspiComponentLayer> for ComponentLayer {
    unsafe fn from_glib(value: ffi::AtspiComponentLayer) -> Self {
        match value {
            ffi::ATSPI_LAYER_INVALID => Self::Invalid,
            ffi::ATSPI_LAYER_BACKGROUND => Self::Background,
            ffi::ATSPI_LAYER_CANVAS => Self::Canvas,
            ffi::ATSPI_LAYER_WIDGET => Self::Widget,
            ffi::ATSPI_LAYER_MDI => Self::Mdi,
            ffi::ATSPI_LAYER_POPUP => Self::Popup,
            ffi::ATSPI_LAYER_OVERLAY => Self::Overlay,
            ffi::ATSPI_LAYER_WINDOW => Self::Window,
            ffi::ATSPI_LAYER_LAST_DEFINED => Self::LastDefined,
            value => Self::__Unknown(value),
}
    }
}

impl StaticType for ComponentLayer {
    fn static_type() -> Type {
        unsafe { from_glib(ffi::atspi_component_layer_get_type()) }
    }
}

impl glib::value::ValueType for ComponentLayer {
    type Type = Self;
}

unsafe impl<'a> FromValue<'a> for ComponentLayer {
    type Checker = glib::value::GenericValueTypeChecker<Self>;

    unsafe fn from_value(value: &'a glib::Value) -> Self {
        from_glib(glib::gobject_ffi::g_value_get_enum(value.to_glib_none().0))
    }
}

impl ToValue for ComponentLayer {
    fn to_value(&self) -> glib::Value {
        let mut value = glib::Value::for_value_type::<Self>();
        unsafe {
            glib::gobject_ffi::g_value_set_enum(value.to_glib_none_mut().0, self.into_glib());
        }
        value
    }

    fn value_type(&self) -> glib::Type {
        Self::static_type()
    }
}

#[derive(Debug, Eq, PartialEq, Ord, PartialOrd, Hash)]
#[derive(Clone, Copy)]
#[non_exhaustive]
#[doc(alias = "AtspiCoordType")]
pub enum CoordType {
    #[doc(alias = "ATSPI_COORD_TYPE_SCREEN")]
    Screen,
    #[doc(alias = "ATSPI_COORD_TYPE_WINDOW")]
    Window,
    #[doc(alias = "ATSPI_COORD_TYPE_PARENT")]
    Parent,
#[doc(hidden)]
    __Unknown(i32),
}

impl fmt::Display for CoordType {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "CoordType::{}", match *self {
            Self::Screen => "Screen",
            Self::Window => "Window",
            Self::Parent => "Parent",
            _ => "Unknown",
        })
    }
}

#[doc(hidden)]
impl IntoGlib for CoordType {
    type GlibType = ffi::AtspiCoordType;

    fn into_glib(self) -> ffi::AtspiCoordType {
        match self {
            Self::Screen => ffi::ATSPI_COORD_TYPE_SCREEN,
            Self::Window => ffi::ATSPI_COORD_TYPE_WINDOW,
            Self::Parent => ffi::ATSPI_COORD_TYPE_PARENT,
            Self::__Unknown(value) => value,
}
    }
}

#[doc(hidden)]
impl FromGlib<ffi::AtspiCoordType> for CoordType {
    unsafe fn from_glib(value: ffi::AtspiCoordType) -> Self {
        match value {
            ffi::ATSPI_COORD_TYPE_SCREEN => Self::Screen,
            ffi::ATSPI_COORD_TYPE_WINDOW => Self::Window,
            ffi::ATSPI_COORD_TYPE_PARENT => Self::Parent,
            value => Self::__Unknown(value),
}
    }
}

impl StaticType for CoordType {
    fn static_type() -> Type {
        unsafe { from_glib(ffi::atspi_coord_type_get_type()) }
    }
}

impl glib::value::ValueType for CoordType {
    type Type = Self;
}

unsafe impl<'a> FromValue<'a> for CoordType {
    type Checker = glib::value::GenericValueTypeChecker<Self>;

    unsafe fn from_value(value: &'a glib::Value) -> Self {
        from_glib(glib::gobject_ffi::g_value_get_enum(value.to_glib_none().0))
    }
}

impl ToValue for CoordType {
    fn to_value(&self) -> glib::Value {
        let mut value = glib::Value::for_value_type::<Self>();
        unsafe {
            glib::gobject_ffi::g_value_set_enum(value.to_glib_none_mut().0, self.into_glib());
        }
        value
    }

    fn value_type(&self) -> glib::Type {
        Self::static_type()
    }
}

#[derive(Debug, Eq, PartialEq, Ord, PartialOrd, Hash)]
#[derive(Clone, Copy)]
#[non_exhaustive]
#[doc(alias = "AtspiKeySynthType")]
pub enum KeySynthType {
    #[doc(alias = "ATSPI_KEY_PRESS")]
    Press,
    #[doc(alias = "ATSPI_KEY_RELEASE")]
    Release,
    #[doc(alias = "ATSPI_KEY_PRESSRELEASE")]
    Pressrelease,
    #[doc(alias = "ATSPI_KEY_SYM")]
    Sym,
    #[doc(alias = "ATSPI_KEY_STRING")]
    String,
    #[doc(alias = "ATSPI_KEY_LOCKMODIFIERS")]
    Lockmodifiers,
    #[doc(alias = "ATSPI_KEY_UNLOCKMODIFIERS")]
    Unlockmodifiers,
#[doc(hidden)]
    __Unknown(i32),
}

impl fmt::Display for KeySynthType {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "KeySynthType::{}", match *self {
            Self::Press => "Press",
            Self::Release => "Release",
            Self::Pressrelease => "Pressrelease",
            Self::Sym => "Sym",
            Self::String => "String",
            Self::Lockmodifiers => "Lockmodifiers",
            Self::Unlockmodifiers => "Unlockmodifiers",
            _ => "Unknown",
        })
    }
}

#[doc(hidden)]
impl IntoGlib for KeySynthType {
    type GlibType = ffi::AtspiKeySynthType;

    fn into_glib(self) -> ffi::AtspiKeySynthType {
        match self {
            Self::Press => ffi::ATSPI_KEY_PRESS,
            Self::Release => ffi::ATSPI_KEY_RELEASE,
            Self::Pressrelease => ffi::ATSPI_KEY_PRESSRELEASE,
            Self::Sym => ffi::ATSPI_KEY_SYM,
            Self::String => ffi::ATSPI_KEY_STRING,
            Self::Lockmodifiers => ffi::ATSPI_KEY_LOCKMODIFIERS,
            Self::Unlockmodifiers => ffi::ATSPI_KEY_UNLOCKMODIFIERS,
            Self::__Unknown(value) => value,
}
    }
}

#[doc(hidden)]
impl FromGlib<ffi::AtspiKeySynthType> for KeySynthType {
    unsafe fn from_glib(value: ffi::AtspiKeySynthType) -> Self {
        match value {
            ffi::ATSPI_KEY_PRESS => Self::Press,
            ffi::ATSPI_KEY_RELEASE => Self::Release,
            ffi::ATSPI_KEY_PRESSRELEASE => Self::Pressrelease,
            ffi::ATSPI_KEY_SYM => Self::Sym,
            ffi::ATSPI_KEY_STRING => Self::String,
            ffi::ATSPI_KEY_LOCKMODIFIERS => Self::Lockmodifiers,
            ffi::ATSPI_KEY_UNLOCKMODIFIERS => Self::Unlockmodifiers,
            value => Self::__Unknown(value),
}
    }
}

impl StaticType for KeySynthType {
    fn static_type() -> Type {
        unsafe { from_glib(ffi::atspi_key_synth_type_get_type()) }
    }
}

impl glib::value::ValueType for KeySynthType {
    type Type = Self;
}

unsafe impl<'a> FromValue<'a> for KeySynthType {
    type Checker = glib::value::GenericValueTypeChecker<Self>;

    unsafe fn from_value(value: &'a glib::Value) -> Self {
        from_glib(glib::gobject_ffi::g_value_get_enum(value.to_glib_none().0))
    }
}

impl ToValue for KeySynthType {
    fn to_value(&self) -> glib::Value {
        let mut value = glib::Value::for_value_type::<Self>();
        unsafe {
            glib::gobject_ffi::g_value_set_enum(value.to_glib_none_mut().0, self.into_glib());
        }
        value
    }

    fn value_type(&self) -> glib::Type {
        Self::static_type()
    }
}

#[derive(Debug, Eq, PartialEq, Ord, PartialOrd, Hash)]
#[derive(Clone, Copy)]
#[non_exhaustive]
#[doc(alias = "AtspiRelationType")]
pub enum RelationType {
    #[doc(alias = "ATSPI_RELATION_NULL")]
    Null,
    #[doc(alias = "ATSPI_RELATION_LABEL_FOR")]
    LabelFor,
    #[doc(alias = "ATSPI_RELATION_LABELLED_BY")]
    LabelledBy,
    #[doc(alias = "ATSPI_RELATION_CONTROLLER_FOR")]
    ControllerFor,
    #[doc(alias = "ATSPI_RELATION_CONTROLLED_BY")]
    ControlledBy,
    #[doc(alias = "ATSPI_RELATION_MEMBER_OF")]
    MemberOf,
    #[doc(alias = "ATSPI_RELATION_TOOLTIP_FOR")]
    TooltipFor,
    #[doc(alias = "ATSPI_RELATION_NODE_CHILD_OF")]
    NodeChildOf,
    #[doc(alias = "ATSPI_RELATION_NODE_PARENT_OF")]
    NodeParentOf,
    #[doc(alias = "ATSPI_RELATION_EXTENDED")]
    Extended,
    #[doc(alias = "ATSPI_RELATION_FLOWS_TO")]
    FlowsTo,
    #[doc(alias = "ATSPI_RELATION_FLOWS_FROM")]
    FlowsFrom,
    #[doc(alias = "ATSPI_RELATION_SUBWINDOW_OF")]
    SubwindowOf,
    #[doc(alias = "ATSPI_RELATION_EMBEDS")]
    Embeds,
    #[doc(alias = "ATSPI_RELATION_EMBEDDED_BY")]
    EmbeddedBy,
    #[doc(alias = "ATSPI_RELATION_POPUP_FOR")]
    PopupFor,
    #[doc(alias = "ATSPI_RELATION_PARENT_WINDOW_OF")]
    ParentWindowOf,
    #[doc(alias = "ATSPI_RELATION_DESCRIPTION_FOR")]
    DescriptionFor,
    #[doc(alias = "ATSPI_RELATION_DESCRIBED_BY")]
    DescribedBy,
    #[doc(alias = "ATSPI_RELATION_DETAILS")]
    Details,
    #[doc(alias = "ATSPI_RELATION_DETAILS_FOR")]
    DetailsFor,
    #[doc(alias = "ATSPI_RELATION_ERROR_MESSAGE")]
    ErrorMessage,
    #[doc(alias = "ATSPI_RELATION_ERROR_FOR")]
    ErrorFor,
    #[doc(alias = "ATSPI_RELATION_LAST_DEFINED")]
    LastDefined,
#[doc(hidden)]
    __Unknown(i32),
}

impl fmt::Display for RelationType {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "RelationType::{}", match *self {
            Self::Null => "Null",
            Self::LabelFor => "LabelFor",
            Self::LabelledBy => "LabelledBy",
            Self::ControllerFor => "ControllerFor",
            Self::ControlledBy => "ControlledBy",
            Self::MemberOf => "MemberOf",
            Self::TooltipFor => "TooltipFor",
            Self::NodeChildOf => "NodeChildOf",
            Self::NodeParentOf => "NodeParentOf",
            Self::Extended => "Extended",
            Self::FlowsTo => "FlowsTo",
            Self::FlowsFrom => "FlowsFrom",
            Self::SubwindowOf => "SubwindowOf",
            Self::Embeds => "Embeds",
            Self::EmbeddedBy => "EmbeddedBy",
            Self::PopupFor => "PopupFor",
            Self::ParentWindowOf => "ParentWindowOf",
            Self::DescriptionFor => "DescriptionFor",
            Self::DescribedBy => "DescribedBy",
            Self::Details => "Details",
            Self::DetailsFor => "DetailsFor",
            Self::ErrorMessage => "ErrorMessage",
            Self::ErrorFor => "ErrorFor",
            Self::LastDefined => "LastDefined",
            _ => "Unknown",
        })
    }
}

#[doc(hidden)]
impl IntoGlib for RelationType {
    type GlibType = ffi::AtspiRelationType;

    fn into_glib(self) -> ffi::AtspiRelationType {
        match self {
            Self::Null => ffi::ATSPI_RELATION_NULL,
            Self::LabelFor => ffi::ATSPI_RELATION_LABEL_FOR,
            Self::LabelledBy => ffi::ATSPI_RELATION_LABELLED_BY,
            Self::ControllerFor => ffi::ATSPI_RELATION_CONTROLLER_FOR,
            Self::ControlledBy => ffi::ATSPI_RELATION_CONTROLLED_BY,
            Self::MemberOf => ffi::ATSPI_RELATION_MEMBER_OF,
            Self::TooltipFor => ffi::ATSPI_RELATION_TOOLTIP_FOR,
            Self::NodeChildOf => ffi::ATSPI_RELATION_NODE_CHILD_OF,
            Self::NodeParentOf => ffi::ATSPI_RELATION_NODE_PARENT_OF,
            Self::Extended => ffi::ATSPI_RELATION_EXTENDED,
            Self::FlowsTo => ffi::ATSPI_RELATION_FLOWS_TO,
            Self::FlowsFrom => ffi::ATSPI_RELATION_FLOWS_FROM,
            Self::SubwindowOf => ffi::ATSPI_RELATION_SUBWINDOW_OF,
            Self::Embeds => ffi::ATSPI_RELATION_EMBEDS,
            Self::EmbeddedBy => ffi::ATSPI_RELATION_EMBEDDED_BY,
            Self::PopupFor => ffi::ATSPI_RELATION_POPUP_FOR,
            Self::ParentWindowOf => ffi::ATSPI_RELATION_PARENT_WINDOW_OF,
            Self::DescriptionFor => ffi::ATSPI_RELATION_DESCRIPTION_FOR,
            Self::DescribedBy => ffi::ATSPI_RELATION_DESCRIBED_BY,
            Self::Details => ffi::ATSPI_RELATION_DETAILS,
            Self::DetailsFor => ffi::ATSPI_RELATION_DETAILS_FOR,
            Self::ErrorMessage => ffi::ATSPI_RELATION_ERROR_MESSAGE,
            Self::ErrorFor => ffi::ATSPI_RELATION_ERROR_FOR,
            Self::LastDefined => ffi::ATSPI_RELATION_LAST_DEFINED,
            Self::__Unknown(value) => value,
}
    }
}

#[doc(hidden)]
impl FromGlib<ffi::AtspiRelationType> for RelationType {
    unsafe fn from_glib(value: ffi::AtspiRelationType) -> Self {
        match value {
            ffi::ATSPI_RELATION_NULL => Self::Null,
            ffi::ATSPI_RELATION_LABEL_FOR => Self::LabelFor,
            ffi::ATSPI_RELATION_LABELLED_BY => Self::LabelledBy,
            ffi::ATSPI_RELATION_CONTROLLER_FOR => Self::ControllerFor,
            ffi::ATSPI_RELATION_CONTROLLED_BY => Self::ControlledBy,
            ffi::ATSPI_RELATION_MEMBER_OF => Self::MemberOf,
            ffi::ATSPI_RELATION_TOOLTIP_FOR => Self::TooltipFor,
            ffi::ATSPI_RELATION_NODE_CHILD_OF => Self::NodeChildOf,
            ffi::ATSPI_RELATION_NODE_PARENT_OF => Self::NodeParentOf,
            ffi::ATSPI_RELATION_EXTENDED => Self::Extended,
            ffi::ATSPI_RELATION_FLOWS_TO => Self::FlowsTo,
            ffi::ATSPI_RELATION_FLOWS_FROM => Self::FlowsFrom,
            ffi::ATSPI_RELATION_SUBWINDOW_OF => Self::SubwindowOf,
            ffi::ATSPI_RELATION_EMBEDS => Self::Embeds,
            ffi::ATSPI_RELATION_EMBEDDED_BY => Self::EmbeddedBy,
            ffi::ATSPI_RELATION_POPUP_FOR => Self::PopupFor,
            ffi::ATSPI_RELATION_PARENT_WINDOW_OF => Self::ParentWindowOf,
            ffi::ATSPI_RELATION_DESCRIPTION_FOR => Self::DescriptionFor,
            ffi::ATSPI_RELATION_DESCRIBED_BY => Self::DescribedBy,
            ffi::ATSPI_RELATION_DETAILS => Self::Details,
            ffi::ATSPI_RELATION_DETAILS_FOR => Self::DetailsFor,
            ffi::ATSPI_RELATION_ERROR_MESSAGE => Self::ErrorMessage,
            ffi::ATSPI_RELATION_ERROR_FOR => Self::ErrorFor,
            ffi::ATSPI_RELATION_LAST_DEFINED => Self::LastDefined,
            value => Self::__Unknown(value),
}
    }
}

impl StaticType for RelationType {
    fn static_type() -> Type {
        unsafe { from_glib(ffi::atspi_relation_type_get_type()) }
    }
}

impl glib::value::ValueType for RelationType {
    type Type = Self;
}

unsafe impl<'a> FromValue<'a> for RelationType {
    type Checker = glib::value::GenericValueTypeChecker<Self>;

    unsafe fn from_value(value: &'a glib::Value) -> Self {
        from_glib(glib::gobject_ffi::g_value_get_enum(value.to_glib_none().0))
    }
}

impl ToValue for RelationType {
    fn to_value(&self) -> glib::Value {
        let mut value = glib::Value::for_value_type::<Self>();
        unsafe {
            glib::gobject_ffi::g_value_set_enum(value.to_glib_none_mut().0, self.into_glib());
        }
        value
    }

    fn value_type(&self) -> glib::Type {
        Self::static_type()
    }
}

#[derive(Debug, Eq, PartialEq, Ord, PartialOrd, Hash)]
#[derive(Clone, Copy)]
#[non_exhaustive]
#[doc(alias = "AtspiRole")]
pub enum Role {
    #[doc(alias = "ATSPI_ROLE_INVALID")]
    Invalid,
    #[doc(alias = "ATSPI_ROLE_ACCELERATOR_LABEL")]
    AcceleratorLabel,
    #[doc(alias = "ATSPI_ROLE_ALERT")]
    Alert,
    #[doc(alias = "ATSPI_ROLE_ANIMATION")]
    Animation,
    #[doc(alias = "ATSPI_ROLE_ARROW")]
    Arrow,
    #[doc(alias = "ATSPI_ROLE_CALENDAR")]
    Calendar,
    #[doc(alias = "ATSPI_ROLE_CANVAS")]
    Canvas,
    #[doc(alias = "ATSPI_ROLE_CHECK_BOX")]
    CheckBox,
    #[doc(alias = "ATSPI_ROLE_CHECK_MENU_ITEM")]
    CheckMenuItem,
    #[doc(alias = "ATSPI_ROLE_COLOR_CHOOSER")]
    ColorChooser,
    #[doc(alias = "ATSPI_ROLE_COLUMN_HEADER")]
    ColumnHeader,
    #[doc(alias = "ATSPI_ROLE_COMBO_BOX")]
    ComboBox,
    #[doc(alias = "ATSPI_ROLE_DATE_EDITOR")]
    DateEditor,
    #[doc(alias = "ATSPI_ROLE_DESKTOP_ICON")]
    DesktopIcon,
    #[doc(alias = "ATSPI_ROLE_DESKTOP_FRAME")]
    DesktopFrame,
    #[doc(alias = "ATSPI_ROLE_DIAL")]
    Dial,
    #[doc(alias = "ATSPI_ROLE_DIALOG")]
    Dialog,
    #[doc(alias = "ATSPI_ROLE_DIRECTORY_PANE")]
    DirectoryPane,
    #[doc(alias = "ATSPI_ROLE_DRAWING_AREA")]
    DrawingArea,
    #[doc(alias = "ATSPI_ROLE_FILE_CHOOSER")]
    FileChooser,
    #[doc(alias = "ATSPI_ROLE_FILLER")]
    Filler,
    #[doc(alias = "ATSPI_ROLE_FOCUS_TRAVERSABLE")]
    FocusTraversable,
    #[doc(alias = "ATSPI_ROLE_FONT_CHOOSER")]
    FontChooser,
    #[doc(alias = "ATSPI_ROLE_FRAME")]
    Frame,
    #[doc(alias = "ATSPI_ROLE_GLASS_PANE")]
    GlassPane,
    #[doc(alias = "ATSPI_ROLE_HTML_CONTAINER")]
    HtmlContainer,
    #[doc(alias = "ATSPI_ROLE_ICON")]
    Icon,
    #[doc(alias = "ATSPI_ROLE_IMAGE")]
    Image,
    #[doc(alias = "ATSPI_ROLE_INTERNAL_FRAME")]
    InternalFrame,
    #[doc(alias = "ATSPI_ROLE_LABEL")]
    Label,
    #[doc(alias = "ATSPI_ROLE_LAYERED_PANE")]
    LayeredPane,
    #[doc(alias = "ATSPI_ROLE_LIST")]
    List,
    #[doc(alias = "ATSPI_ROLE_LIST_ITEM")]
    ListItem,
    #[doc(alias = "ATSPI_ROLE_MENU")]
    Menu,
    #[doc(alias = "ATSPI_ROLE_MENU_BAR")]
    MenuBar,
    #[doc(alias = "ATSPI_ROLE_MENU_ITEM")]
    MenuItem,
    #[doc(alias = "ATSPI_ROLE_OPTION_PANE")]
    OptionPane,
    #[doc(alias = "ATSPI_ROLE_PAGE_TAB")]
    PageTab,
    #[doc(alias = "ATSPI_ROLE_PAGE_TAB_LIST")]
    PageTabList,
    #[doc(alias = "ATSPI_ROLE_PANEL")]
    Panel,
    #[doc(alias = "ATSPI_ROLE_PASSWORD_TEXT")]
    PasswordText,
    #[doc(alias = "ATSPI_ROLE_POPUP_MENU")]
    PopupMenu,
    #[doc(alias = "ATSPI_ROLE_PROGRESS_BAR")]
    ProgressBar,
    #[doc(alias = "ATSPI_ROLE_PUSH_BUTTON")]
    PushButton,
    #[doc(alias = "ATSPI_ROLE_RADIO_BUTTON")]
    RadioButton,
    #[doc(alias = "ATSPI_ROLE_RADIO_MENU_ITEM")]
    RadioMenuItem,
    #[doc(alias = "ATSPI_ROLE_ROOT_PANE")]
    RootPane,
    #[doc(alias = "ATSPI_ROLE_ROW_HEADER")]
    RowHeader,
    #[doc(alias = "ATSPI_ROLE_SCROLL_BAR")]
    ScrollBar,
    #[doc(alias = "ATSPI_ROLE_SCROLL_PANE")]
    ScrollPane,
    #[doc(alias = "ATSPI_ROLE_SEPARATOR")]
    Separator,
    #[doc(alias = "ATSPI_ROLE_SLIDER")]
    Slider,
    #[doc(alias = "ATSPI_ROLE_SPIN_BUTTON")]
    SpinButton,
    #[doc(alias = "ATSPI_ROLE_SPLIT_PANE")]
    SplitPane,
    #[doc(alias = "ATSPI_ROLE_STATUS_BAR")]
    StatusBar,
    #[doc(alias = "ATSPI_ROLE_TABLE")]
    Table,
    #[doc(alias = "ATSPI_ROLE_TABLE_CELL")]
    TableCell,
    #[doc(alias = "ATSPI_ROLE_TABLE_COLUMN_HEADER")]
    TableColumnHeader,
    #[doc(alias = "ATSPI_ROLE_TABLE_ROW_HEADER")]
    TableRowHeader,
    #[doc(alias = "ATSPI_ROLE_TEAROFF_MENU_ITEM")]
    TearoffMenuItem,
    #[doc(alias = "ATSPI_ROLE_TERMINAL")]
    Terminal,
    #[doc(alias = "ATSPI_ROLE_TEXT")]
    Text,
    #[doc(alias = "ATSPI_ROLE_TOGGLE_BUTTON")]
    ToggleButton,
    #[doc(alias = "ATSPI_ROLE_TOOL_BAR")]
    ToolBar,
    #[doc(alias = "ATSPI_ROLE_TOOL_TIP")]
    ToolTip,
    #[doc(alias = "ATSPI_ROLE_TREE")]
    Tree,
    #[doc(alias = "ATSPI_ROLE_TREE_TABLE")]
    TreeTable,
    #[doc(alias = "ATSPI_ROLE_UNKNOWN")]
    Unknown,
    #[doc(alias = "ATSPI_ROLE_VIEWPORT")]
    Viewport,
    #[doc(alias = "ATSPI_ROLE_WINDOW")]
    Window,
    #[doc(alias = "ATSPI_ROLE_EXTENDED")]
    Extended,
    #[doc(alias = "ATSPI_ROLE_HEADER")]
    Header,
    #[doc(alias = "ATSPI_ROLE_FOOTER")]
    Footer,
    #[doc(alias = "ATSPI_ROLE_PARAGRAPH")]
    Paragraph,
    #[doc(alias = "ATSPI_ROLE_RULER")]
    Ruler,
    #[doc(alias = "ATSPI_ROLE_APPLICATION")]
    Application,
    #[doc(alias = "ATSPI_ROLE_AUTOCOMPLETE")]
    Autocomplete,
    #[doc(alias = "ATSPI_ROLE_EDITBAR")]
    Editbar,
    #[doc(alias = "ATSPI_ROLE_EMBEDDED")]
    Embedded,
    #[doc(alias = "ATSPI_ROLE_ENTRY")]
    Entry,
    #[doc(alias = "ATSPI_ROLE_CHART")]
    Chart,
    #[doc(alias = "ATSPI_ROLE_CAPTION")]
    Caption,
    #[doc(alias = "ATSPI_ROLE_DOCUMENT_FRAME")]
    DocumentFrame,
    #[doc(alias = "ATSPI_ROLE_HEADING")]
    Heading,
    #[doc(alias = "ATSPI_ROLE_PAGE")]
    Page,
    #[doc(alias = "ATSPI_ROLE_SECTION")]
    Section,
    #[doc(alias = "ATSPI_ROLE_REDUNDANT_OBJECT")]
    RedundantObject,
    #[doc(alias = "ATSPI_ROLE_FORM")]
    Form,
    #[doc(alias = "ATSPI_ROLE_LINK")]
    Link,
    #[doc(alias = "ATSPI_ROLE_INPUT_METHOD_WINDOW")]
    InputMethodWindow,
    #[doc(alias = "ATSPI_ROLE_TABLE_ROW")]
    TableRow,
    #[doc(alias = "ATSPI_ROLE_TREE_ITEM")]
    TreeItem,
    #[doc(alias = "ATSPI_ROLE_DOCUMENT_SPREADSHEET")]
    DocumentSpreadsheet,
    #[doc(alias = "ATSPI_ROLE_DOCUMENT_PRESENTATION")]
    DocumentPresentation,
    #[doc(alias = "ATSPI_ROLE_DOCUMENT_TEXT")]
    DocumentText,
    #[doc(alias = "ATSPI_ROLE_DOCUMENT_WEB")]
    DocumentWeb,
    #[doc(alias = "ATSPI_ROLE_DOCUMENT_EMAIL")]
    DocumentEmail,
    #[doc(alias = "ATSPI_ROLE_COMMENT")]
    Comment,
    #[doc(alias = "ATSPI_ROLE_LIST_BOX")]
    ListBox,
    #[doc(alias = "ATSPI_ROLE_GROUPING")]
    Grouping,
    #[doc(alias = "ATSPI_ROLE_IMAGE_MAP")]
    ImageMap,
    #[doc(alias = "ATSPI_ROLE_NOTIFICATION")]
    Notification,
    #[doc(alias = "ATSPI_ROLE_INFO_BAR")]
    InfoBar,
    #[doc(alias = "ATSPI_ROLE_LEVEL_BAR")]
    LevelBar,
    #[doc(alias = "ATSPI_ROLE_TITLE_BAR")]
    TitleBar,
    #[doc(alias = "ATSPI_ROLE_BLOCK_QUOTE")]
    BlockQuote,
    #[doc(alias = "ATSPI_ROLE_AUDIO")]
    Audio,
    #[doc(alias = "ATSPI_ROLE_VIDEO")]
    Video,
    #[doc(alias = "ATSPI_ROLE_DEFINITION")]
    Definition,
    #[doc(alias = "ATSPI_ROLE_ARTICLE")]
    Article,
    #[doc(alias = "ATSPI_ROLE_LANDMARK")]
    Landmark,
    #[doc(alias = "ATSPI_ROLE_LOG")]
    Log,
    #[doc(alias = "ATSPI_ROLE_MARQUEE")]
    Marquee,
    #[doc(alias = "ATSPI_ROLE_MATH")]
    Math,
    #[doc(alias = "ATSPI_ROLE_RATING")]
    Rating,
    #[doc(alias = "ATSPI_ROLE_TIMER")]
    Timer,
    #[doc(alias = "ATSPI_ROLE_STATIC")]
    Static,
    #[doc(alias = "ATSPI_ROLE_MATH_FRACTION")]
    MathFraction,
    #[doc(alias = "ATSPI_ROLE_MATH_ROOT")]
    MathRoot,
    #[doc(alias = "ATSPI_ROLE_SUBSCRIPT")]
    Subscript,
    #[doc(alias = "ATSPI_ROLE_SUPERSCRIPT")]
    Superscript,
    #[doc(alias = "ATSPI_ROLE_DESCRIPTION_LIST")]
    DescriptionList,
    #[doc(alias = "ATSPI_ROLE_DESCRIPTION_TERM")]
    DescriptionTerm,
    #[doc(alias = "ATSPI_ROLE_DESCRIPTION_VALUE")]
    DescriptionValue,
    #[doc(alias = "ATSPI_ROLE_FOOTNOTE")]
    Footnote,
    #[doc(alias = "ATSPI_ROLE_CONTENT_DELETION")]
    ContentDeletion,
    #[doc(alias = "ATSPI_ROLE_CONTENT_INSERTION")]
    ContentInsertion,
    #[doc(alias = "ATSPI_ROLE_MARK")]
    Mark,
    #[doc(alias = "ATSPI_ROLE_SUGGESTION")]
    Suggestion,
    #[doc(alias = "ATSPI_ROLE_LAST_DEFINED")]
    LastDefined,
#[doc(hidden)]
    __Unknown(i32),
}

impl Role {
    #[doc(alias = "atspi_role_get_name")]
    #[doc(alias = "get_name")]
    pub fn name(self) -> Option<glib::GString> {
        unsafe {
            from_glib_full(ffi::atspi_role_get_name(self.into_glib()))
        }
    }
}

impl fmt::Display for Role {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "Role::{}", match *self {
            Self::Invalid => "Invalid",
            Self::AcceleratorLabel => "AcceleratorLabel",
            Self::Alert => "Alert",
            Self::Animation => "Animation",
            Self::Arrow => "Arrow",
            Self::Calendar => "Calendar",
            Self::Canvas => "Canvas",
            Self::CheckBox => "CheckBox",
            Self::CheckMenuItem => "CheckMenuItem",
            Self::ColorChooser => "ColorChooser",
            Self::ColumnHeader => "ColumnHeader",
            Self::ComboBox => "ComboBox",
            Self::DateEditor => "DateEditor",
            Self::DesktopIcon => "DesktopIcon",
            Self::DesktopFrame => "DesktopFrame",
            Self::Dial => "Dial",
            Self::Dialog => "Dialog",
            Self::DirectoryPane => "DirectoryPane",
            Self::DrawingArea => "DrawingArea",
            Self::FileChooser => "FileChooser",
            Self::Filler => "Filler",
            Self::FocusTraversable => "FocusTraversable",
            Self::FontChooser => "FontChooser",
            Self::Frame => "Frame",
            Self::GlassPane => "GlassPane",
            Self::HtmlContainer => "HtmlContainer",
            Self::Icon => "Icon",
            Self::Image => "Image",
            Self::InternalFrame => "InternalFrame",
            Self::Label => "Label",
            Self::LayeredPane => "LayeredPane",
            Self::List => "List",
            Self::ListItem => "ListItem",
            Self::Menu => "Menu",
            Self::MenuBar => "MenuBar",
            Self::MenuItem => "MenuItem",
            Self::OptionPane => "OptionPane",
            Self::PageTab => "PageTab",
            Self::PageTabList => "PageTabList",
            Self::Panel => "Panel",
            Self::PasswordText => "PasswordText",
            Self::PopupMenu => "PopupMenu",
            Self::ProgressBar => "ProgressBar",
            Self::PushButton => "PushButton",
            Self::RadioButton => "RadioButton",
            Self::RadioMenuItem => "RadioMenuItem",
            Self::RootPane => "RootPane",
            Self::RowHeader => "RowHeader",
            Self::ScrollBar => "ScrollBar",
            Self::ScrollPane => "ScrollPane",
            Self::Separator => "Separator",
            Self::Slider => "Slider",
            Self::SpinButton => "SpinButton",
            Self::SplitPane => "SplitPane",
            Self::StatusBar => "StatusBar",
            Self::Table => "Table",
            Self::TableCell => "TableCell",
            Self::TableColumnHeader => "TableColumnHeader",
            Self::TableRowHeader => "TableRowHeader",
            Self::TearoffMenuItem => "TearoffMenuItem",
            Self::Terminal => "Terminal",
            Self::Text => "Text",
            Self::ToggleButton => "ToggleButton",
            Self::ToolBar => "ToolBar",
            Self::ToolTip => "ToolTip",
            Self::Tree => "Tree",
            Self::TreeTable => "TreeTable",
            Self::Unknown => "Unknown",
            Self::Viewport => "Viewport",
            Self::Window => "Window",
            Self::Extended => "Extended",
            Self::Header => "Header",
            Self::Footer => "Footer",
            Self::Paragraph => "Paragraph",
            Self::Ruler => "Ruler",
            Self::Application => "Application",
            Self::Autocomplete => "Autocomplete",
            Self::Editbar => "Editbar",
            Self::Embedded => "Embedded",
            Self::Entry => "Entry",
            Self::Chart => "Chart",
            Self::Caption => "Caption",
            Self::DocumentFrame => "DocumentFrame",
            Self::Heading => "Heading",
            Self::Page => "Page",
            Self::Section => "Section",
            Self::RedundantObject => "RedundantObject",
            Self::Form => "Form",
            Self::Link => "Link",
            Self::InputMethodWindow => "InputMethodWindow",
            Self::TableRow => "TableRow",
            Self::TreeItem => "TreeItem",
            Self::DocumentSpreadsheet => "DocumentSpreadsheet",
            Self::DocumentPresentation => "DocumentPresentation",
            Self::DocumentText => "DocumentText",
            Self::DocumentWeb => "DocumentWeb",
            Self::DocumentEmail => "DocumentEmail",
            Self::Comment => "Comment",
            Self::ListBox => "ListBox",
            Self::Grouping => "Grouping",
            Self::ImageMap => "ImageMap",
            Self::Notification => "Notification",
            Self::InfoBar => "InfoBar",
            Self::LevelBar => "LevelBar",
            Self::TitleBar => "TitleBar",
            Self::BlockQuote => "BlockQuote",
            Self::Audio => "Audio",
            Self::Video => "Video",
            Self::Definition => "Definition",
            Self::Article => "Article",
            Self::Landmark => "Landmark",
            Self::Log => "Log",
            Self::Marquee => "Marquee",
            Self::Math => "Math",
            Self::Rating => "Rating",
            Self::Timer => "Timer",
            Self::Static => "Static",
            Self::MathFraction => "MathFraction",
            Self::MathRoot => "MathRoot",
            Self::Subscript => "Subscript",
            Self::Superscript => "Superscript",
            Self::DescriptionList => "DescriptionList",
            Self::DescriptionTerm => "DescriptionTerm",
            Self::DescriptionValue => "DescriptionValue",
            Self::Footnote => "Footnote",
            Self::ContentDeletion => "ContentDeletion",
            Self::ContentInsertion => "ContentInsertion",
            Self::Mark => "Mark",
            Self::Suggestion => "Suggestion",
            Self::LastDefined => "LastDefined",
            _ => "Unknown",
        })
    }
}

#[doc(hidden)]
impl IntoGlib for Role {
    type GlibType = ffi::AtspiRole;

    fn into_glib(self) -> ffi::AtspiRole {
        match self {
            Self::Invalid => ffi::ATSPI_ROLE_INVALID,
            Self::AcceleratorLabel => ffi::ATSPI_ROLE_ACCELERATOR_LABEL,
            Self::Alert => ffi::ATSPI_ROLE_ALERT,
            Self::Animation => ffi::ATSPI_ROLE_ANIMATION,
            Self::Arrow => ffi::ATSPI_ROLE_ARROW,
            Self::Calendar => ffi::ATSPI_ROLE_CALENDAR,
            Self::Canvas => ffi::ATSPI_ROLE_CANVAS,
            Self::CheckBox => ffi::ATSPI_ROLE_CHECK_BOX,
            Self::CheckMenuItem => ffi::ATSPI_ROLE_CHECK_MENU_ITEM,
            Self::ColorChooser => ffi::ATSPI_ROLE_COLOR_CHOOSER,
            Self::ColumnHeader => ffi::ATSPI_ROLE_COLUMN_HEADER,
            Self::ComboBox => ffi::ATSPI_ROLE_COMBO_BOX,
            Self::DateEditor => ffi::ATSPI_ROLE_DATE_EDITOR,
            Self::DesktopIcon => ffi::ATSPI_ROLE_DESKTOP_ICON,
            Self::DesktopFrame => ffi::ATSPI_ROLE_DESKTOP_FRAME,
            Self::Dial => ffi::ATSPI_ROLE_DIAL,
            Self::Dialog => ffi::ATSPI_ROLE_DIALOG,
            Self::DirectoryPane => ffi::ATSPI_ROLE_DIRECTORY_PANE,
            Self::DrawingArea => ffi::ATSPI_ROLE_DRAWING_AREA,
            Self::FileChooser => ffi::ATSPI_ROLE_FILE_CHOOSER,
            Self::Filler => ffi::ATSPI_ROLE_FILLER,
            Self::FocusTraversable => ffi::ATSPI_ROLE_FOCUS_TRAVERSABLE,
            Self::FontChooser => ffi::ATSPI_ROLE_FONT_CHOOSER,
            Self::Frame => ffi::ATSPI_ROLE_FRAME,
            Self::GlassPane => ffi::ATSPI_ROLE_GLASS_PANE,
            Self::HtmlContainer => ffi::ATSPI_ROLE_HTML_CONTAINER,
            Self::Icon => ffi::ATSPI_ROLE_ICON,
            Self::Image => ffi::ATSPI_ROLE_IMAGE,
            Self::InternalFrame => ffi::ATSPI_ROLE_INTERNAL_FRAME,
            Self::Label => ffi::ATSPI_ROLE_LABEL,
            Self::LayeredPane => ffi::ATSPI_ROLE_LAYERED_PANE,
            Self::List => ffi::ATSPI_ROLE_LIST,
            Self::ListItem => ffi::ATSPI_ROLE_LIST_ITEM,
            Self::Menu => ffi::ATSPI_ROLE_MENU,
            Self::MenuBar => ffi::ATSPI_ROLE_MENU_BAR,
            Self::MenuItem => ffi::ATSPI_ROLE_MENU_ITEM,
            Self::OptionPane => ffi::ATSPI_ROLE_OPTION_PANE,
            Self::PageTab => ffi::ATSPI_ROLE_PAGE_TAB,
            Self::PageTabList => ffi::ATSPI_ROLE_PAGE_TAB_LIST,
            Self::Panel => ffi::ATSPI_ROLE_PANEL,
            Self::PasswordText => ffi::ATSPI_ROLE_PASSWORD_TEXT,
            Self::PopupMenu => ffi::ATSPI_ROLE_POPUP_MENU,
            Self::ProgressBar => ffi::ATSPI_ROLE_PROGRESS_BAR,
            Self::PushButton => ffi::ATSPI_ROLE_PUSH_BUTTON,
            Self::RadioButton => ffi::ATSPI_ROLE_RADIO_BUTTON,
            Self::RadioMenuItem => ffi::ATSPI_ROLE_RADIO_MENU_ITEM,
            Self::RootPane => ffi::ATSPI_ROLE_ROOT_PANE,
            Self::RowHeader => ffi::ATSPI_ROLE_ROW_HEADER,
            Self::ScrollBar => ffi::ATSPI_ROLE_SCROLL_BAR,
            Self::ScrollPane => ffi::ATSPI_ROLE_SCROLL_PANE,
            Self::Separator => ffi::ATSPI_ROLE_SEPARATOR,
            Self::Slider => ffi::ATSPI_ROLE_SLIDER,
            Self::SpinButton => ffi::ATSPI_ROLE_SPIN_BUTTON,
            Self::SplitPane => ffi::ATSPI_ROLE_SPLIT_PANE,
            Self::StatusBar => ffi::ATSPI_ROLE_STATUS_BAR,
            Self::Table => ffi::ATSPI_ROLE_TABLE,
            Self::TableCell => ffi::ATSPI_ROLE_TABLE_CELL,
            Self::TableColumnHeader => ffi::ATSPI_ROLE_TABLE_COLUMN_HEADER,
            Self::TableRowHeader => ffi::ATSPI_ROLE_TABLE_ROW_HEADER,
            Self::TearoffMenuItem => ffi::ATSPI_ROLE_TEAROFF_MENU_ITEM,
            Self::Terminal => ffi::ATSPI_ROLE_TERMINAL,
            Self::Text => ffi::ATSPI_ROLE_TEXT,
            Self::ToggleButton => ffi::ATSPI_ROLE_TOGGLE_BUTTON,
            Self::ToolBar => ffi::ATSPI_ROLE_TOOL_BAR,
            Self::ToolTip => ffi::ATSPI_ROLE_TOOL_TIP,
            Self::Tree => ffi::ATSPI_ROLE_TREE,
            Self::TreeTable => ffi::ATSPI_ROLE_TREE_TABLE,
            Self::Unknown => ffi::ATSPI_ROLE_UNKNOWN,
            Self::Viewport => ffi::ATSPI_ROLE_VIEWPORT,
            Self::Window => ffi::ATSPI_ROLE_WINDOW,
            Self::Extended => ffi::ATSPI_ROLE_EXTENDED,
            Self::Header => ffi::ATSPI_ROLE_HEADER,
            Self::Footer => ffi::ATSPI_ROLE_FOOTER,
            Self::Paragraph => ffi::ATSPI_ROLE_PARAGRAPH,
            Self::Ruler => ffi::ATSPI_ROLE_RULER,
            Self::Application => ffi::ATSPI_ROLE_APPLICATION,
            Self::Autocomplete => ffi::ATSPI_ROLE_AUTOCOMPLETE,
            Self::Editbar => ffi::ATSPI_ROLE_EDITBAR,
            Self::Embedded => ffi::ATSPI_ROLE_EMBEDDED,
            Self::Entry => ffi::ATSPI_ROLE_ENTRY,
            Self::Chart => ffi::ATSPI_ROLE_CHART,
            Self::Caption => ffi::ATSPI_ROLE_CAPTION,
            Self::DocumentFrame => ffi::ATSPI_ROLE_DOCUMENT_FRAME,
            Self::Heading => ffi::ATSPI_ROLE_HEADING,
            Self::Page => ffi::ATSPI_ROLE_PAGE,
            Self::Section => ffi::ATSPI_ROLE_SECTION,
            Self::RedundantObject => ffi::ATSPI_ROLE_REDUNDANT_OBJECT,
            Self::Form => ffi::ATSPI_ROLE_FORM,
            Self::Link => ffi::ATSPI_ROLE_LINK,
            Self::InputMethodWindow => ffi::ATSPI_ROLE_INPUT_METHOD_WINDOW,
            Self::TableRow => ffi::ATSPI_ROLE_TABLE_ROW,
            Self::TreeItem => ffi::ATSPI_ROLE_TREE_ITEM,
            Self::DocumentSpreadsheet => ffi::ATSPI_ROLE_DOCUMENT_SPREADSHEET,
            Self::DocumentPresentation => ffi::ATSPI_ROLE_DOCUMENT_PRESENTATION,
            Self::DocumentText => ffi::ATSPI_ROLE_DOCUMENT_TEXT,
            Self::DocumentWeb => ffi::ATSPI_ROLE_DOCUMENT_WEB,
            Self::DocumentEmail => ffi::ATSPI_ROLE_DOCUMENT_EMAIL,
            Self::Comment => ffi::ATSPI_ROLE_COMMENT,
            Self::ListBox => ffi::ATSPI_ROLE_LIST_BOX,
            Self::Grouping => ffi::ATSPI_ROLE_GROUPING,
            Self::ImageMap => ffi::ATSPI_ROLE_IMAGE_MAP,
            Self::Notification => ffi::ATSPI_ROLE_NOTIFICATION,
            Self::InfoBar => ffi::ATSPI_ROLE_INFO_BAR,
            Self::LevelBar => ffi::ATSPI_ROLE_LEVEL_BAR,
            Self::TitleBar => ffi::ATSPI_ROLE_TITLE_BAR,
            Self::BlockQuote => ffi::ATSPI_ROLE_BLOCK_QUOTE,
            Self::Audio => ffi::ATSPI_ROLE_AUDIO,
            Self::Video => ffi::ATSPI_ROLE_VIDEO,
            Self::Definition => ffi::ATSPI_ROLE_DEFINITION,
            Self::Article => ffi::ATSPI_ROLE_ARTICLE,
            Self::Landmark => ffi::ATSPI_ROLE_LANDMARK,
            Self::Log => ffi::ATSPI_ROLE_LOG,
            Self::Marquee => ffi::ATSPI_ROLE_MARQUEE,
            Self::Math => ffi::ATSPI_ROLE_MATH,
            Self::Rating => ffi::ATSPI_ROLE_RATING,
            Self::Timer => ffi::ATSPI_ROLE_TIMER,
            Self::Static => ffi::ATSPI_ROLE_STATIC,
            Self::MathFraction => ffi::ATSPI_ROLE_MATH_FRACTION,
            Self::MathRoot => ffi::ATSPI_ROLE_MATH_ROOT,
            Self::Subscript => ffi::ATSPI_ROLE_SUBSCRIPT,
            Self::Superscript => ffi::ATSPI_ROLE_SUPERSCRIPT,
            Self::DescriptionList => ffi::ATSPI_ROLE_DESCRIPTION_LIST,
            Self::DescriptionTerm => ffi::ATSPI_ROLE_DESCRIPTION_TERM,
            Self::DescriptionValue => ffi::ATSPI_ROLE_DESCRIPTION_VALUE,
            Self::Footnote => ffi::ATSPI_ROLE_FOOTNOTE,
            Self::ContentDeletion => ffi::ATSPI_ROLE_CONTENT_DELETION,
            Self::ContentInsertion => ffi::ATSPI_ROLE_CONTENT_INSERTION,
            Self::Mark => ffi::ATSPI_ROLE_MARK,
            Self::Suggestion => ffi::ATSPI_ROLE_SUGGESTION,
            Self::LastDefined => ffi::ATSPI_ROLE_LAST_DEFINED,
            Self::__Unknown(value) => value,
}
    }
}

#[doc(hidden)]
impl FromGlib<ffi::AtspiRole> for Role {
    unsafe fn from_glib(value: ffi::AtspiRole) -> Self {
        match value {
            ffi::ATSPI_ROLE_INVALID => Self::Invalid,
            ffi::ATSPI_ROLE_ACCELERATOR_LABEL => Self::AcceleratorLabel,
            ffi::ATSPI_ROLE_ALERT => Self::Alert,
            ffi::ATSPI_ROLE_ANIMATION => Self::Animation,
            ffi::ATSPI_ROLE_ARROW => Self::Arrow,
            ffi::ATSPI_ROLE_CALENDAR => Self::Calendar,
            ffi::ATSPI_ROLE_CANVAS => Self::Canvas,
            ffi::ATSPI_ROLE_CHECK_BOX => Self::CheckBox,
            ffi::ATSPI_ROLE_CHECK_MENU_ITEM => Self::CheckMenuItem,
            ffi::ATSPI_ROLE_COLOR_CHOOSER => Self::ColorChooser,
            ffi::ATSPI_ROLE_COLUMN_HEADER => Self::ColumnHeader,
            ffi::ATSPI_ROLE_COMBO_BOX => Self::ComboBox,
            ffi::ATSPI_ROLE_DATE_EDITOR => Self::DateEditor,
            ffi::ATSPI_ROLE_DESKTOP_ICON => Self::DesktopIcon,
            ffi::ATSPI_ROLE_DESKTOP_FRAME => Self::DesktopFrame,
            ffi::ATSPI_ROLE_DIAL => Self::Dial,
            ffi::ATSPI_ROLE_DIALOG => Self::Dialog,
            ffi::ATSPI_ROLE_DIRECTORY_PANE => Self::DirectoryPane,
            ffi::ATSPI_ROLE_DRAWING_AREA => Self::DrawingArea,
            ffi::ATSPI_ROLE_FILE_CHOOSER => Self::FileChooser,
            ffi::ATSPI_ROLE_FILLER => Self::Filler,
            ffi::ATSPI_ROLE_FOCUS_TRAVERSABLE => Self::FocusTraversable,
            ffi::ATSPI_ROLE_FONT_CHOOSER => Self::FontChooser,
            ffi::ATSPI_ROLE_FRAME => Self::Frame,
            ffi::ATSPI_ROLE_GLASS_PANE => Self::GlassPane,
            ffi::ATSPI_ROLE_HTML_CONTAINER => Self::HtmlContainer,
            ffi::ATSPI_ROLE_ICON => Self::Icon,
            ffi::ATSPI_ROLE_IMAGE => Self::Image,
            ffi::ATSPI_ROLE_INTERNAL_FRAME => Self::InternalFrame,
            ffi::ATSPI_ROLE_LABEL => Self::Label,
            ffi::ATSPI_ROLE_LAYERED_PANE => Self::LayeredPane,
            ffi::ATSPI_ROLE_LIST => Self::List,
            ffi::ATSPI_ROLE_LIST_ITEM => Self::ListItem,
            ffi::ATSPI_ROLE_MENU => Self::Menu,
            ffi::ATSPI_ROLE_MENU_BAR => Self::MenuBar,
            ffi::ATSPI_ROLE_MENU_ITEM => Self::MenuItem,
            ffi::ATSPI_ROLE_OPTION_PANE => Self::OptionPane,
            ffi::ATSPI_ROLE_PAGE_TAB => Self::PageTab,
            ffi::ATSPI_ROLE_PAGE_TAB_LIST => Self::PageTabList,
            ffi::ATSPI_ROLE_PANEL => Self::Panel,
            ffi::ATSPI_ROLE_PASSWORD_TEXT => Self::PasswordText,
            ffi::ATSPI_ROLE_POPUP_MENU => Self::PopupMenu,
            ffi::ATSPI_ROLE_PROGRESS_BAR => Self::ProgressBar,
            ffi::ATSPI_ROLE_PUSH_BUTTON => Self::PushButton,
            ffi::ATSPI_ROLE_RADIO_BUTTON => Self::RadioButton,
            ffi::ATSPI_ROLE_RADIO_MENU_ITEM => Self::RadioMenuItem,
            ffi::ATSPI_ROLE_ROOT_PANE => Self::RootPane,
            ffi::ATSPI_ROLE_ROW_HEADER => Self::RowHeader,
            ffi::ATSPI_ROLE_SCROLL_BAR => Self::ScrollBar,
            ffi::ATSPI_ROLE_SCROLL_PANE => Self::ScrollPane,
            ffi::ATSPI_ROLE_SEPARATOR => Self::Separator,
            ffi::ATSPI_ROLE_SLIDER => Self::Slider,
            ffi::ATSPI_ROLE_SPIN_BUTTON => Self::SpinButton,
            ffi::ATSPI_ROLE_SPLIT_PANE => Self::SplitPane,
            ffi::ATSPI_ROLE_STATUS_BAR => Self::StatusBar,
            ffi::ATSPI_ROLE_TABLE => Self::Table,
            ffi::ATSPI_ROLE_TABLE_CELL => Self::TableCell,
            ffi::ATSPI_ROLE_TABLE_COLUMN_HEADER => Self::TableColumnHeader,
            ffi::ATSPI_ROLE_TABLE_ROW_HEADER => Self::TableRowHeader,
            ffi::ATSPI_ROLE_TEAROFF_MENU_ITEM => Self::TearoffMenuItem,
            ffi::ATSPI_ROLE_TERMINAL => Self::Terminal,
            ffi::ATSPI_ROLE_TEXT => Self::Text,
            ffi::ATSPI_ROLE_TOGGLE_BUTTON => Self::ToggleButton,
            ffi::ATSPI_ROLE_TOOL_BAR => Self::ToolBar,
            ffi::ATSPI_ROLE_TOOL_TIP => Self::ToolTip,
            ffi::ATSPI_ROLE_TREE => Self::Tree,
            ffi::ATSPI_ROLE_TREE_TABLE => Self::TreeTable,
            ffi::ATSPI_ROLE_UNKNOWN => Self::Unknown,
            ffi::ATSPI_ROLE_VIEWPORT => Self::Viewport,
            ffi::ATSPI_ROLE_WINDOW => Self::Window,
            ffi::ATSPI_ROLE_EXTENDED => Self::Extended,
            ffi::ATSPI_ROLE_HEADER => Self::Header,
            ffi::ATSPI_ROLE_FOOTER => Self::Footer,
            ffi::ATSPI_ROLE_PARAGRAPH => Self::Paragraph,
            ffi::ATSPI_ROLE_RULER => Self::Ruler,
            ffi::ATSPI_ROLE_APPLICATION => Self::Application,
            ffi::ATSPI_ROLE_AUTOCOMPLETE => Self::Autocomplete,
            ffi::ATSPI_ROLE_EDITBAR => Self::Editbar,
            ffi::ATSPI_ROLE_EMBEDDED => Self::Embedded,
            ffi::ATSPI_ROLE_ENTRY => Self::Entry,
            ffi::ATSPI_ROLE_CHART => Self::Chart,
            ffi::ATSPI_ROLE_CAPTION => Self::Caption,
            ffi::ATSPI_ROLE_DOCUMENT_FRAME => Self::DocumentFrame,
            ffi::ATSPI_ROLE_HEADING => Self::Heading,
            ffi::ATSPI_ROLE_PAGE => Self::Page,
            ffi::ATSPI_ROLE_SECTION => Self::Section,
            ffi::ATSPI_ROLE_REDUNDANT_OBJECT => Self::RedundantObject,
            ffi::ATSPI_ROLE_FORM => Self::Form,
            ffi::ATSPI_ROLE_LINK => Self::Link,
            ffi::ATSPI_ROLE_INPUT_METHOD_WINDOW => Self::InputMethodWindow,
            ffi::ATSPI_ROLE_TABLE_ROW => Self::TableRow,
            ffi::ATSPI_ROLE_TREE_ITEM => Self::TreeItem,
            ffi::ATSPI_ROLE_DOCUMENT_SPREADSHEET => Self::DocumentSpreadsheet,
            ffi::ATSPI_ROLE_DOCUMENT_PRESENTATION => Self::DocumentPresentation,
            ffi::ATSPI_ROLE_DOCUMENT_TEXT => Self::DocumentText,
            ffi::ATSPI_ROLE_DOCUMENT_WEB => Self::DocumentWeb,
            ffi::ATSPI_ROLE_DOCUMENT_EMAIL => Self::DocumentEmail,
            ffi::ATSPI_ROLE_COMMENT => Self::Comment,
            ffi::ATSPI_ROLE_LIST_BOX => Self::ListBox,
            ffi::ATSPI_ROLE_GROUPING => Self::Grouping,
            ffi::ATSPI_ROLE_IMAGE_MAP => Self::ImageMap,
            ffi::ATSPI_ROLE_NOTIFICATION => Self::Notification,
            ffi::ATSPI_ROLE_INFO_BAR => Self::InfoBar,
            ffi::ATSPI_ROLE_LEVEL_BAR => Self::LevelBar,
            ffi::ATSPI_ROLE_TITLE_BAR => Self::TitleBar,
            ffi::ATSPI_ROLE_BLOCK_QUOTE => Self::BlockQuote,
            ffi::ATSPI_ROLE_AUDIO => Self::Audio,
            ffi::ATSPI_ROLE_VIDEO => Self::Video,
            ffi::ATSPI_ROLE_DEFINITION => Self::Definition,
            ffi::ATSPI_ROLE_ARTICLE => Self::Article,
            ffi::ATSPI_ROLE_LANDMARK => Self::Landmark,
            ffi::ATSPI_ROLE_LOG => Self::Log,
            ffi::ATSPI_ROLE_MARQUEE => Self::Marquee,
            ffi::ATSPI_ROLE_MATH => Self::Math,
            ffi::ATSPI_ROLE_RATING => Self::Rating,
            ffi::ATSPI_ROLE_TIMER => Self::Timer,
            ffi::ATSPI_ROLE_STATIC => Self::Static,
            ffi::ATSPI_ROLE_MATH_FRACTION => Self::MathFraction,
            ffi::ATSPI_ROLE_MATH_ROOT => Self::MathRoot,
            ffi::ATSPI_ROLE_SUBSCRIPT => Self::Subscript,
            ffi::ATSPI_ROLE_SUPERSCRIPT => Self::Superscript,
            ffi::ATSPI_ROLE_DESCRIPTION_LIST => Self::DescriptionList,
            ffi::ATSPI_ROLE_DESCRIPTION_TERM => Self::DescriptionTerm,
            ffi::ATSPI_ROLE_DESCRIPTION_VALUE => Self::DescriptionValue,
            ffi::ATSPI_ROLE_FOOTNOTE => Self::Footnote,
            ffi::ATSPI_ROLE_CONTENT_DELETION => Self::ContentDeletion,
            ffi::ATSPI_ROLE_CONTENT_INSERTION => Self::ContentInsertion,
            ffi::ATSPI_ROLE_MARK => Self::Mark,
            ffi::ATSPI_ROLE_SUGGESTION => Self::Suggestion,
            ffi::ATSPI_ROLE_LAST_DEFINED => Self::LastDefined,
            value => Self::__Unknown(value),
}
    }
}

impl StaticType for Role {
    fn static_type() -> Type {
        unsafe { from_glib(ffi::atspi_role_get_type()) }
    }
}

impl glib::value::ValueType for Role {
    type Type = Self;
}

unsafe impl<'a> FromValue<'a> for Role {
    type Checker = glib::value::GenericValueTypeChecker<Self>;

    unsafe fn from_value(value: &'a glib::Value) -> Self {
        from_glib(glib::gobject_ffi::g_value_get_enum(value.to_glib_none().0))
    }
}

impl ToValue for Role {
    fn to_value(&self) -> glib::Value {
        let mut value = glib::Value::for_value_type::<Self>();
        unsafe {
            glib::gobject_ffi::g_value_set_enum(value.to_glib_none_mut().0, self.into_glib());
        }
        value
    }

    fn value_type(&self) -> glib::Type {
        Self::static_type()
    }
}

#[derive(Debug, Eq, PartialEq, Ord, PartialOrd, Hash)]
#[derive(Clone, Copy)]
#[non_exhaustive]
#[doc(alias = "AtspiScrollType")]
pub enum ScrollType {
    #[doc(alias = "ATSPI_SCROLL_TOP_LEFT")]
    TopLeft,
    #[doc(alias = "ATSPI_SCROLL_BOTTOM_RIGHT")]
    BottomRight,
    #[doc(alias = "ATSPI_SCROLL_TOP_EDGE")]
    TopEdge,
    #[doc(alias = "ATSPI_SCROLL_BOTTOM_EDGE")]
    BottomEdge,
    #[doc(alias = "ATSPI_SCROLL_LEFT_EDGE")]
    LeftEdge,
    #[doc(alias = "ATSPI_SCROLL_RIGHT_EDGE")]
    RightEdge,
    #[doc(alias = "ATSPI_SCROLL_ANYWHERE")]
    Anywhere,
#[doc(hidden)]
    __Unknown(i32),
}

impl fmt::Display for ScrollType {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "ScrollType::{}", match *self {
            Self::TopLeft => "TopLeft",
            Self::BottomRight => "BottomRight",
            Self::TopEdge => "TopEdge",
            Self::BottomEdge => "BottomEdge",
            Self::LeftEdge => "LeftEdge",
            Self::RightEdge => "RightEdge",
            Self::Anywhere => "Anywhere",
            _ => "Unknown",
        })
    }
}

#[doc(hidden)]
impl IntoGlib for ScrollType {
    type GlibType = ffi::AtspiScrollType;

    fn into_glib(self) -> ffi::AtspiScrollType {
        match self {
            Self::TopLeft => ffi::ATSPI_SCROLL_TOP_LEFT,
            Self::BottomRight => ffi::ATSPI_SCROLL_BOTTOM_RIGHT,
            Self::TopEdge => ffi::ATSPI_SCROLL_TOP_EDGE,
            Self::BottomEdge => ffi::ATSPI_SCROLL_BOTTOM_EDGE,
            Self::LeftEdge => ffi::ATSPI_SCROLL_LEFT_EDGE,
            Self::RightEdge => ffi::ATSPI_SCROLL_RIGHT_EDGE,
            Self::Anywhere => ffi::ATSPI_SCROLL_ANYWHERE,
            Self::__Unknown(value) => value,
}
    }
}

#[doc(hidden)]
impl FromGlib<ffi::AtspiScrollType> for ScrollType {
    unsafe fn from_glib(value: ffi::AtspiScrollType) -> Self {
        match value {
            ffi::ATSPI_SCROLL_TOP_LEFT => Self::TopLeft,
            ffi::ATSPI_SCROLL_BOTTOM_RIGHT => Self::BottomRight,
            ffi::ATSPI_SCROLL_TOP_EDGE => Self::TopEdge,
            ffi::ATSPI_SCROLL_BOTTOM_EDGE => Self::BottomEdge,
            ffi::ATSPI_SCROLL_LEFT_EDGE => Self::LeftEdge,
            ffi::ATSPI_SCROLL_RIGHT_EDGE => Self::RightEdge,
            ffi::ATSPI_SCROLL_ANYWHERE => Self::Anywhere,
            value => Self::__Unknown(value),
}
    }
}

impl StaticType for ScrollType {
    fn static_type() -> Type {
        unsafe { from_glib(ffi::atspi_scroll_type_get_type()) }
    }
}

impl glib::value::ValueType for ScrollType {
    type Type = Self;
}

unsafe impl<'a> FromValue<'a> for ScrollType {
    type Checker = glib::value::GenericValueTypeChecker<Self>;

    unsafe fn from_value(value: &'a glib::Value) -> Self {
        from_glib(glib::gobject_ffi::g_value_get_enum(value.to_glib_none().0))
    }
}

impl ToValue for ScrollType {
    fn to_value(&self) -> glib::Value {
        let mut value = glib::Value::for_value_type::<Self>();
        unsafe {
            glib::gobject_ffi::g_value_set_enum(value.to_glib_none_mut().0, self.into_glib());
        }
        value
    }

    fn value_type(&self) -> glib::Type {
        Self::static_type()
    }
}

#[derive(Debug, Eq, PartialEq, Ord, PartialOrd, Hash)]
#[derive(Clone, Copy)]
#[non_exhaustive]
#[doc(alias = "AtspiStateType")]
pub enum StateType {
    #[doc(alias = "ATSPI_STATE_INVALID")]
    Invalid,
    #[doc(alias = "ATSPI_STATE_ACTIVE")]
    Active,
    #[doc(alias = "ATSPI_STATE_ARMED")]
    Armed,
    #[doc(alias = "ATSPI_STATE_BUSY")]
    Busy,
    #[doc(alias = "ATSPI_STATE_CHECKED")]
    Checked,
    #[doc(alias = "ATSPI_STATE_COLLAPSED")]
    Collapsed,
    #[doc(alias = "ATSPI_STATE_DEFUNCT")]
    Defunct,
    #[doc(alias = "ATSPI_STATE_EDITABLE")]
    Editable,
    #[doc(alias = "ATSPI_STATE_ENABLED")]
    Enabled,
    #[doc(alias = "ATSPI_STATE_EXPANDABLE")]
    Expandable,
    #[doc(alias = "ATSPI_STATE_EXPANDED")]
    Expanded,
    #[doc(alias = "ATSPI_STATE_FOCUSABLE")]
    Focusable,
    #[doc(alias = "ATSPI_STATE_FOCUSED")]
    Focused,
    #[doc(alias = "ATSPI_STATE_HAS_TOOLTIP")]
    HasTooltip,
    #[doc(alias = "ATSPI_STATE_HORIZONTAL")]
    Horizontal,
    #[doc(alias = "ATSPI_STATE_ICONIFIED")]
    Iconified,
    #[doc(alias = "ATSPI_STATE_MODAL")]
    Modal,
    #[doc(alias = "ATSPI_STATE_MULTI_LINE")]
    MultiLine,
    #[doc(alias = "ATSPI_STATE_MULTISELECTABLE")]
    Multiselectable,
    #[doc(alias = "ATSPI_STATE_OPAQUE")]
    Opaque,
    #[doc(alias = "ATSPI_STATE_PRESSED")]
    Pressed,
    #[doc(alias = "ATSPI_STATE_RESIZABLE")]
    Resizable,
    #[doc(alias = "ATSPI_STATE_SELECTABLE")]
    Selectable,
    #[doc(alias = "ATSPI_STATE_SELECTED")]
    Selected,
    #[doc(alias = "ATSPI_STATE_SENSITIVE")]
    Sensitive,
    #[doc(alias = "ATSPI_STATE_SHOWING")]
    Showing,
    #[doc(alias = "ATSPI_STATE_SINGLE_LINE")]
    SingleLine,
    #[doc(alias = "ATSPI_STATE_STALE")]
    Stale,
    #[doc(alias = "ATSPI_STATE_TRANSIENT")]
    Transient,
    #[doc(alias = "ATSPI_STATE_VERTICAL")]
    Vertical,
    #[doc(alias = "ATSPI_STATE_VISIBLE")]
    Visible,
    #[doc(alias = "ATSPI_STATE_MANAGES_DESCENDANTS")]
    ManagesDescendants,
    #[doc(alias = "ATSPI_STATE_INDETERMINATE")]
    Indeterminate,
    #[doc(alias = "ATSPI_STATE_REQUIRED")]
    Required,
    #[doc(alias = "ATSPI_STATE_TRUNCATED")]
    Truncated,
    #[doc(alias = "ATSPI_STATE_ANIMATED")]
    Animated,
    #[doc(alias = "ATSPI_STATE_INVALID_ENTRY")]
    InvalidEntry,
    #[doc(alias = "ATSPI_STATE_SUPPORTS_AUTOCOMPLETION")]
    SupportsAutocompletion,
    #[doc(alias = "ATSPI_STATE_SELECTABLE_TEXT")]
    SelectableText,
    #[doc(alias = "ATSPI_STATE_IS_DEFAULT")]
    IsDefault,
    #[doc(alias = "ATSPI_STATE_VISITED")]
    Visited,
    #[doc(alias = "ATSPI_STATE_CHECKABLE")]
    Checkable,
    #[doc(alias = "ATSPI_STATE_HAS_POPUP")]
    HasPopup,
    #[doc(alias = "ATSPI_STATE_READ_ONLY")]
    ReadOnly,
    #[doc(alias = "ATSPI_STATE_LAST_DEFINED")]
    LastDefined,
#[doc(hidden)]
    __Unknown(i32),
}

impl fmt::Display for StateType {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "StateType::{}", match *self {
            Self::Invalid => "Invalid",
            Self::Active => "Active",
            Self::Armed => "Armed",
            Self::Busy => "Busy",
            Self::Checked => "Checked",
            Self::Collapsed => "Collapsed",
            Self::Defunct => "Defunct",
            Self::Editable => "Editable",
            Self::Enabled => "Enabled",
            Self::Expandable => "Expandable",
            Self::Expanded => "Expanded",
            Self::Focusable => "Focusable",
            Self::Focused => "Focused",
            Self::HasTooltip => "HasTooltip",
            Self::Horizontal => "Horizontal",
            Self::Iconified => "Iconified",
            Self::Modal => "Modal",
            Self::MultiLine => "MultiLine",
            Self::Multiselectable => "Multiselectable",
            Self::Opaque => "Opaque",
            Self::Pressed => "Pressed",
            Self::Resizable => "Resizable",
            Self::Selectable => "Selectable",
            Self::Selected => "Selected",
            Self::Sensitive => "Sensitive",
            Self::Showing => "Showing",
            Self::SingleLine => "SingleLine",
            Self::Stale => "Stale",
            Self::Transient => "Transient",
            Self::Vertical => "Vertical",
            Self::Visible => "Visible",
            Self::ManagesDescendants => "ManagesDescendants",
            Self::Indeterminate => "Indeterminate",
            Self::Required => "Required",
            Self::Truncated => "Truncated",
            Self::Animated => "Animated",
            Self::InvalidEntry => "InvalidEntry",
            Self::SupportsAutocompletion => "SupportsAutocompletion",
            Self::SelectableText => "SelectableText",
            Self::IsDefault => "IsDefault",
            Self::Visited => "Visited",
            Self::Checkable => "Checkable",
            Self::HasPopup => "HasPopup",
            Self::ReadOnly => "ReadOnly",
            Self::LastDefined => "LastDefined",
            _ => "Unknown",
        })
    }
}

#[doc(hidden)]
impl IntoGlib for StateType {
    type GlibType = ffi::AtspiStateType;

    fn into_glib(self) -> ffi::AtspiStateType {
        match self {
            Self::Invalid => ffi::ATSPI_STATE_INVALID,
            Self::Active => ffi::ATSPI_STATE_ACTIVE,
            Self::Armed => ffi::ATSPI_STATE_ARMED,
            Self::Busy => ffi::ATSPI_STATE_BUSY,
            Self::Checked => ffi::ATSPI_STATE_CHECKED,
            Self::Collapsed => ffi::ATSPI_STATE_COLLAPSED,
            Self::Defunct => ffi::ATSPI_STATE_DEFUNCT,
            Self::Editable => ffi::ATSPI_STATE_EDITABLE,
            Self::Enabled => ffi::ATSPI_STATE_ENABLED,
            Self::Expandable => ffi::ATSPI_STATE_EXPANDABLE,
            Self::Expanded => ffi::ATSPI_STATE_EXPANDED,
            Self::Focusable => ffi::ATSPI_STATE_FOCUSABLE,
            Self::Focused => ffi::ATSPI_STATE_FOCUSED,
            Self::HasTooltip => ffi::ATSPI_STATE_HAS_TOOLTIP,
            Self::Horizontal => ffi::ATSPI_STATE_HORIZONTAL,
            Self::Iconified => ffi::ATSPI_STATE_ICONIFIED,
            Self::Modal => ffi::ATSPI_STATE_MODAL,
            Self::MultiLine => ffi::ATSPI_STATE_MULTI_LINE,
            Self::Multiselectable => ffi::ATSPI_STATE_MULTISELECTABLE,
            Self::Opaque => ffi::ATSPI_STATE_OPAQUE,
            Self::Pressed => ffi::ATSPI_STATE_PRESSED,
            Self::Resizable => ffi::ATSPI_STATE_RESIZABLE,
            Self::Selectable => ffi::ATSPI_STATE_SELECTABLE,
            Self::Selected => ffi::ATSPI_STATE_SELECTED,
            Self::Sensitive => ffi::ATSPI_STATE_SENSITIVE,
            Self::Showing => ffi::ATSPI_STATE_SHOWING,
            Self::SingleLine => ffi::ATSPI_STATE_SINGLE_LINE,
            Self::Stale => ffi::ATSPI_STATE_STALE,
            Self::Transient => ffi::ATSPI_STATE_TRANSIENT,
            Self::Vertical => ffi::ATSPI_STATE_VERTICAL,
            Self::Visible => ffi::ATSPI_STATE_VISIBLE,
            Self::ManagesDescendants => ffi::ATSPI_STATE_MANAGES_DESCENDANTS,
            Self::Indeterminate => ffi::ATSPI_STATE_INDETERMINATE,
            Self::Required => ffi::ATSPI_STATE_REQUIRED,
            Self::Truncated => ffi::ATSPI_STATE_TRUNCATED,
            Self::Animated => ffi::ATSPI_STATE_ANIMATED,
            Self::InvalidEntry => ffi::ATSPI_STATE_INVALID_ENTRY,
            Self::SupportsAutocompletion => ffi::ATSPI_STATE_SUPPORTS_AUTOCOMPLETION,
            Self::SelectableText => ffi::ATSPI_STATE_SELECTABLE_TEXT,
            Self::IsDefault => ffi::ATSPI_STATE_IS_DEFAULT,
            Self::Visited => ffi::ATSPI_STATE_VISITED,
            Self::Checkable => ffi::ATSPI_STATE_CHECKABLE,
            Self::HasPopup => ffi::ATSPI_STATE_HAS_POPUP,
            Self::ReadOnly => ffi::ATSPI_STATE_READ_ONLY,
            Self::LastDefined => ffi::ATSPI_STATE_LAST_DEFINED,
            Self::__Unknown(value) => value,
}
    }
}

#[doc(hidden)]
impl FromGlib<ffi::AtspiStateType> for StateType {
    unsafe fn from_glib(value: ffi::AtspiStateType) -> Self {
        match value {
            ffi::ATSPI_STATE_INVALID => Self::Invalid,
            ffi::ATSPI_STATE_ACTIVE => Self::Active,
            ffi::ATSPI_STATE_ARMED => Self::Armed,
            ffi::ATSPI_STATE_BUSY => Self::Busy,
            ffi::ATSPI_STATE_CHECKED => Self::Checked,
            ffi::ATSPI_STATE_COLLAPSED => Self::Collapsed,
            ffi::ATSPI_STATE_DEFUNCT => Self::Defunct,
            ffi::ATSPI_STATE_EDITABLE => Self::Editable,
            ffi::ATSPI_STATE_ENABLED => Self::Enabled,
            ffi::ATSPI_STATE_EXPANDABLE => Self::Expandable,
            ffi::ATSPI_STATE_EXPANDED => Self::Expanded,
            ffi::ATSPI_STATE_FOCUSABLE => Self::Focusable,
            ffi::ATSPI_STATE_FOCUSED => Self::Focused,
            ffi::ATSPI_STATE_HAS_TOOLTIP => Self::HasTooltip,
            ffi::ATSPI_STATE_HORIZONTAL => Self::Horizontal,
            ffi::ATSPI_STATE_ICONIFIED => Self::Iconified,
            ffi::ATSPI_STATE_MODAL => Self::Modal,
            ffi::ATSPI_STATE_MULTI_LINE => Self::MultiLine,
            ffi::ATSPI_STATE_MULTISELECTABLE => Self::Multiselectable,
            ffi::ATSPI_STATE_OPAQUE => Self::Opaque,
            ffi::ATSPI_STATE_PRESSED => Self::Pressed,
            ffi::ATSPI_STATE_RESIZABLE => Self::Resizable,
            ffi::ATSPI_STATE_SELECTABLE => Self::Selectable,
            ffi::ATSPI_STATE_SELECTED => Self::Selected,
            ffi::ATSPI_STATE_SENSITIVE => Self::Sensitive,
            ffi::ATSPI_STATE_SHOWING => Self::Showing,
            ffi::ATSPI_STATE_SINGLE_LINE => Self::SingleLine,
            ffi::ATSPI_STATE_STALE => Self::Stale,
            ffi::ATSPI_STATE_TRANSIENT => Self::Transient,
            ffi::ATSPI_STATE_VERTICAL => Self::Vertical,
            ffi::ATSPI_STATE_VISIBLE => Self::Visible,
            ffi::ATSPI_STATE_MANAGES_DESCENDANTS => Self::ManagesDescendants,
            ffi::ATSPI_STATE_INDETERMINATE => Self::Indeterminate,
            ffi::ATSPI_STATE_REQUIRED => Self::Required,
            ffi::ATSPI_STATE_TRUNCATED => Self::Truncated,
            ffi::ATSPI_STATE_ANIMATED => Self::Animated,
            ffi::ATSPI_STATE_INVALID_ENTRY => Self::InvalidEntry,
            ffi::ATSPI_STATE_SUPPORTS_AUTOCOMPLETION => Self::SupportsAutocompletion,
            ffi::ATSPI_STATE_SELECTABLE_TEXT => Self::SelectableText,
            ffi::ATSPI_STATE_IS_DEFAULT => Self::IsDefault,
            ffi::ATSPI_STATE_VISITED => Self::Visited,
            ffi::ATSPI_STATE_CHECKABLE => Self::Checkable,
            ffi::ATSPI_STATE_HAS_POPUP => Self::HasPopup,
            ffi::ATSPI_STATE_READ_ONLY => Self::ReadOnly,
            ffi::ATSPI_STATE_LAST_DEFINED => Self::LastDefined,
            value => Self::__Unknown(value),
}
    }
}

impl StaticType for StateType {
    fn static_type() -> Type {
        unsafe { from_glib(ffi::atspi_state_type_get_type()) }
    }
}

impl glib::value::ValueType for StateType {
    type Type = Self;
}

unsafe impl<'a> FromValue<'a> for StateType {
    type Checker = glib::value::GenericValueTypeChecker<Self>;

    unsafe fn from_value(value: &'a glib::Value) -> Self {
        from_glib(glib::gobject_ffi::g_value_get_enum(value.to_glib_none().0))
    }
}

impl ToValue for StateType {
    fn to_value(&self) -> glib::Value {
        let mut value = glib::Value::for_value_type::<Self>();
        unsafe {
            glib::gobject_ffi::g_value_set_enum(value.to_glib_none_mut().0, self.into_glib());
        }
        value
    }

    fn value_type(&self) -> glib::Type {
        Self::static_type()
    }
}

#[derive(Debug, Eq, PartialEq, Ord, PartialOrd, Hash)]
#[derive(Clone, Copy)]
#[non_exhaustive]
#[doc(alias = "AtspiTextBoundaryType")]
pub enum TextBoundaryType {
    #[doc(alias = "ATSPI_TEXT_BOUNDARY_CHAR")]
    Char,
    #[doc(alias = "ATSPI_TEXT_BOUNDARY_WORD_START")]
    WordStart,
    #[doc(alias = "ATSPI_TEXT_BOUNDARY_WORD_END")]
    WordEnd,
    #[doc(alias = "ATSPI_TEXT_BOUNDARY_SENTENCE_START")]
    SentenceStart,
    #[doc(alias = "ATSPI_TEXT_BOUNDARY_SENTENCE_END")]
    SentenceEnd,
    #[doc(alias = "ATSPI_TEXT_BOUNDARY_LINE_START")]
    LineStart,
    #[doc(alias = "ATSPI_TEXT_BOUNDARY_LINE_END")]
    LineEnd,
#[doc(hidden)]
    __Unknown(i32),
}

impl fmt::Display for TextBoundaryType {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "TextBoundaryType::{}", match *self {
            Self::Char => "Char",
            Self::WordStart => "WordStart",
            Self::WordEnd => "WordEnd",
            Self::SentenceStart => "SentenceStart",
            Self::SentenceEnd => "SentenceEnd",
            Self::LineStart => "LineStart",
            Self::LineEnd => "LineEnd",
            _ => "Unknown",
        })
    }
}

#[doc(hidden)]
impl IntoGlib for TextBoundaryType {
    type GlibType = ffi::AtspiTextBoundaryType;

    fn into_glib(self) -> ffi::AtspiTextBoundaryType {
        match self {
            Self::Char => ffi::ATSPI_TEXT_BOUNDARY_CHAR,
            Self::WordStart => ffi::ATSPI_TEXT_BOUNDARY_WORD_START,
            Self::WordEnd => ffi::ATSPI_TEXT_BOUNDARY_WORD_END,
            Self::SentenceStart => ffi::ATSPI_TEXT_BOUNDARY_SENTENCE_START,
            Self::SentenceEnd => ffi::ATSPI_TEXT_BOUNDARY_SENTENCE_END,
            Self::LineStart => ffi::ATSPI_TEXT_BOUNDARY_LINE_START,
            Self::LineEnd => ffi::ATSPI_TEXT_BOUNDARY_LINE_END,
            Self::__Unknown(value) => value,
}
    }
}

#[doc(hidden)]
impl FromGlib<ffi::AtspiTextBoundaryType> for TextBoundaryType {
    unsafe fn from_glib(value: ffi::AtspiTextBoundaryType) -> Self {
        match value {
            ffi::ATSPI_TEXT_BOUNDARY_CHAR => Self::Char,
            ffi::ATSPI_TEXT_BOUNDARY_WORD_START => Self::WordStart,
            ffi::ATSPI_TEXT_BOUNDARY_WORD_END => Self::WordEnd,
            ffi::ATSPI_TEXT_BOUNDARY_SENTENCE_START => Self::SentenceStart,
            ffi::ATSPI_TEXT_BOUNDARY_SENTENCE_END => Self::SentenceEnd,
            ffi::ATSPI_TEXT_BOUNDARY_LINE_START => Self::LineStart,
            ffi::ATSPI_TEXT_BOUNDARY_LINE_END => Self::LineEnd,
            value => Self::__Unknown(value),
}
    }
}

impl StaticType for TextBoundaryType {
    fn static_type() -> Type {
        unsafe { from_glib(ffi::atspi_text_boundary_type_get_type()) }
    }
}

impl glib::value::ValueType for TextBoundaryType {
    type Type = Self;
}

unsafe impl<'a> FromValue<'a> for TextBoundaryType {
    type Checker = glib::value::GenericValueTypeChecker<Self>;

    unsafe fn from_value(value: &'a glib::Value) -> Self {
        from_glib(glib::gobject_ffi::g_value_get_enum(value.to_glib_none().0))
    }
}

impl ToValue for TextBoundaryType {
    fn to_value(&self) -> glib::Value {
        let mut value = glib::Value::for_value_type::<Self>();
        unsafe {
            glib::gobject_ffi::g_value_set_enum(value.to_glib_none_mut().0, self.into_glib());
        }
        value
    }

    fn value_type(&self) -> glib::Type {
        Self::static_type()
    }
}

#[derive(Debug, Eq, PartialEq, Ord, PartialOrd, Hash)]
#[derive(Clone, Copy)]
#[non_exhaustive]
#[doc(alias = "AtspiTextClipType")]
pub enum TextClipType {
    #[doc(alias = "ATSPI_TEXT_CLIP_NONE")]
    None,
    #[doc(alias = "ATSPI_TEXT_CLIP_MIN")]
    Min,
    #[doc(alias = "ATSPI_TEXT_CLIP_MAX")]
    Max,
    #[doc(alias = "ATSPI_TEXT_CLIP_BOTH")]
    Both,
#[doc(hidden)]
    __Unknown(i32),
}

impl fmt::Display for TextClipType {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "TextClipType::{}", match *self {
            Self::None => "None",
            Self::Min => "Min",
            Self::Max => "Max",
            Self::Both => "Both",
            _ => "Unknown",
        })
    }
}

#[doc(hidden)]
impl IntoGlib for TextClipType {
    type GlibType = ffi::AtspiTextClipType;

    fn into_glib(self) -> ffi::AtspiTextClipType {
        match self {
            Self::None => ffi::ATSPI_TEXT_CLIP_NONE,
            Self::Min => ffi::ATSPI_TEXT_CLIP_MIN,
            Self::Max => ffi::ATSPI_TEXT_CLIP_MAX,
            Self::Both => ffi::ATSPI_TEXT_CLIP_BOTH,
            Self::__Unknown(value) => value,
}
    }
}

#[doc(hidden)]
impl FromGlib<ffi::AtspiTextClipType> for TextClipType {
    unsafe fn from_glib(value: ffi::AtspiTextClipType) -> Self {
        match value {
            ffi::ATSPI_TEXT_CLIP_NONE => Self::None,
            ffi::ATSPI_TEXT_CLIP_MIN => Self::Min,
            ffi::ATSPI_TEXT_CLIP_MAX => Self::Max,
            ffi::ATSPI_TEXT_CLIP_BOTH => Self::Both,
            value => Self::__Unknown(value),
}
    }
}

impl StaticType for TextClipType {
    fn static_type() -> Type {
        unsafe { from_glib(ffi::atspi_text_clip_type_get_type()) }
    }
}

impl glib::value::ValueType for TextClipType {
    type Type = Self;
}

unsafe impl<'a> FromValue<'a> for TextClipType {
    type Checker = glib::value::GenericValueTypeChecker<Self>;

    unsafe fn from_value(value: &'a glib::Value) -> Self {
        from_glib(glib::gobject_ffi::g_value_get_enum(value.to_glib_none().0))
    }
}

impl ToValue for TextClipType {
    fn to_value(&self) -> glib::Value {
        let mut value = glib::Value::for_value_type::<Self>();
        unsafe {
            glib::gobject_ffi::g_value_set_enum(value.to_glib_none_mut().0, self.into_glib());
        }
        value
    }

    fn value_type(&self) -> glib::Type {
        Self::static_type()
    }
}

#[derive(Debug, Eq, PartialEq, Ord, PartialOrd, Hash)]
#[derive(Clone, Copy)]
#[non_exhaustive]
#[doc(alias = "AtspiTextGranularity")]
pub enum TextGranularity {
    #[doc(alias = "ATSPI_TEXT_GRANULARITY_CHAR")]
    Char,
    #[doc(alias = "ATSPI_TEXT_GRANULARITY_WORD")]
    Word,
    #[doc(alias = "ATSPI_TEXT_GRANULARITY_SENTENCE")]
    Sentence,
    #[doc(alias = "ATSPI_TEXT_GRANULARITY_LINE")]
    Line,
    #[doc(alias = "ATSPI_TEXT_GRANULARITY_PARAGRAPH")]
    Paragraph,
#[doc(hidden)]
    __Unknown(i32),
}

impl fmt::Display for TextGranularity {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "TextGranularity::{}", match *self {
            Self::Char => "Char",
            Self::Word => "Word",
            Self::Sentence => "Sentence",
            Self::Line => "Line",
            Self::Paragraph => "Paragraph",
            _ => "Unknown",
        })
    }
}

#[doc(hidden)]
impl IntoGlib for TextGranularity {
    type GlibType = ffi::AtspiTextGranularity;

    fn into_glib(self) -> ffi::AtspiTextGranularity {
        match self {
            Self::Char => ffi::ATSPI_TEXT_GRANULARITY_CHAR,
            Self::Word => ffi::ATSPI_TEXT_GRANULARITY_WORD,
            Self::Sentence => ffi::ATSPI_TEXT_GRANULARITY_SENTENCE,
            Self::Line => ffi::ATSPI_TEXT_GRANULARITY_LINE,
            Self::Paragraph => ffi::ATSPI_TEXT_GRANULARITY_PARAGRAPH,
            Self::__Unknown(value) => value,
}
    }
}

#[doc(hidden)]
impl FromGlib<ffi::AtspiTextGranularity> for TextGranularity {
    unsafe fn from_glib(value: ffi::AtspiTextGranularity) -> Self {
        match value {
            ffi::ATSPI_TEXT_GRANULARITY_CHAR => Self::Char,
            ffi::ATSPI_TEXT_GRANULARITY_WORD => Self::Word,
            ffi::ATSPI_TEXT_GRANULARITY_SENTENCE => Self::Sentence,
            ffi::ATSPI_TEXT_GRANULARITY_LINE => Self::Line,
            ffi::ATSPI_TEXT_GRANULARITY_PARAGRAPH => Self::Paragraph,
            value => Self::__Unknown(value),
}
    }
}

impl StaticType for TextGranularity {
    fn static_type() -> Type {
        unsafe { from_glib(ffi::atspi_text_granularity_get_type()) }
    }
}

impl glib::value::ValueType for TextGranularity {
    type Type = Self;
}

unsafe impl<'a> FromValue<'a> for TextGranularity {
    type Checker = glib::value::GenericValueTypeChecker<Self>;

    unsafe fn from_value(value: &'a glib::Value) -> Self {
        from_glib(glib::gobject_ffi::g_value_get_enum(value.to_glib_none().0))
    }
}

impl ToValue for TextGranularity {
    fn to_value(&self) -> glib::Value {
        let mut value = glib::Value::for_value_type::<Self>();
        unsafe {
            glib::gobject_ffi::g_value_set_enum(value.to_glib_none_mut().0, self.into_glib());
        }
        value
    }

    fn value_type(&self) -> glib::Type {
        Self::static_type()
    }
}

