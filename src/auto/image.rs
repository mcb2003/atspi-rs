// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files
// DO NOT EDIT

use glib::object::IsA;
use glib::translate::*;
use std::fmt;
use std::ptr;

glib::wrapper! {
    #[doc(alias = "AtspiImage")]
    pub struct Image(Interface<ffi::AtspiImage>);

    match fn {
        type_ => || ffi::atspi_image_get_type(),
    }
}

pub const NONE_IMAGE: Option<&Image> = None;

pub trait ImageExt: 'static {
    #[doc(alias = "atspi_image_get_image_description")]
    #[doc(alias = "get_image_description")]
    fn image_description(&self) -> Result<glib::GString, glib::Error>;

    //#[doc(alias = "atspi_image_get_image_extents")]
    //#[doc(alias = "get_image_extents")]
    //fn image_extents(&self, ctype: /*Ignored*/CoordType) -> Result</*Ignored*/Rect, glib::Error>;

    #[doc(alias = "atspi_image_get_image_locale")]
    #[doc(alias = "get_image_locale")]
    fn image_locale(&self) -> Result<glib::GString, glib::Error>;

    //#[doc(alias = "atspi_image_get_image_position")]
    //#[doc(alias = "get_image_position")]
    //fn image_position(&self, ctype: /*Ignored*/CoordType) -> Result</*Ignored*/Point, glib::Error>;

    //#[doc(alias = "atspi_image_get_image_size")]
    //#[doc(alias = "get_image_size")]
    //fn image_size(&self) -> Result</*Ignored*/Point, glib::Error>;
}

impl<O: IsA<Image>> ImageExt for O {
    fn image_description(&self) -> Result<glib::GString, glib::Error> {
        unsafe {
            let mut error = ptr::null_mut();
            let ret = ffi::atspi_image_get_image_description(self.as_ref().to_glib_none().0, &mut error);
            if error.is_null() { Ok(from_glib_full(ret)) } else { Err(from_glib_full(error)) }
        }
    }

    //fn image_extents(&self, ctype: /*Ignored*/CoordType) -> Result</*Ignored*/Rect, glib::Error> {
    //    unsafe { TODO: call ffi:atspi_image_get_image_extents() }
    //}

    fn image_locale(&self) -> Result<glib::GString, glib::Error> {
        unsafe {
            let mut error = ptr::null_mut();
            let ret = ffi::atspi_image_get_image_locale(self.as_ref().to_glib_none().0, &mut error);
            if error.is_null() { Ok(from_glib_full(ret)) } else { Err(from_glib_full(error)) }
        }
    }

    //fn image_position(&self, ctype: /*Ignored*/CoordType) -> Result</*Ignored*/Point, glib::Error> {
    //    unsafe { TODO: call ffi:atspi_image_get_image_position() }
    //}

    //fn image_size(&self) -> Result</*Ignored*/Point, glib::Error> {
    //    unsafe { TODO: call ffi:atspi_image_get_image_size() }
    //}
}

impl fmt::Display for Image {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        f.write_str("Image")
    }
}
