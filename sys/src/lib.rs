// Generated by gir (https://github.com/gtk-rs/gir @ e8f82cf)
// from ../gir-files (@ 915ec7c)
// DO NOT EDIT

#![allow(non_camel_case_types, non_upper_case_globals, non_snake_case)]
#![allow(clippy::approx_constant, clippy::type_complexity, clippy::unreadable_literal, clippy::upper_case_acronyms)]
#![cfg_attr(feature = "dox", feature(doc_cfg))]

use glib_sys as glib;
use gobject_sys as gobject;

#[allow(unused_imports)]
use libc::{c_int, c_char, c_uchar, c_float, c_uint, c_double,
    c_short, c_ushort, c_long, c_ulong,
    c_void, size_t, ssize_t, intptr_t, uintptr_t, time_t, FILE};
use libc::timeval;

#[allow(unused_imports)]
use glib::{gboolean, gconstpointer, gpointer, GType};

// Aliases
pub type AtspiControllerEventMask = c_uint;
pub type AtspiDeviceEventMask = c_uint;
pub type AtspiKeyEventMask = c_uint;
pub type AtspiKeyMaskType = c_uint;
pub type AtspiKeystrokeListener = c_void;

// Enums
pub type AtspiCollectionMatchType = c_int;
pub const ATSPI_Collection_MATCH_INVALID: AtspiCollectionMatchType = 0;
pub const ATSPI_Collection_MATCH_ALL: AtspiCollectionMatchType = 1;
pub const ATSPI_Collection_MATCH_ANY: AtspiCollectionMatchType = 2;
pub const ATSPI_Collection_MATCH_NONE: AtspiCollectionMatchType = 3;
pub const ATSPI_Collection_MATCH_EMPTY: AtspiCollectionMatchType = 4;
pub const ATSPI_Collection_MATCH_LAST_DEFINED: AtspiCollectionMatchType = 5;

pub type AtspiCollectionSortOrder = c_int;
pub const ATSPI_Collection_SORT_ORDER_INVALID: AtspiCollectionSortOrder = 0;
pub const ATSPI_Collection_SORT_ORDER_CANONICAL: AtspiCollectionSortOrder = 1;
pub const ATSPI_Collection_SORT_ORDER_FLOW: AtspiCollectionSortOrder = 2;
pub const ATSPI_Collection_SORT_ORDER_TAB: AtspiCollectionSortOrder = 3;
pub const ATSPI_Collection_SORT_ORDER_REVERSE_CANONICAL: AtspiCollectionSortOrder = 4;
pub const ATSPI_Collection_SORT_ORDER_REVERSE_FLOW: AtspiCollectionSortOrder = 5;
pub const ATSPI_Collection_SORT_ORDER_REVERSE_TAB: AtspiCollectionSortOrder = 6;
pub const ATSPI_Collection_SORT_ORDER_LAST_DEFINED: AtspiCollectionSortOrder = 7;

pub type AtspiCollectionTreeTraversalType = c_int;
pub const ATSPI_Collection_TREE_RESTRICT_CHILDREN: AtspiCollectionTreeTraversalType = 0;
pub const ATSPI_Collection_TREE_RESTRICT_SIBLING: AtspiCollectionTreeTraversalType = 1;
pub const ATSPI_Collection_TREE_INORDER: AtspiCollectionTreeTraversalType = 2;
pub const ATSPI_Collection_TREE_LAST_DEFINED: AtspiCollectionTreeTraversalType = 3;

pub type AtspiComponentLayer = c_int;
pub const ATSPI_LAYER_INVALID: AtspiComponentLayer = 0;
pub const ATSPI_LAYER_BACKGROUND: AtspiComponentLayer = 1;
pub const ATSPI_LAYER_CANVAS: AtspiComponentLayer = 2;
pub const ATSPI_LAYER_WIDGET: AtspiComponentLayer = 3;
pub const ATSPI_LAYER_MDI: AtspiComponentLayer = 4;
pub const ATSPI_LAYER_POPUP: AtspiComponentLayer = 5;
pub const ATSPI_LAYER_OVERLAY: AtspiComponentLayer = 6;
pub const ATSPI_LAYER_WINDOW: AtspiComponentLayer = 7;
pub const ATSPI_LAYER_LAST_DEFINED: AtspiComponentLayer = 8;

pub type AtspiCoordType = c_int;
pub const ATSPI_COORD_TYPE_SCREEN: AtspiCoordType = 0;
pub const ATSPI_COORD_TYPE_WINDOW: AtspiCoordType = 1;
pub const ATSPI_COORD_TYPE_PARENT: AtspiCoordType = 2;

pub type AtspiEventType = c_int;
pub const ATSPI_KEY_PRESSED_EVENT: AtspiEventType = 0;
pub const ATSPI_KEY_RELEASED_EVENT: AtspiEventType = 1;
pub const ATSPI_BUTTON_PRESSED_EVENT: AtspiEventType = 2;
pub const ATSPI_BUTTON_RELEASED_EVENT: AtspiEventType = 3;

pub type AtspiKeyEventType = c_int;
pub const ATSPI_KEY_PRESSED: AtspiKeyEventType = 0;
pub const ATSPI_KEY_RELEASED: AtspiKeyEventType = 1;

pub type AtspiKeySynthType = c_int;
pub const ATSPI_KEY_PRESS: AtspiKeySynthType = 0;
pub const ATSPI_KEY_RELEASE: AtspiKeySynthType = 1;
pub const ATSPI_KEY_PRESSRELEASE: AtspiKeySynthType = 2;
pub const ATSPI_KEY_SYM: AtspiKeySynthType = 3;
pub const ATSPI_KEY_STRING: AtspiKeySynthType = 4;
pub const ATSPI_KEY_LOCKMODIFIERS: AtspiKeySynthType = 5;
pub const ATSPI_KEY_UNLOCKMODIFIERS: AtspiKeySynthType = 6;

pub type AtspiLocaleType = c_int;
pub const ATSPI_LOCALE_TYPE_MESSAGES: AtspiLocaleType = 0;
pub const ATSPI_LOCALE_TYPE_COLLATE: AtspiLocaleType = 1;
pub const ATSPI_LOCALE_TYPE_CTYPE: AtspiLocaleType = 2;
pub const ATSPI_LOCALE_TYPE_MONETARY: AtspiLocaleType = 3;
pub const ATSPI_LOCALE_TYPE_NUMERIC: AtspiLocaleType = 4;
pub const ATSPI_LOCALE_TYPE_TIME: AtspiLocaleType = 5;

pub type AtspiModifierType = c_int;
pub const ATSPI_MODIFIER_SHIFT: AtspiModifierType = 0;
pub const ATSPI_MODIFIER_SHIFTLOCK: AtspiModifierType = 1;
pub const ATSPI_MODIFIER_CONTROL: AtspiModifierType = 2;
pub const ATSPI_MODIFIER_ALT: AtspiModifierType = 3;
pub const ATSPI_MODIFIER_META: AtspiModifierType = 4;
pub const ATSPI_MODIFIER_META2: AtspiModifierType = 5;
pub const ATSPI_MODIFIER_META3: AtspiModifierType = 6;
pub const ATSPI_MODIFIER_NUMLOCK: AtspiModifierType = 14;

pub type AtspiRelationType = c_int;
pub const ATSPI_RELATION_NULL: AtspiRelationType = 0;
pub const ATSPI_RELATION_LABEL_FOR: AtspiRelationType = 1;
pub const ATSPI_RELATION_LABELLED_BY: AtspiRelationType = 2;
pub const ATSPI_RELATION_CONTROLLER_FOR: AtspiRelationType = 3;
pub const ATSPI_RELATION_CONTROLLED_BY: AtspiRelationType = 4;
pub const ATSPI_RELATION_MEMBER_OF: AtspiRelationType = 5;
pub const ATSPI_RELATION_TOOLTIP_FOR: AtspiRelationType = 6;
pub const ATSPI_RELATION_NODE_CHILD_OF: AtspiRelationType = 7;
pub const ATSPI_RELATION_NODE_PARENT_OF: AtspiRelationType = 8;
pub const ATSPI_RELATION_EXTENDED: AtspiRelationType = 9;
pub const ATSPI_RELATION_FLOWS_TO: AtspiRelationType = 10;
pub const ATSPI_RELATION_FLOWS_FROM: AtspiRelationType = 11;
pub const ATSPI_RELATION_SUBWINDOW_OF: AtspiRelationType = 12;
pub const ATSPI_RELATION_EMBEDS: AtspiRelationType = 13;
pub const ATSPI_RELATION_EMBEDDED_BY: AtspiRelationType = 14;
pub const ATSPI_RELATION_POPUP_FOR: AtspiRelationType = 15;
pub const ATSPI_RELATION_PARENT_WINDOW_OF: AtspiRelationType = 16;
pub const ATSPI_RELATION_DESCRIPTION_FOR: AtspiRelationType = 17;
pub const ATSPI_RELATION_DESCRIBED_BY: AtspiRelationType = 18;
pub const ATSPI_RELATION_DETAILS: AtspiRelationType = 19;
pub const ATSPI_RELATION_DETAILS_FOR: AtspiRelationType = 20;
pub const ATSPI_RELATION_ERROR_MESSAGE: AtspiRelationType = 21;
pub const ATSPI_RELATION_ERROR_FOR: AtspiRelationType = 22;
pub const ATSPI_RELATION_LAST_DEFINED: AtspiRelationType = 23;

pub type AtspiRole = c_int;
pub const ATSPI_ROLE_INVALID: AtspiRole = 0;
pub const ATSPI_ROLE_ACCELERATOR_LABEL: AtspiRole = 1;
pub const ATSPI_ROLE_ALERT: AtspiRole = 2;
pub const ATSPI_ROLE_ANIMATION: AtspiRole = 3;
pub const ATSPI_ROLE_ARROW: AtspiRole = 4;
pub const ATSPI_ROLE_CALENDAR: AtspiRole = 5;
pub const ATSPI_ROLE_CANVAS: AtspiRole = 6;
pub const ATSPI_ROLE_CHECK_BOX: AtspiRole = 7;
pub const ATSPI_ROLE_CHECK_MENU_ITEM: AtspiRole = 8;
pub const ATSPI_ROLE_COLOR_CHOOSER: AtspiRole = 9;
pub const ATSPI_ROLE_COLUMN_HEADER: AtspiRole = 10;
pub const ATSPI_ROLE_COMBO_BOX: AtspiRole = 11;
pub const ATSPI_ROLE_DATE_EDITOR: AtspiRole = 12;
pub const ATSPI_ROLE_DESKTOP_ICON: AtspiRole = 13;
pub const ATSPI_ROLE_DESKTOP_FRAME: AtspiRole = 14;
pub const ATSPI_ROLE_DIAL: AtspiRole = 15;
pub const ATSPI_ROLE_DIALOG: AtspiRole = 16;
pub const ATSPI_ROLE_DIRECTORY_PANE: AtspiRole = 17;
pub const ATSPI_ROLE_DRAWING_AREA: AtspiRole = 18;
pub const ATSPI_ROLE_FILE_CHOOSER: AtspiRole = 19;
pub const ATSPI_ROLE_FILLER: AtspiRole = 20;
pub const ATSPI_ROLE_FOCUS_TRAVERSABLE: AtspiRole = 21;
pub const ATSPI_ROLE_FONT_CHOOSER: AtspiRole = 22;
pub const ATSPI_ROLE_FRAME: AtspiRole = 23;
pub const ATSPI_ROLE_GLASS_PANE: AtspiRole = 24;
pub const ATSPI_ROLE_HTML_CONTAINER: AtspiRole = 25;
pub const ATSPI_ROLE_ICON: AtspiRole = 26;
pub const ATSPI_ROLE_IMAGE: AtspiRole = 27;
pub const ATSPI_ROLE_INTERNAL_FRAME: AtspiRole = 28;
pub const ATSPI_ROLE_LABEL: AtspiRole = 29;
pub const ATSPI_ROLE_LAYERED_PANE: AtspiRole = 30;
pub const ATSPI_ROLE_LIST: AtspiRole = 31;
pub const ATSPI_ROLE_LIST_ITEM: AtspiRole = 32;
pub const ATSPI_ROLE_MENU: AtspiRole = 33;
pub const ATSPI_ROLE_MENU_BAR: AtspiRole = 34;
pub const ATSPI_ROLE_MENU_ITEM: AtspiRole = 35;
pub const ATSPI_ROLE_OPTION_PANE: AtspiRole = 36;
pub const ATSPI_ROLE_PAGE_TAB: AtspiRole = 37;
pub const ATSPI_ROLE_PAGE_TAB_LIST: AtspiRole = 38;
pub const ATSPI_ROLE_PANEL: AtspiRole = 39;
pub const ATSPI_ROLE_PASSWORD_TEXT: AtspiRole = 40;
pub const ATSPI_ROLE_POPUP_MENU: AtspiRole = 41;
pub const ATSPI_ROLE_PROGRESS_BAR: AtspiRole = 42;
pub const ATSPI_ROLE_PUSH_BUTTON: AtspiRole = 43;
pub const ATSPI_ROLE_RADIO_BUTTON: AtspiRole = 44;
pub const ATSPI_ROLE_RADIO_MENU_ITEM: AtspiRole = 45;
pub const ATSPI_ROLE_ROOT_PANE: AtspiRole = 46;
pub const ATSPI_ROLE_ROW_HEADER: AtspiRole = 47;
pub const ATSPI_ROLE_SCROLL_BAR: AtspiRole = 48;
pub const ATSPI_ROLE_SCROLL_PANE: AtspiRole = 49;
pub const ATSPI_ROLE_SEPARATOR: AtspiRole = 50;
pub const ATSPI_ROLE_SLIDER: AtspiRole = 51;
pub const ATSPI_ROLE_SPIN_BUTTON: AtspiRole = 52;
pub const ATSPI_ROLE_SPLIT_PANE: AtspiRole = 53;
pub const ATSPI_ROLE_STATUS_BAR: AtspiRole = 54;
pub const ATSPI_ROLE_TABLE: AtspiRole = 55;
pub const ATSPI_ROLE_TABLE_CELL: AtspiRole = 56;
pub const ATSPI_ROLE_TABLE_COLUMN_HEADER: AtspiRole = 57;
pub const ATSPI_ROLE_TABLE_ROW_HEADER: AtspiRole = 58;
pub const ATSPI_ROLE_TEAROFF_MENU_ITEM: AtspiRole = 59;
pub const ATSPI_ROLE_TERMINAL: AtspiRole = 60;
pub const ATSPI_ROLE_TEXT: AtspiRole = 61;
pub const ATSPI_ROLE_TOGGLE_BUTTON: AtspiRole = 62;
pub const ATSPI_ROLE_TOOL_BAR: AtspiRole = 63;
pub const ATSPI_ROLE_TOOL_TIP: AtspiRole = 64;
pub const ATSPI_ROLE_TREE: AtspiRole = 65;
pub const ATSPI_ROLE_TREE_TABLE: AtspiRole = 66;
pub const ATSPI_ROLE_UNKNOWN: AtspiRole = 67;
pub const ATSPI_ROLE_VIEWPORT: AtspiRole = 68;
pub const ATSPI_ROLE_WINDOW: AtspiRole = 69;
pub const ATSPI_ROLE_EXTENDED: AtspiRole = 70;
pub const ATSPI_ROLE_HEADER: AtspiRole = 71;
pub const ATSPI_ROLE_FOOTER: AtspiRole = 72;
pub const ATSPI_ROLE_PARAGRAPH: AtspiRole = 73;
pub const ATSPI_ROLE_RULER: AtspiRole = 74;
pub const ATSPI_ROLE_APPLICATION: AtspiRole = 75;
pub const ATSPI_ROLE_AUTOCOMPLETE: AtspiRole = 76;
pub const ATSPI_ROLE_EDITBAR: AtspiRole = 77;
pub const ATSPI_ROLE_EMBEDDED: AtspiRole = 78;
pub const ATSPI_ROLE_ENTRY: AtspiRole = 79;
pub const ATSPI_ROLE_CHART: AtspiRole = 80;
pub const ATSPI_ROLE_CAPTION: AtspiRole = 81;
pub const ATSPI_ROLE_DOCUMENT_FRAME: AtspiRole = 82;
pub const ATSPI_ROLE_HEADING: AtspiRole = 83;
pub const ATSPI_ROLE_PAGE: AtspiRole = 84;
pub const ATSPI_ROLE_SECTION: AtspiRole = 85;
pub const ATSPI_ROLE_REDUNDANT_OBJECT: AtspiRole = 86;
pub const ATSPI_ROLE_FORM: AtspiRole = 87;
pub const ATSPI_ROLE_LINK: AtspiRole = 88;
pub const ATSPI_ROLE_INPUT_METHOD_WINDOW: AtspiRole = 89;
pub const ATSPI_ROLE_TABLE_ROW: AtspiRole = 90;
pub const ATSPI_ROLE_TREE_ITEM: AtspiRole = 91;
pub const ATSPI_ROLE_DOCUMENT_SPREADSHEET: AtspiRole = 92;
pub const ATSPI_ROLE_DOCUMENT_PRESENTATION: AtspiRole = 93;
pub const ATSPI_ROLE_DOCUMENT_TEXT: AtspiRole = 94;
pub const ATSPI_ROLE_DOCUMENT_WEB: AtspiRole = 95;
pub const ATSPI_ROLE_DOCUMENT_EMAIL: AtspiRole = 96;
pub const ATSPI_ROLE_COMMENT: AtspiRole = 97;
pub const ATSPI_ROLE_LIST_BOX: AtspiRole = 98;
pub const ATSPI_ROLE_GROUPING: AtspiRole = 99;
pub const ATSPI_ROLE_IMAGE_MAP: AtspiRole = 100;
pub const ATSPI_ROLE_NOTIFICATION: AtspiRole = 101;
pub const ATSPI_ROLE_INFO_BAR: AtspiRole = 102;
pub const ATSPI_ROLE_LEVEL_BAR: AtspiRole = 103;
pub const ATSPI_ROLE_TITLE_BAR: AtspiRole = 104;
pub const ATSPI_ROLE_BLOCK_QUOTE: AtspiRole = 105;
pub const ATSPI_ROLE_AUDIO: AtspiRole = 106;
pub const ATSPI_ROLE_VIDEO: AtspiRole = 107;
pub const ATSPI_ROLE_DEFINITION: AtspiRole = 108;
pub const ATSPI_ROLE_ARTICLE: AtspiRole = 109;
pub const ATSPI_ROLE_LANDMARK: AtspiRole = 110;
pub const ATSPI_ROLE_LOG: AtspiRole = 111;
pub const ATSPI_ROLE_MARQUEE: AtspiRole = 112;
pub const ATSPI_ROLE_MATH: AtspiRole = 113;
pub const ATSPI_ROLE_RATING: AtspiRole = 114;
pub const ATSPI_ROLE_TIMER: AtspiRole = 115;
pub const ATSPI_ROLE_STATIC: AtspiRole = 116;
pub const ATSPI_ROLE_MATH_FRACTION: AtspiRole = 117;
pub const ATSPI_ROLE_MATH_ROOT: AtspiRole = 118;
pub const ATSPI_ROLE_SUBSCRIPT: AtspiRole = 119;
pub const ATSPI_ROLE_SUPERSCRIPT: AtspiRole = 120;
pub const ATSPI_ROLE_DESCRIPTION_LIST: AtspiRole = 121;
pub const ATSPI_ROLE_DESCRIPTION_TERM: AtspiRole = 122;
pub const ATSPI_ROLE_DESCRIPTION_VALUE: AtspiRole = 123;
pub const ATSPI_ROLE_FOOTNOTE: AtspiRole = 124;
pub const ATSPI_ROLE_CONTENT_DELETION: AtspiRole = 125;
pub const ATSPI_ROLE_CONTENT_INSERTION: AtspiRole = 126;
pub const ATSPI_ROLE_MARK: AtspiRole = 127;
pub const ATSPI_ROLE_SUGGESTION: AtspiRole = 128;
pub const ATSPI_ROLE_LAST_DEFINED: AtspiRole = 129;

pub type AtspiScrollType = c_int;
pub const ATSPI_SCROLL_TOP_LEFT: AtspiScrollType = 0;
pub const ATSPI_SCROLL_BOTTOM_RIGHT: AtspiScrollType = 1;
pub const ATSPI_SCROLL_TOP_EDGE: AtspiScrollType = 2;
pub const ATSPI_SCROLL_BOTTOM_EDGE: AtspiScrollType = 3;
pub const ATSPI_SCROLL_LEFT_EDGE: AtspiScrollType = 4;
pub const ATSPI_SCROLL_RIGHT_EDGE: AtspiScrollType = 5;
pub const ATSPI_SCROLL_ANYWHERE: AtspiScrollType = 6;

pub type AtspiStateType = c_int;
pub const ATSPI_STATE_INVALID: AtspiStateType = 0;
pub const ATSPI_STATE_ACTIVE: AtspiStateType = 1;
pub const ATSPI_STATE_ARMED: AtspiStateType = 2;
pub const ATSPI_STATE_BUSY: AtspiStateType = 3;
pub const ATSPI_STATE_CHECKED: AtspiStateType = 4;
pub const ATSPI_STATE_COLLAPSED: AtspiStateType = 5;
pub const ATSPI_STATE_DEFUNCT: AtspiStateType = 6;
pub const ATSPI_STATE_EDITABLE: AtspiStateType = 7;
pub const ATSPI_STATE_ENABLED: AtspiStateType = 8;
pub const ATSPI_STATE_EXPANDABLE: AtspiStateType = 9;
pub const ATSPI_STATE_EXPANDED: AtspiStateType = 10;
pub const ATSPI_STATE_FOCUSABLE: AtspiStateType = 11;
pub const ATSPI_STATE_FOCUSED: AtspiStateType = 12;
pub const ATSPI_STATE_HAS_TOOLTIP: AtspiStateType = 13;
pub const ATSPI_STATE_HORIZONTAL: AtspiStateType = 14;
pub const ATSPI_STATE_ICONIFIED: AtspiStateType = 15;
pub const ATSPI_STATE_MODAL: AtspiStateType = 16;
pub const ATSPI_STATE_MULTI_LINE: AtspiStateType = 17;
pub const ATSPI_STATE_MULTISELECTABLE: AtspiStateType = 18;
pub const ATSPI_STATE_OPAQUE: AtspiStateType = 19;
pub const ATSPI_STATE_PRESSED: AtspiStateType = 20;
pub const ATSPI_STATE_RESIZABLE: AtspiStateType = 21;
pub const ATSPI_STATE_SELECTABLE: AtspiStateType = 22;
pub const ATSPI_STATE_SELECTED: AtspiStateType = 23;
pub const ATSPI_STATE_SENSITIVE: AtspiStateType = 24;
pub const ATSPI_STATE_SHOWING: AtspiStateType = 25;
pub const ATSPI_STATE_SINGLE_LINE: AtspiStateType = 26;
pub const ATSPI_STATE_STALE: AtspiStateType = 27;
pub const ATSPI_STATE_TRANSIENT: AtspiStateType = 28;
pub const ATSPI_STATE_VERTICAL: AtspiStateType = 29;
pub const ATSPI_STATE_VISIBLE: AtspiStateType = 30;
pub const ATSPI_STATE_MANAGES_DESCENDANTS: AtspiStateType = 31;
pub const ATSPI_STATE_INDETERMINATE: AtspiStateType = 32;
pub const ATSPI_STATE_REQUIRED: AtspiStateType = 33;
pub const ATSPI_STATE_TRUNCATED: AtspiStateType = 34;
pub const ATSPI_STATE_ANIMATED: AtspiStateType = 35;
pub const ATSPI_STATE_INVALID_ENTRY: AtspiStateType = 36;
pub const ATSPI_STATE_SUPPORTS_AUTOCOMPLETION: AtspiStateType = 37;
pub const ATSPI_STATE_SELECTABLE_TEXT: AtspiStateType = 38;
pub const ATSPI_STATE_IS_DEFAULT: AtspiStateType = 39;
pub const ATSPI_STATE_VISITED: AtspiStateType = 40;
pub const ATSPI_STATE_CHECKABLE: AtspiStateType = 41;
pub const ATSPI_STATE_HAS_POPUP: AtspiStateType = 42;
pub const ATSPI_STATE_READ_ONLY: AtspiStateType = 43;
pub const ATSPI_STATE_LAST_DEFINED: AtspiStateType = 44;

pub type AtspiTextBoundaryType = c_int;
pub const ATSPI_TEXT_BOUNDARY_CHAR: AtspiTextBoundaryType = 0;
pub const ATSPI_TEXT_BOUNDARY_WORD_START: AtspiTextBoundaryType = 1;
pub const ATSPI_TEXT_BOUNDARY_WORD_END: AtspiTextBoundaryType = 2;
pub const ATSPI_TEXT_BOUNDARY_SENTENCE_START: AtspiTextBoundaryType = 3;
pub const ATSPI_TEXT_BOUNDARY_SENTENCE_END: AtspiTextBoundaryType = 4;
pub const ATSPI_TEXT_BOUNDARY_LINE_START: AtspiTextBoundaryType = 5;
pub const ATSPI_TEXT_BOUNDARY_LINE_END: AtspiTextBoundaryType = 6;

pub type AtspiTextClipType = c_int;
pub const ATSPI_TEXT_CLIP_NONE: AtspiTextClipType = 0;
pub const ATSPI_TEXT_CLIP_MIN: AtspiTextClipType = 1;
pub const ATSPI_TEXT_CLIP_MAX: AtspiTextClipType = 2;
pub const ATSPI_TEXT_CLIP_BOTH: AtspiTextClipType = 3;

pub type AtspiTextGranularity = c_int;
pub const ATSPI_TEXT_GRANULARITY_CHAR: AtspiTextGranularity = 0;
pub const ATSPI_TEXT_GRANULARITY_WORD: AtspiTextGranularity = 1;
pub const ATSPI_TEXT_GRANULARITY_SENTENCE: AtspiTextGranularity = 2;
pub const ATSPI_TEXT_GRANULARITY_LINE: AtspiTextGranularity = 3;
pub const ATSPI_TEXT_GRANULARITY_PARAGRAPH: AtspiTextGranularity = 4;

// Constants
pub const ATSPI_COMPONENTLAYER_COUNT: c_int = 9;
pub const ATSPI_COORD_TYPE_COUNT: c_int = 3;
pub const ATSPI_DBUS_INTERFACE_ACCESSIBLE: *const c_char = b"org.a11y.atspi.Accessible\0" as *const u8 as *const c_char;
pub const ATSPI_DBUS_INTERFACE_ACTION: *const c_char = b"org.a11y.atspi.Action\0" as *const u8 as *const c_char;
pub const ATSPI_DBUS_INTERFACE_APPLICATION: *const c_char = b"org.a11y.atspi.Application\0" as *const u8 as *const c_char;
pub const ATSPI_DBUS_INTERFACE_CACHE: *const c_char = b"org.a11y.atspi.Cache\0" as *const u8 as *const c_char;
pub const ATSPI_DBUS_INTERFACE_COLLECTION: *const c_char = b"org.a11y.atspi.Collection\0" as *const u8 as *const c_char;
pub const ATSPI_DBUS_INTERFACE_COMPONENT: *const c_char = b"org.a11y.atspi.Component\0" as *const u8 as *const c_char;
pub const ATSPI_DBUS_INTERFACE_DEC: *const c_char = b"org.a11y.atspi.DeviceEventController\0" as *const u8 as *const c_char;
pub const ATSPI_DBUS_INTERFACE_DEVICE_EVENT_LISTENER: *const c_char = b"org.a11y.atspi.DeviceEventListener\0" as *const u8 as *const c_char;
pub const ATSPI_DBUS_INTERFACE_DOCUMENT: *const c_char = b"org.a11y.atspi.Document\0" as *const u8 as *const c_char;
pub const ATSPI_DBUS_INTERFACE_EDITABLE_TEXT: *const c_char = b"org.a11y.atspi.EditableText\0" as *const u8 as *const c_char;
pub const ATSPI_DBUS_INTERFACE_EVENT_KEYBOARD: *const c_char = b"org.a11y.atspi.Event.Keyboard\0" as *const u8 as *const c_char;
pub const ATSPI_DBUS_INTERFACE_EVENT_MOUSE: *const c_char = b"org.a11y.atspi.Event.Mouse\0" as *const u8 as *const c_char;
pub const ATSPI_DBUS_INTERFACE_EVENT_OBJECT: *const c_char = b"org.a11y.atspi.Event.Object\0" as *const u8 as *const c_char;
pub const ATSPI_DBUS_INTERFACE_EVENT_SCREEN_READER: *const c_char = b"org.a11y.atspi.Event.ScreenReader\0" as *const u8 as *const c_char;
pub const ATSPI_DBUS_INTERFACE_HYPERLINK: *const c_char = b"org.a11y.atspi.Hyperlink\0" as *const u8 as *const c_char;
pub const ATSPI_DBUS_INTERFACE_HYPERTEXT: *const c_char = b"org.a11y.atspi.Hypertext\0" as *const u8 as *const c_char;
pub const ATSPI_DBUS_INTERFACE_IMAGE: *const c_char = b"org.a11y.atspi.Image\0" as *const u8 as *const c_char;
pub const ATSPI_DBUS_INTERFACE_REGISTRY: *const c_char = b"org.a11y.atspi.Registry\0" as *const u8 as *const c_char;
pub const ATSPI_DBUS_INTERFACE_SELECTION: *const c_char = b"org.a11y.atspi.Selection\0" as *const u8 as *const c_char;
pub const ATSPI_DBUS_INTERFACE_SOCKET: *const c_char = b"org.a11y.atspi.Socket\0" as *const u8 as *const c_char;
pub const ATSPI_DBUS_INTERFACE_TABLE: *const c_char = b"org.a11y.atspi.Table\0" as *const u8 as *const c_char;
pub const ATSPI_DBUS_INTERFACE_TABLE_CELL: *const c_char = b"org.a11y.atspi.TableCell\0" as *const u8 as *const c_char;
pub const ATSPI_DBUS_INTERFACE_TEXT: *const c_char = b"org.a11y.atspi.Text\0" as *const u8 as *const c_char;
pub const ATSPI_DBUS_INTERFACE_VALUE: *const c_char = b"org.a11y.atspi.Value\0" as *const u8 as *const c_char;
pub const ATSPI_DBUS_NAME_REGISTRY: *const c_char = b"org.a11y.atspi.Registry\0" as *const u8 as *const c_char;
pub const ATSPI_DBUS_PATH_DEC: *const c_char = b"/org/a11y/atspi/registry/deviceeventcontroller\0" as *const u8 as *const c_char;
pub const ATSPI_DBUS_PATH_NULL: *const c_char = b"/org/a11y/atspi/null\0" as *const u8 as *const c_char;
pub const ATSPI_DBUS_PATH_REGISTRY: *const c_char = b"/org/a11y/atspi/registry\0" as *const u8 as *const c_char;
pub const ATSPI_DBUS_PATH_ROOT: *const c_char = b"/org/a11y/atspi/accessible/root\0" as *const u8 as *const c_char;
pub const ATSPI_DBUS_PATH_SCREEN_READER: *const c_char = b"/org/a11y/atspi/screenreader\0" as *const u8 as *const c_char;
pub const ATSPI_EVENTTYPE_COUNT: c_int = 4;
pub const ATSPI_KEYEVENTTYPE_COUNT: c_int = 2;
pub const ATSPI_KEYSYNTHTYPE_COUNT: c_int = 5;
pub const ATSPI_LOCALE_TYPE_COUNT: c_int = 6;
pub const ATSPI_MATCHTYPES_COUNT: c_int = 6;
pub const ATSPI_MODIFIERTYPE_COUNT: c_int = 8;
pub const ATSPI_RELATIONTYPE_COUNT: c_int = 24;
pub const ATSPI_ROLE_COUNT: c_int = 130;
pub const ATSPI_SCROLLTYPE_COUNT: c_int = 7;
pub const ATSPI_SORTORDER_COUNT: c_int = 8;
pub const ATSPI_STATETYPE_COUNT: c_int = 42;
pub const ATSPI_TEXT_BOUNDARY_TYPE_COUNT: c_int = 7;
pub const ATSPI_TEXT_CLIP_TYPE_COUNT: c_int = 4;
pub const ATSPI_TREETRAVERSALTYPE_COUNT: c_int = 4;

// Flags
pub type AtspiCache = c_uint;
pub const ATSPI_CACHE_NONE: AtspiCache = 0;
pub const ATSPI_CACHE_PARENT: AtspiCache = 1;
pub const ATSPI_CACHE_CHILDREN: AtspiCache = 2;
pub const ATSPI_CACHE_NAME: AtspiCache = 4;
pub const ATSPI_CACHE_DESCRIPTION: AtspiCache = 8;
pub const ATSPI_CACHE_STATES: AtspiCache = 16;
pub const ATSPI_CACHE_ROLE: AtspiCache = 32;
pub const ATSPI_CACHE_INTERFACES: AtspiCache = 64;
pub const ATSPI_CACHE_ATTRIBUTES: AtspiCache = 128;
pub const ATSPI_CACHE_ALL: AtspiCache = 1073741823;
pub const ATSPI_CACHE_DEFAULT: AtspiCache = 127;
pub const ATSPI_CACHE_UNDEFINED: AtspiCache = 1073741824;

pub type AtspiKeyListenerSyncType = c_uint;
pub const ATSPI_KEYLISTENER_NOSYNC: AtspiKeyListenerSyncType = 0;
pub const ATSPI_KEYLISTENER_SYNCHRONOUS: AtspiKeyListenerSyncType = 1;
pub const ATSPI_KEYLISTENER_CANCONSUME: AtspiKeyListenerSyncType = 2;
pub const ATSPI_KEYLISTENER_ALL_WINDOWS: AtspiKeyListenerSyncType = 4;

// Callbacks
pub type AtspiDeviceListenerCB = Option<unsafe extern "C" fn(*const AtspiDeviceEvent, *mut c_void) -> gboolean>;
pub type AtspiDeviceListenerSimpleCB = Option<unsafe extern "C" fn(*const AtspiDeviceEvent) -> gboolean>;
pub type AtspiEventListenerCB = Option<unsafe extern "C" fn(*mut AtspiEvent, *mut c_void)>;
pub type AtspiEventListenerSimpleCB = Option<unsafe extern "C" fn(*const AtspiEvent)>;

// Records
#[repr(C)]
#[derive(Copy, Clone)]
pub struct AtspiAccessibleClass {
    pub parent_class: AtspiObjectClass,
    pub region_changed: Option<unsafe extern "C" fn(*mut AtspiAccessible, c_int, c_int)>,
    pub mode_changed: Option<unsafe extern "C" fn(*mut AtspiAccessible, gboolean)>,
}

impl ::std::fmt::Debug for AtspiAccessibleClass {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("AtspiAccessibleClass @ {:p}", self))
         .field("parent_class", &self.parent_class)
         .field("region_changed", &self.region_changed)
         .field("mode_changed", &self.mode_changed)
         .finish()
    }
}

#[repr(C)]
pub struct _AtspiAccessiblePrivate(c_void);

pub type AtspiAccessiblePrivate = *mut _AtspiAccessiblePrivate;

#[repr(C)]
#[derive(Copy, Clone)]
pub struct AtspiApplicationClass {
    pub parent_class: gobject::GObjectClass,
}

impl ::std::fmt::Debug for AtspiApplicationClass {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("AtspiApplicationClass @ {:p}", self))
         .field("parent_class", &self.parent_class)
         .finish()
    }
}

#[repr(C)]
#[derive(Copy, Clone)]
pub struct AtspiDeviceEvent {
    pub type_: AtspiEventType,
    pub id: c_uint,
    pub hw_code: c_ushort,
    pub modifiers: c_ushort,
    pub timestamp: c_uint,
    pub event_string: *mut c_char,
    pub is_text: gboolean,
}

impl ::std::fmt::Debug for AtspiDeviceEvent {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("AtspiDeviceEvent @ {:p}", self))
         .field("type_", &self.type_)
         .field("id", &self.id)
         .field("hw_code", &self.hw_code)
         .field("modifiers", &self.modifiers)
         .field("timestamp", &self.timestamp)
         .field("event_string", &self.event_string)
         .field("is_text", &self.is_text)
         .finish()
    }
}

#[repr(C)]
#[derive(Copy, Clone)]
pub struct AtspiDeviceListenerClass {
    pub parent_class: gobject::GObjectClass,
    pub device_event: Option<unsafe extern "C" fn(*mut AtspiDeviceListener, *const AtspiDeviceEvent) -> gboolean>,
}

impl ::std::fmt::Debug for AtspiDeviceListenerClass {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("AtspiDeviceListenerClass @ {:p}", self))
         .field("parent_class", &self.parent_class)
         .field("device_event", &self.device_event)
         .finish()
    }
}

#[repr(C)]
#[derive(Copy, Clone)]
pub struct AtspiEvent {
    pub type_: *mut c_char,
    pub source: *mut AtspiAccessible,
    pub detail1: c_int,
    pub detail2: c_int,
    pub any_data: gobject::GValue,
    pub sender: *mut AtspiAccessible,
}

impl ::std::fmt::Debug for AtspiEvent {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("AtspiEvent @ {:p}", self))
         .field("type_", &self.type_)
         .field("source", &self.source)
         .field("detail1", &self.detail1)
         .field("detail2", &self.detail2)
         .field("any_data", &self.any_data)
         .field("sender", &self.sender)
         .finish()
    }
}

#[repr(C)]
#[derive(Copy, Clone)]
pub struct AtspiEventListenerClass {
    pub parent_class: gobject::GObjectClass,
}

impl ::std::fmt::Debug for AtspiEventListenerClass {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("AtspiEventListenerClass @ {:p}", self))
         .field("parent_class", &self.parent_class)
         .finish()
    }
}

#[repr(C)]
#[derive(Copy, Clone)]
pub struct AtspiEventListenerMode {
    pub synchronous: gboolean,
    pub preemptive: gboolean,
    pub global: gboolean,
}

impl ::std::fmt::Debug for AtspiEventListenerMode {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("AtspiEventListenerMode @ {:p}", self))
         .field("synchronous", &self.synchronous)
         .field("preemptive", &self.preemptive)
         .field("global", &self.global)
         .finish()
    }
}

#[repr(C)]
#[derive(Copy, Clone)]
pub struct AtspiHyperlinkClass {
    pub parent_class: AtspiObjectClass,
}

impl ::std::fmt::Debug for AtspiHyperlinkClass {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("AtspiHyperlinkClass @ {:p}", self))
         .field("parent_class", &self.parent_class)
         .finish()
    }
}

#[repr(C)]
#[derive(Copy, Clone)]
pub struct AtspiKeyDefinition {
    pub keycode: c_int,
    pub keysym: c_int,
    pub keystring: *mut c_char,
    pub unused: c_int,
}

impl ::std::fmt::Debug for AtspiKeyDefinition {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("AtspiKeyDefinition @ {:p}", self))
         .field("keycode", &self.keycode)
         .field("keysym", &self.keysym)
         .field("keystring", &self.keystring)
         .field("unused", &self.unused)
         .finish()
    }
}

#[repr(C)]
#[derive(Copy, Clone)]
pub struct AtspiKeySet {
    pub keysyms: *mut c_uint,
    pub keycodes: *mut c_ushort,
    pub keystrings: *mut *mut c_char,
    pub len: c_short,
}

impl ::std::fmt::Debug for AtspiKeySet {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("AtspiKeySet @ {:p}", self))
         .field("keysyms", &self.keysyms)
         .field("keycodes", &self.keycodes)
         .field("keystrings", &self.keystrings)
         .field("len", &self.len)
         .finish()
    }
}

#[repr(C)]
#[derive(Copy, Clone)]
pub struct AtspiMatchRuleClass {
    pub parent_class: gobject::GObjectClass,
}

impl ::std::fmt::Debug for AtspiMatchRuleClass {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("AtspiMatchRuleClass @ {:p}", self))
         .field("parent_class", &self.parent_class)
         .finish()
    }
}

#[repr(C)]
#[derive(Copy, Clone)]
pub struct AtspiObjectClass {
    pub parent_class: gobject::GObjectClass,
}

impl ::std::fmt::Debug for AtspiObjectClass {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("AtspiObjectClass @ {:p}", self))
         .field("parent_class", &self.parent_class)
         .finish()
    }
}

#[repr(C)]
#[derive(Copy, Clone)]
pub struct AtspiPoint {
    pub x: c_int,
    pub y: c_int,
}

impl ::std::fmt::Debug for AtspiPoint {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("AtspiPoint @ {:p}", self))
         .field("x", &self.x)
         .field("y", &self.y)
         .finish()
    }
}

#[repr(C)]
#[derive(Copy, Clone)]
pub struct AtspiRange {
    pub start_offset: c_int,
    pub end_offset: c_int,
}

impl ::std::fmt::Debug for AtspiRange {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("AtspiRange @ {:p}", self))
         .field("start_offset", &self.start_offset)
         .field("end_offset", &self.end_offset)
         .finish()
    }
}

#[repr(C)]
#[derive(Copy, Clone)]
pub struct AtspiRect {
    pub x: c_int,
    pub y: c_int,
    pub width: c_int,
    pub height: c_int,
}

impl ::std::fmt::Debug for AtspiRect {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("AtspiRect @ {:p}", self))
         .field("x", &self.x)
         .field("y", &self.y)
         .field("width", &self.width)
         .field("height", &self.height)
         .finish()
    }
}

#[repr(C)]
#[derive(Copy, Clone)]
pub struct AtspiRelationClass {
    pub parent_class: gobject::GObjectClass,
}

impl ::std::fmt::Debug for AtspiRelationClass {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("AtspiRelationClass @ {:p}", self))
         .field("parent_class", &self.parent_class)
         .finish()
    }
}

#[repr(C)]
#[derive(Copy, Clone)]
pub struct AtspiStateSetClass {
    pub parent_class: gobject::GObjectClass,
}

impl ::std::fmt::Debug for AtspiStateSetClass {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("AtspiStateSetClass @ {:p}", self))
         .field("parent_class", &self.parent_class)
         .finish()
    }
}

#[repr(C)]
#[derive(Copy, Clone)]
pub struct AtspiTextRange {
    pub start_offset: c_int,
    pub end_offset: c_int,
    pub content: *mut c_char,
}

impl ::std::fmt::Debug for AtspiTextRange {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("AtspiTextRange @ {:p}", self))
         .field("start_offset", &self.start_offset)
         .field("end_offset", &self.end_offset)
         .field("content", &self.content)
         .finish()
    }
}

// Classes
#[repr(C)]
#[derive(Copy, Clone)]
pub struct AtspiAccessible {
    pub parent: AtspiObject,
    pub accessible_parent: *mut AtspiAccessible,
    pub children: *mut glib::GPtrArray,
    pub role: AtspiRole,
    pub interfaces: c_int,
    pub name: *mut c_char,
    pub description: *mut c_char,
    pub states: *mut AtspiStateSet,
    pub attributes: *mut glib::GHashTable,
    pub cached_properties: c_uint,
    pub priv_: *mut AtspiAccessiblePrivate,
}

impl ::std::fmt::Debug for AtspiAccessible {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("AtspiAccessible @ {:p}", self))
         .field("parent", &self.parent)
         .field("accessible_parent", &self.accessible_parent)
         .field("children", &self.children)
         .field("role", &self.role)
         .field("interfaces", &self.interfaces)
         .field("name", &self.name)
         .field("description", &self.description)
         .field("states", &self.states)
         .field("attributes", &self.attributes)
         .field("cached_properties", &self.cached_properties)
         .field("priv_", &self.priv_)
         .finish()
    }
}

#[repr(C)]
#[derive(Copy, Clone)]
pub struct AtspiApplication {
    pub parent: gobject::GObject,
    pub hash: *mut glib::GHashTable,
    pub bus_name: *mut c_char,
    pub bus: *mut dbus::DBusConnection,
    pub root: *mut AtspiAccessible,
    pub cache: AtspiCache,
    pub toolkit_name: *mut c_char,
    pub toolkit_version: *mut c_char,
    pub atspi_version: *mut c_char,
    pub time_added: timeval,
}

impl ::std::fmt::Debug for AtspiApplication {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("AtspiApplication @ {:p}", self))
         .field("parent", &self.parent)
         .field("hash", &self.hash)
         .field("bus_name", &self.bus_name)
         .field("bus", &self.bus)
         .field("root", &self.root)
         .field("cache", &self.cache)
         .field("toolkit_name", &self.toolkit_name)
         .field("toolkit_version", &self.toolkit_version)
         .field("atspi_version", &self.atspi_version)
         .field("time_added", &self.time_added)
         .finish()
    }
}

#[repr(C)]
#[derive(Copy, Clone)]
pub struct AtspiDeviceListener {
    pub parent: gobject::GObject,
    pub id: c_uint,
    pub callbacks: *mut glib::GList,
}

impl ::std::fmt::Debug for AtspiDeviceListener {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("AtspiDeviceListener @ {:p}", self))
         .field("parent", &self.parent)
         .field("id", &self.id)
         .field("callbacks", &self.callbacks)
         .finish()
    }
}

#[repr(C)]
#[derive(Copy, Clone)]
pub struct AtspiEventListener {
    pub parent: gobject::GObject,
    pub callback: AtspiEventListenerCB,
    pub user_data: *mut c_void,
    pub cb_destroyed: glib::GDestroyNotify,
}

impl ::std::fmt::Debug for AtspiEventListener {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("AtspiEventListener @ {:p}", self))
         .field("parent", &self.parent)
         .field("callback", &self.callback)
         .field("user_data", &self.user_data)
         .field("cb_destroyed", &self.cb_destroyed)
         .finish()
    }
}

#[repr(C)]
#[derive(Copy, Clone)]
pub struct AtspiHyperlink {
    pub parent: AtspiObject,
}

impl ::std::fmt::Debug for AtspiHyperlink {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("AtspiHyperlink @ {:p}", self))
         .field("parent", &self.parent)
         .finish()
    }
}

#[repr(C)]
#[derive(Copy, Clone)]
pub struct AtspiMatchRule {
    pub parent: gobject::GObject,
    pub states: *mut AtspiStateSet,
    pub statematchtype: AtspiCollectionMatchType,
    pub attributes: *mut glib::GHashTable,
    pub attributematchtype: AtspiCollectionMatchType,
    pub interfaces: *mut glib::GArray,
    pub interfacematchtype: AtspiCollectionMatchType,
    pub roles: [c_int; 4],
    pub rolematchtype: AtspiCollectionMatchType,
    pub invert: gboolean,
}

impl ::std::fmt::Debug for AtspiMatchRule {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("AtspiMatchRule @ {:p}", self))
         .field("parent", &self.parent)
         .field("states", &self.states)
         .field("statematchtype", &self.statematchtype)
         .field("attributes", &self.attributes)
         .field("attributematchtype", &self.attributematchtype)
         .field("interfaces", &self.interfaces)
         .field("interfacematchtype", &self.interfacematchtype)
         .field("roles", &self.roles)
         .field("rolematchtype", &self.rolematchtype)
         .field("invert", &self.invert)
         .finish()
    }
}

#[repr(C)]
#[derive(Copy, Clone)]
pub struct AtspiObject {
    pub parent: gobject::GObject,
    pub app: *mut AtspiApplication,
    pub path: *mut c_char,
}

impl ::std::fmt::Debug for AtspiObject {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("AtspiObject @ {:p}", self))
         .field("parent", &self.parent)
         .field("app", &self.app)
         .field("path", &self.path)
         .finish()
    }
}

#[repr(C)]
#[derive(Copy, Clone)]
pub struct AtspiRelation {
    pub parent: gobject::GObject,
    pub relation_type: AtspiRelationType,
    pub targets: *mut glib::GArray,
}

impl ::std::fmt::Debug for AtspiRelation {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("AtspiRelation @ {:p}", self))
         .field("parent", &self.parent)
         .field("relation_type", &self.relation_type)
         .field("targets", &self.targets)
         .finish()
    }
}

#[repr(C)]
#[derive(Copy, Clone)]
pub struct AtspiStateSet {
    pub parent: gobject::GObject,
    pub accessible: *mut AtspiAccessible,
    pub states: i64,
}

impl ::std::fmt::Debug for AtspiStateSet {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("AtspiStateSet @ {:p}", self))
         .field("parent", &self.parent)
         .field("accessible", &self.accessible)
         .field("states", &self.states)
         .finish()
    }
}

// Interfaces
#[repr(C)]
pub struct AtspiAction(c_void);

impl ::std::fmt::Debug for AtspiAction {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        write!(f, "AtspiAction @ {:p}", self)
    }
}

#[repr(C)]
pub struct AtspiCollection(c_void);

impl ::std::fmt::Debug for AtspiCollection {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        write!(f, "AtspiCollection @ {:p}", self)
    }
}

#[repr(C)]
pub struct AtspiComponent(c_void);

impl ::std::fmt::Debug for AtspiComponent {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        write!(f, "AtspiComponent @ {:p}", self)
    }
}

#[repr(C)]
pub struct AtspiDocument(c_void);

impl ::std::fmt::Debug for AtspiDocument {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        write!(f, "AtspiDocument @ {:p}", self)
    }
}

#[repr(C)]
pub struct AtspiEditableText(c_void);

impl ::std::fmt::Debug for AtspiEditableText {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        write!(f, "AtspiEditableText @ {:p}", self)
    }
}

#[repr(C)]
pub struct AtspiHypertext(c_void);

impl ::std::fmt::Debug for AtspiHypertext {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        write!(f, "AtspiHypertext @ {:p}", self)
    }
}

#[repr(C)]
pub struct AtspiImage(c_void);

impl ::std::fmt::Debug for AtspiImage {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        write!(f, "AtspiImage @ {:p}", self)
    }
}

#[repr(C)]
pub struct AtspiSelection(c_void);

impl ::std::fmt::Debug for AtspiSelection {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        write!(f, "AtspiSelection @ {:p}", self)
    }
}

#[repr(C)]
pub struct AtspiTable(c_void);

impl ::std::fmt::Debug for AtspiTable {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        write!(f, "AtspiTable @ {:p}", self)
    }
}

#[repr(C)]
pub struct AtspiTableCell(c_void);

impl ::std::fmt::Debug for AtspiTableCell {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        write!(f, "AtspiTableCell @ {:p}", self)
    }
}

#[repr(C)]
pub struct AtspiText(c_void);

impl ::std::fmt::Debug for AtspiText {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        write!(f, "AtspiText @ {:p}", self)
    }
}

#[repr(C)]
pub struct AtspiValue(c_void);

impl ::std::fmt::Debug for AtspiValue {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        write!(f, "AtspiValue @ {:p}", self)
    }
}


#[link(name = "atspi")]
extern "C" {

    //=========================================================================
    // AtspiCollectionMatchType
    //=========================================================================
    pub fn atspi_collection_match_type_get_type() -> GType;

    //=========================================================================
    // AtspiCollectionSortOrder
    //=========================================================================
    pub fn atspi_collection_sort_order_get_type() -> GType;

    //=========================================================================
    // AtspiCollectionTreeTraversalType
    //=========================================================================
    pub fn atspi_collection_tree_traversal_type_get_type() -> GType;

    //=========================================================================
    // AtspiComponentLayer
    //=========================================================================
    pub fn atspi_component_layer_get_type() -> GType;

    //=========================================================================
    // AtspiCoordType
    //=========================================================================
    pub fn atspi_coord_type_get_type() -> GType;

    //=========================================================================
    // AtspiEventType
    //=========================================================================
    pub fn atspi_event_type_get_type() -> GType;

    //=========================================================================
    // AtspiKeyEventType
    //=========================================================================
    pub fn atspi_key_event_type_get_type() -> GType;

    //=========================================================================
    // AtspiKeySynthType
    //=========================================================================
    pub fn atspi_key_synth_type_get_type() -> GType;

    //=========================================================================
    // AtspiLocaleType
    //=========================================================================
    pub fn atspi_locale_type_get_type() -> GType;

    //=========================================================================
    // AtspiModifierType
    //=========================================================================
    pub fn atspi_modifier_type_get_type() -> GType;

    //=========================================================================
    // AtspiRelationType
    //=========================================================================
    pub fn atspi_relation_type_get_type() -> GType;

    //=========================================================================
    // AtspiRole
    //=========================================================================
    pub fn atspi_role_get_type() -> GType;
    pub fn atspi_role_get_name(role: AtspiRole) -> *mut c_char;

    //=========================================================================
    // AtspiScrollType
    //=========================================================================
    pub fn atspi_scroll_type_get_type() -> GType;

    //=========================================================================
    // AtspiStateType
    //=========================================================================
    pub fn atspi_state_type_get_type() -> GType;

    //=========================================================================
    // AtspiTextBoundaryType
    //=========================================================================
    pub fn atspi_text_boundary_type_get_type() -> GType;

    //=========================================================================
    // AtspiTextClipType
    //=========================================================================
    pub fn atspi_text_clip_type_get_type() -> GType;

    //=========================================================================
    // AtspiTextGranularity
    //=========================================================================
    pub fn atspi_text_granularity_get_type() -> GType;

    //=========================================================================
    // AtspiCache
    //=========================================================================
    pub fn atspi_cache_get_type() -> GType;

    //=========================================================================
    // AtspiKeyListenerSyncType
    //=========================================================================
    pub fn atspi_key_listener_sync_type_get_type() -> GType;

    //=========================================================================
    // AtspiDeviceEvent
    //=========================================================================
    pub fn atspi_device_event_get_type() -> GType;

    //=========================================================================
    // AtspiEvent
    //=========================================================================
    pub fn atspi_event_get_type() -> GType;
    pub fn atspi_event_main();
    pub fn atspi_event_quit();

    //=========================================================================
    // AtspiKeyDefinition
    //=========================================================================
    pub fn atspi_key_definition_get_type() -> GType;

    //=========================================================================
    // AtspiPoint
    //=========================================================================
    pub fn atspi_point_get_type() -> GType;
    pub fn atspi_point_copy(src: *mut AtspiPoint) -> *mut AtspiPoint;

    //=========================================================================
    // AtspiRange
    //=========================================================================
    pub fn atspi_range_get_type() -> GType;
    pub fn atspi_range_copy(src: *mut AtspiRange) -> *mut AtspiRange;

    //=========================================================================
    // AtspiRect
    //=========================================================================
    pub fn atspi_rect_get_type() -> GType;
    pub fn atspi_rect_copy(src: *mut AtspiRect) -> *mut AtspiRect;

    //=========================================================================
    // AtspiTextRange
    //=========================================================================
    pub fn atspi_text_range_get_type() -> GType;

    //=========================================================================
    // AtspiAccessible
    //=========================================================================
    pub fn atspi_accessible_get_type() -> GType;
    pub fn atspi_accessible_clear_cache(obj: *mut AtspiAccessible);
    #[cfg(any(feature = "v2_34", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v2_34")))]
    pub fn atspi_accessible_get_accessible_id(obj: *mut AtspiAccessible, error: *mut *mut glib::GError) -> *mut c_char;
    pub fn atspi_accessible_get_action(obj: *mut AtspiAccessible) -> *mut AtspiAction;
    pub fn atspi_accessible_get_action_iface(obj: *mut AtspiAccessible) -> *mut AtspiAction;
    pub fn atspi_accessible_get_application(obj: *mut AtspiAccessible, error: *mut *mut glib::GError) -> *mut AtspiAccessible;
    pub fn atspi_accessible_get_atspi_version(obj: *mut AtspiAccessible, error: *mut *mut glib::GError) -> *mut c_char;
    pub fn atspi_accessible_get_attributes(obj: *mut AtspiAccessible, error: *mut *mut glib::GError) -> *mut glib::GHashTable;
    pub fn atspi_accessible_get_attributes_as_array(obj: *mut AtspiAccessible, error: *mut *mut glib::GError) -> *mut glib::GArray;
    pub fn atspi_accessible_get_child_at_index(obj: *mut AtspiAccessible, child_index: c_int, error: *mut *mut glib::GError) -> *mut AtspiAccessible;
    pub fn atspi_accessible_get_child_count(obj: *mut AtspiAccessible, error: *mut *mut glib::GError) -> c_int;
    pub fn atspi_accessible_get_collection(obj: *mut AtspiAccessible) -> *mut AtspiCollection;
    pub fn atspi_accessible_get_collection_iface(obj: *mut AtspiAccessible) -> *mut AtspiCollection;
    pub fn atspi_accessible_get_component(obj: *mut AtspiAccessible) -> *mut AtspiComponent;
    pub fn atspi_accessible_get_component_iface(obj: *mut AtspiAccessible) -> *mut AtspiComponent;
    pub fn atspi_accessible_get_description(obj: *mut AtspiAccessible, error: *mut *mut glib::GError) -> *mut c_char;
    pub fn atspi_accessible_get_document(obj: *mut AtspiAccessible) -> *mut AtspiDocument;
    pub fn atspi_accessible_get_document_iface(obj: *mut AtspiAccessible) -> *mut AtspiDocument;
    pub fn atspi_accessible_get_editable_text(obj: *mut AtspiAccessible) -> *mut AtspiEditableText;
    pub fn atspi_accessible_get_editable_text_iface(obj: *mut AtspiAccessible) -> *mut AtspiEditableText;
    pub fn atspi_accessible_get_hyperlink(obj: *mut AtspiAccessible) -> *mut AtspiHyperlink;
    pub fn atspi_accessible_get_hypertext(obj: *mut AtspiAccessible) -> *mut AtspiHypertext;
    pub fn atspi_accessible_get_hypertext_iface(obj: *mut AtspiAccessible) -> *mut AtspiHypertext;
    pub fn atspi_accessible_get_id(obj: *mut AtspiAccessible, error: *mut *mut glib::GError) -> c_int;
    pub fn atspi_accessible_get_image(obj: *mut AtspiAccessible) -> *mut AtspiImage;
    pub fn atspi_accessible_get_image_iface(obj: *mut AtspiAccessible) -> *mut AtspiImage;
    pub fn atspi_accessible_get_index_in_parent(obj: *mut AtspiAccessible, error: *mut *mut glib::GError) -> c_int;
    pub fn atspi_accessible_get_interfaces(obj: *mut AtspiAccessible) -> *mut glib::GArray;
    pub fn atspi_accessible_get_localized_role_name(obj: *mut AtspiAccessible, error: *mut *mut glib::GError) -> *mut c_char;
    pub fn atspi_accessible_get_name(obj: *mut AtspiAccessible, error: *mut *mut glib::GError) -> *mut c_char;
    pub fn atspi_accessible_get_object_locale(accessible: *mut AtspiAccessible, error: *mut *mut glib::GError) -> *const c_char;
    pub fn atspi_accessible_get_parent(obj: *mut AtspiAccessible, error: *mut *mut glib::GError) -> *mut AtspiAccessible;
    pub fn atspi_accessible_get_process_id(accessible: *mut AtspiAccessible, error: *mut *mut glib::GError) -> c_uint;
    pub fn atspi_accessible_get_relation_set(obj: *mut AtspiAccessible, error: *mut *mut glib::GError) -> *mut glib::GArray;
    pub fn atspi_accessible_get_role(obj: *mut AtspiAccessible, error: *mut *mut glib::GError) -> AtspiRole;
    pub fn atspi_accessible_get_role_name(obj: *mut AtspiAccessible, error: *mut *mut glib::GError) -> *mut c_char;
    pub fn atspi_accessible_get_selection(obj: *mut AtspiAccessible) -> *mut AtspiSelection;
    pub fn atspi_accessible_get_selection_iface(obj: *mut AtspiAccessible) -> *mut AtspiSelection;
    pub fn atspi_accessible_get_state_set(obj: *mut AtspiAccessible) -> *mut AtspiStateSet;
    pub fn atspi_accessible_get_table(obj: *mut AtspiAccessible) -> *mut AtspiTable;
    pub fn atspi_accessible_get_table_cell(obj: *mut AtspiAccessible) -> *mut AtspiTableCell;
    pub fn atspi_accessible_get_table_iface(obj: *mut AtspiAccessible) -> *mut AtspiTable;
    pub fn atspi_accessible_get_text(obj: *mut AtspiAccessible) -> *mut AtspiText;
    pub fn atspi_accessible_get_text_iface(obj: *mut AtspiAccessible) -> *mut AtspiText;
    pub fn atspi_accessible_get_toolkit_name(obj: *mut AtspiAccessible, error: *mut *mut glib::GError) -> *mut c_char;
    pub fn atspi_accessible_get_toolkit_version(obj: *mut AtspiAccessible, error: *mut *mut glib::GError) -> *mut c_char;
    pub fn atspi_accessible_get_value(obj: *mut AtspiAccessible) -> *mut AtspiValue;
    pub fn atspi_accessible_get_value_iface(obj: *mut AtspiAccessible) -> *mut AtspiValue;
    pub fn atspi_accessible_set_cache_mask(accessible: *mut AtspiAccessible, mask: AtspiCache);

    //=========================================================================
    // AtspiApplication
    //=========================================================================
    pub fn atspi_application_get_type() -> GType;

    //=========================================================================
    // AtspiDeviceListener
    //=========================================================================
    pub fn atspi_device_listener_get_type() -> GType;
    pub fn atspi_device_listener_new(callback: AtspiDeviceListenerCB, user_data: *mut c_void, callback_destroyed: glib::GDestroyNotify) -> *mut AtspiDeviceListener;
    pub fn atspi_device_listener_new_simple(callback: AtspiDeviceListenerSimpleCB, callback_destroyed: glib::GDestroyNotify) -> *mut AtspiDeviceListener;
    pub fn atspi_device_listener_add_callback(listener: *mut AtspiDeviceListener, callback: AtspiDeviceListenerCB, callback_destroyed: glib::GDestroyNotify, user_data: *mut c_void);
    pub fn atspi_device_listener_remove_callback(listener: *mut AtspiDeviceListener, callback: AtspiDeviceListenerCB);

    //=========================================================================
    // AtspiEventListener
    //=========================================================================
    pub fn atspi_event_listener_get_type() -> GType;
    pub fn atspi_event_listener_new(callback: AtspiEventListenerCB, user_data: gpointer, callback_destroyed: glib::GDestroyNotify) -> *mut AtspiEventListener;
    pub fn atspi_event_listener_new_simple(callback: AtspiEventListenerSimpleCB, callback_destroyed: glib::GDestroyNotify) -> *mut AtspiEventListener;
    pub fn atspi_event_listener_deregister_from_callback(callback: AtspiEventListenerCB, user_data: *mut c_void, event_type: *const c_char, error: *mut *mut glib::GError) -> gboolean;
    pub fn atspi_event_listener_deregister_no_data(callback: AtspiEventListenerSimpleCB, event_type: *const c_char, error: *mut *mut glib::GError) -> gboolean;
    pub fn atspi_event_listener_register_from_callback(callback: AtspiEventListenerCB, user_data: *mut c_void, callback_destroyed: glib::GDestroyNotify, event_type: *const c_char, error: *mut *mut glib::GError) -> gboolean;
    pub fn atspi_event_listener_register_from_callback_full(callback: AtspiEventListenerCB, user_data: *mut c_void, callback_destroyed: glib::GDestroyNotify, event_type: *const c_char, properties: *mut glib::GArray, error: *mut *mut glib::GError) -> gboolean;
    pub fn atspi_event_listener_register_no_data(callback: AtspiEventListenerSimpleCB, callback_destroyed: glib::GDestroyNotify, event_type: *const c_char, error: *mut *mut glib::GError) -> gboolean;
    pub fn atspi_event_listener_deregister(listener: *mut AtspiEventListener, event_type: *const c_char, error: *mut *mut glib::GError) -> gboolean;
    pub fn atspi_event_listener_register(listener: *mut AtspiEventListener, event_type: *const c_char, error: *mut *mut glib::GError) -> gboolean;
    pub fn atspi_event_listener_register_full(listener: *mut AtspiEventListener, event_type: *const c_char, properties: *mut glib::GArray, error: *mut *mut glib::GError) -> gboolean;

    //=========================================================================
    // AtspiHyperlink
    //=========================================================================
    pub fn atspi_hyperlink_get_type() -> GType;
    pub fn atspi_hyperlink_get_end_index(obj: *mut AtspiHyperlink, error: *mut *mut glib::GError) -> c_int;
    pub fn atspi_hyperlink_get_index_range(obj: *mut AtspiHyperlink, error: *mut *mut glib::GError) -> *mut AtspiRange;
    pub fn atspi_hyperlink_get_n_anchors(obj: *mut AtspiHyperlink, error: *mut *mut glib::GError) -> c_int;
    pub fn atspi_hyperlink_get_object(obj: *mut AtspiHyperlink, i: c_int, error: *mut *mut glib::GError) -> *mut AtspiAccessible;
    pub fn atspi_hyperlink_get_start_index(obj: *mut AtspiHyperlink, error: *mut *mut glib::GError) -> c_int;
    pub fn atspi_hyperlink_get_uri(obj: *mut AtspiHyperlink, i: c_int, error: *mut *mut glib::GError) -> *mut c_char;
    pub fn atspi_hyperlink_is_valid(obj: *mut AtspiHyperlink, error: *mut *mut glib::GError) -> gboolean;

    //=========================================================================
    // AtspiMatchRule
    //=========================================================================
    pub fn atspi_match_rule_get_type() -> GType;
    pub fn atspi_match_rule_new(states: *mut AtspiStateSet, statematchtype: AtspiCollectionMatchType, attributes: *mut glib::GHashTable, attributematchtype: AtspiCollectionMatchType, roles: *mut glib::GArray, rolematchtype: AtspiCollectionMatchType, interfaces: *mut glib::GArray, interfacematchtype: AtspiCollectionMatchType, invert: gboolean) -> *mut AtspiMatchRule;

    //=========================================================================
    // AtspiObject
    //=========================================================================
    pub fn atspi_object_get_type() -> GType;

    //=========================================================================
    // AtspiRelation
    //=========================================================================
    pub fn atspi_relation_get_type() -> GType;
    pub fn atspi_relation_get_n_targets(obj: *mut AtspiRelation) -> c_int;
    pub fn atspi_relation_get_relation_type(obj: *mut AtspiRelation) -> AtspiRelationType;
    pub fn atspi_relation_get_target(obj: *mut AtspiRelation, i: c_int) -> *mut AtspiAccessible;

    //=========================================================================
    // AtspiStateSet
    //=========================================================================
    pub fn atspi_state_set_get_type() -> GType;
    pub fn atspi_state_set_new(states: *mut glib::GArray) -> *mut AtspiStateSet;
    pub fn atspi_state_set_add(set: *mut AtspiStateSet, state: AtspiStateType);
    pub fn atspi_state_set_compare(set: *mut AtspiStateSet, set2: *mut AtspiStateSet) -> *mut AtspiStateSet;
    pub fn atspi_state_set_contains(set: *mut AtspiStateSet, state: AtspiStateType) -> gboolean;
    pub fn atspi_state_set_equals(set: *mut AtspiStateSet, set2: *mut AtspiStateSet) -> gboolean;
    pub fn atspi_state_set_get_states(set: *mut AtspiStateSet) -> *mut glib::GArray;
    pub fn atspi_state_set_is_empty(set: *mut AtspiStateSet) -> gboolean;
    pub fn atspi_state_set_remove(set: *mut AtspiStateSet, state: AtspiStateType);
    pub fn atspi_state_set_set_by_name(set: *mut AtspiStateSet, name: *const c_char, enabled: gboolean);

    //=========================================================================
    // AtspiAction
    //=========================================================================
    pub fn atspi_action_get_type() -> GType;
    pub fn atspi_action_do_action(obj: *mut AtspiAction, i: c_int, error: *mut *mut glib::GError) -> gboolean;
    pub fn atspi_action_get_action_description(obj: *mut AtspiAction, i: c_int, error: *mut *mut glib::GError) -> *mut c_char;
    pub fn atspi_action_get_action_name(obj: *mut AtspiAction, i: c_int, error: *mut *mut glib::GError) -> *mut c_char;
    pub fn atspi_action_get_description(obj: *mut AtspiAction, i: c_int, error: *mut *mut glib::GError) -> *mut c_char;
    pub fn atspi_action_get_key_binding(obj: *mut AtspiAction, i: c_int, error: *mut *mut glib::GError) -> *mut c_char;
    pub fn atspi_action_get_localized_name(obj: *mut AtspiAction, i: c_int, error: *mut *mut glib::GError) -> *mut c_char;
    pub fn atspi_action_get_n_actions(obj: *mut AtspiAction, error: *mut *mut glib::GError) -> c_int;
    pub fn atspi_action_get_name(obj: *mut AtspiAction, i: c_int, error: *mut *mut glib::GError) -> *mut c_char;

    //=========================================================================
    // AtspiCollection
    //=========================================================================
    pub fn atspi_collection_get_type() -> GType;
    pub fn atspi_collection_get_active_descendant(collection: *mut AtspiCollection, error: *mut *mut glib::GError) -> *mut AtspiAccessible;
    pub fn atspi_collection_get_matches(collection: *mut AtspiCollection, rule: *mut AtspiMatchRule, sortby: AtspiCollectionSortOrder, count: c_int, traverse: gboolean, error: *mut *mut glib::GError) -> *mut glib::GArray;
    pub fn atspi_collection_get_matches_from(collection: *mut AtspiCollection, current_object: *mut AtspiAccessible, rule: *mut AtspiMatchRule, sortby: AtspiCollectionSortOrder, tree: AtspiCollectionTreeTraversalType, count: c_int, traverse: gboolean, error: *mut *mut glib::GError) -> *mut glib::GArray;
    pub fn atspi_collection_get_matches_to(collection: *mut AtspiCollection, current_object: *mut AtspiAccessible, rule: *mut AtspiMatchRule, sortby: AtspiCollectionSortOrder, tree: AtspiCollectionTreeTraversalType, limit_scope: gboolean, count: c_int, traverse: gboolean, error: *mut *mut glib::GError) -> *mut glib::GArray;
    pub fn atspi_collection_is_ancestor_of(collection: *mut AtspiCollection, test: *mut AtspiAccessible, error: *mut *mut glib::GError) -> gboolean;

    //=========================================================================
    // AtspiComponent
    //=========================================================================
    pub fn atspi_component_get_type() -> GType;
    pub fn atspi_component_contains(obj: *mut AtspiComponent, x: c_int, y: c_int, ctype: AtspiCoordType, error: *mut *mut glib::GError) -> gboolean;
    pub fn atspi_component_get_accessible_at_point(obj: *mut AtspiComponent, x: c_int, y: c_int, ctype: AtspiCoordType, error: *mut *mut glib::GError) -> *mut AtspiAccessible;
    pub fn atspi_component_get_alpha(obj: *mut AtspiComponent, error: *mut *mut glib::GError) -> c_double;
    pub fn atspi_component_get_extents(obj: *mut AtspiComponent, ctype: AtspiCoordType, error: *mut *mut glib::GError) -> *mut AtspiRect;
    pub fn atspi_component_get_layer(obj: *mut AtspiComponent, error: *mut *mut glib::GError) -> AtspiComponentLayer;
    pub fn atspi_component_get_mdi_z_order(obj: *mut AtspiComponent, error: *mut *mut glib::GError) -> c_short;
    pub fn atspi_component_get_position(obj: *mut AtspiComponent, ctype: AtspiCoordType, error: *mut *mut glib::GError) -> *mut AtspiPoint;
    pub fn atspi_component_get_size(obj: *mut AtspiComponent, error: *mut *mut glib::GError) -> *mut AtspiPoint;
    pub fn atspi_component_grab_focus(obj: *mut AtspiComponent, error: *mut *mut glib::GError) -> gboolean;
    pub fn atspi_component_scroll_to(obj: *mut AtspiComponent, type_: AtspiScrollType, error: *mut *mut glib::GError) -> gboolean;
    pub fn atspi_component_scroll_to_point(obj: *mut AtspiComponent, coords: AtspiCoordType, x: c_int, y: c_int, error: *mut *mut glib::GError) -> gboolean;
    pub fn atspi_component_set_extents(obj: *mut AtspiComponent, x: c_int, y: c_int, width: c_int, height: c_int, ctype: AtspiCoordType, error: *mut *mut glib::GError) -> gboolean;
    pub fn atspi_component_set_position(obj: *mut AtspiComponent, x: c_int, y: c_int, ctype: AtspiCoordType, error: *mut *mut glib::GError) -> gboolean;
    pub fn atspi_component_set_size(obj: *mut AtspiComponent, width: c_int, height: c_int, error: *mut *mut glib::GError) -> gboolean;

    //=========================================================================
    // AtspiDocument
    //=========================================================================
    pub fn atspi_document_get_type() -> GType;
    pub fn atspi_document_get_attribute_value(obj: *mut AtspiDocument, attribute: *mut c_char, error: *mut *mut glib::GError) -> *mut c_char;
    pub fn atspi_document_get_attributes(obj: *mut AtspiDocument, error: *mut *mut glib::GError) -> *mut glib::GHashTable;
    pub fn atspi_document_get_current_page_number(obj: *mut AtspiDocument, error: *mut *mut glib::GError) -> c_int;
    pub fn atspi_document_get_document_attribute_value(obj: *mut AtspiDocument, attribute: *mut c_char, error: *mut *mut glib::GError) -> *mut c_char;
    pub fn atspi_document_get_document_attributes(obj: *mut AtspiDocument, error: *mut *mut glib::GError) -> *mut glib::GHashTable;
    pub fn atspi_document_get_locale(obj: *mut AtspiDocument, error: *mut *mut glib::GError) -> *mut c_char;
    pub fn atspi_document_get_page_count(obj: *mut AtspiDocument, error: *mut *mut glib::GError) -> c_int;

    //=========================================================================
    // AtspiEditableText
    //=========================================================================
    pub fn atspi_editable_text_get_type() -> GType;
    pub fn atspi_editable_text_copy_text(obj: *mut AtspiEditableText, start_pos: c_int, end_pos: c_int, error: *mut *mut glib::GError) -> gboolean;
    pub fn atspi_editable_text_cut_text(obj: *mut AtspiEditableText, start_pos: c_int, end_pos: c_int, error: *mut *mut glib::GError) -> gboolean;
    pub fn atspi_editable_text_delete_text(obj: *mut AtspiEditableText, start_pos: c_int, end_pos: c_int, error: *mut *mut glib::GError) -> gboolean;
    pub fn atspi_editable_text_insert_text(obj: *mut AtspiEditableText, position: c_int, text: *const c_char, length: c_int, error: *mut *mut glib::GError) -> gboolean;
    pub fn atspi_editable_text_paste_text(obj: *mut AtspiEditableText, position: c_int, error: *mut *mut glib::GError) -> gboolean;
    pub fn atspi_editable_text_set_text_contents(obj: *mut AtspiEditableText, new_contents: *const c_char, error: *mut *mut glib::GError) -> gboolean;

    //=========================================================================
    // AtspiHypertext
    //=========================================================================
    pub fn atspi_hypertext_get_type() -> GType;
    pub fn atspi_hypertext_get_link(obj: *mut AtspiHypertext, link_index: c_int, error: *mut *mut glib::GError) -> *mut AtspiHyperlink;
    pub fn atspi_hypertext_get_link_index(obj: *mut AtspiHypertext, character_offset: c_int, error: *mut *mut glib::GError) -> c_int;
    pub fn atspi_hypertext_get_n_links(obj: *mut AtspiHypertext, error: *mut *mut glib::GError) -> c_int;

    //=========================================================================
    // AtspiImage
    //=========================================================================
    pub fn atspi_image_get_type() -> GType;
    pub fn atspi_image_get_image_description(obj: *mut AtspiImage, error: *mut *mut glib::GError) -> *mut c_char;
    pub fn atspi_image_get_image_extents(obj: *mut AtspiImage, ctype: AtspiCoordType, error: *mut *mut glib::GError) -> *mut AtspiRect;
    pub fn atspi_image_get_image_locale(obj: *mut AtspiImage, error: *mut *mut glib::GError) -> *mut c_char;
    pub fn atspi_image_get_image_position(obj: *mut AtspiImage, ctype: AtspiCoordType, error: *mut *mut glib::GError) -> *mut AtspiPoint;
    pub fn atspi_image_get_image_size(obj: *mut AtspiImage, error: *mut *mut glib::GError) -> *mut AtspiPoint;

    //=========================================================================
    // AtspiSelection
    //=========================================================================
    pub fn atspi_selection_get_type() -> GType;
    pub fn atspi_selection_clear_selection(obj: *mut AtspiSelection, error: *mut *mut glib::GError) -> gboolean;
    pub fn atspi_selection_deselect_child(obj: *mut AtspiSelection, child_index: c_int, error: *mut *mut glib::GError) -> gboolean;
    pub fn atspi_selection_deselect_selected_child(obj: *mut AtspiSelection, selected_child_index: c_int, error: *mut *mut glib::GError) -> gboolean;
    pub fn atspi_selection_get_n_selected_children(obj: *mut AtspiSelection, error: *mut *mut glib::GError) -> c_int;
    pub fn atspi_selection_get_selected_child(obj: *mut AtspiSelection, selected_child_index: c_int, error: *mut *mut glib::GError) -> *mut AtspiAccessible;
    pub fn atspi_selection_is_child_selected(obj: *mut AtspiSelection, child_index: c_int, error: *mut *mut glib::GError) -> gboolean;
    pub fn atspi_selection_select_all(obj: *mut AtspiSelection, error: *mut *mut glib::GError) -> gboolean;
    pub fn atspi_selection_select_child(obj: *mut AtspiSelection, child_index: c_int, error: *mut *mut glib::GError) -> gboolean;

    //=========================================================================
    // AtspiTable
    //=========================================================================
    pub fn atspi_table_get_type() -> GType;
    pub fn atspi_table_add_column_selection(obj: *mut AtspiTable, column: c_int, error: *mut *mut glib::GError) -> gboolean;
    pub fn atspi_table_add_row_selection(obj: *mut AtspiTable, row: c_int, error: *mut *mut glib::GError) -> gboolean;
    pub fn atspi_table_get_accessible_at(obj: *mut AtspiTable, row: c_int, column: c_int, error: *mut *mut glib::GError) -> *mut AtspiAccessible;
    pub fn atspi_table_get_caption(obj: *mut AtspiTable, error: *mut *mut glib::GError) -> *mut AtspiAccessible;
    pub fn atspi_table_get_column_at_index(obj: *mut AtspiTable, index: c_int, error: *mut *mut glib::GError) -> c_int;
    pub fn atspi_table_get_column_description(obj: *mut AtspiTable, column: c_int, error: *mut *mut glib::GError) -> *mut c_char;
    pub fn atspi_table_get_column_extent_at(obj: *mut AtspiTable, row: c_int, column: c_int, error: *mut *mut glib::GError) -> c_int;
    pub fn atspi_table_get_column_header(obj: *mut AtspiTable, column: c_int, error: *mut *mut glib::GError) -> *mut AtspiAccessible;
    pub fn atspi_table_get_index_at(obj: *mut AtspiTable, row: c_int, column: c_int, error: *mut *mut glib::GError) -> c_int;
    pub fn atspi_table_get_n_columns(obj: *mut AtspiTable, error: *mut *mut glib::GError) -> c_int;
    pub fn atspi_table_get_n_rows(obj: *mut AtspiTable, error: *mut *mut glib::GError) -> c_int;
    pub fn atspi_table_get_n_selected_columns(obj: *mut AtspiTable, error: *mut *mut glib::GError) -> c_int;
    pub fn atspi_table_get_n_selected_rows(obj: *mut AtspiTable, error: *mut *mut glib::GError) -> c_int;
    pub fn atspi_table_get_row_at_index(obj: *mut AtspiTable, index: c_int, error: *mut *mut glib::GError) -> c_int;
    pub fn atspi_table_get_row_column_extents_at_index(obj: *mut AtspiTable, index: c_int, row: *mut c_int, col: *mut c_int, row_extents: *mut c_int, col_extents: *mut c_int, is_selected: *mut gboolean, error: *mut *mut glib::GError) -> gboolean;
    pub fn atspi_table_get_row_description(obj: *mut AtspiTable, row: c_int, error: *mut *mut glib::GError) -> *mut c_char;
    pub fn atspi_table_get_row_extent_at(obj: *mut AtspiTable, row: c_int, column: c_int, error: *mut *mut glib::GError) -> c_int;
    pub fn atspi_table_get_row_header(obj: *mut AtspiTable, row: c_int, error: *mut *mut glib::GError) -> *mut AtspiAccessible;
    pub fn atspi_table_get_selected_columns(obj: *mut AtspiTable, error: *mut *mut glib::GError) -> *mut glib::GArray;
    pub fn atspi_table_get_selected_rows(obj: *mut AtspiTable, error: *mut *mut glib::GError) -> *mut glib::GArray;
    pub fn atspi_table_get_summary(obj: *mut AtspiTable, error: *mut *mut glib::GError) -> *mut AtspiAccessible;
    pub fn atspi_table_is_column_selected(obj: *mut AtspiTable, column: c_int, error: *mut *mut glib::GError) -> gboolean;
    pub fn atspi_table_is_row_selected(obj: *mut AtspiTable, row: c_int, error: *mut *mut glib::GError) -> gboolean;
    pub fn atspi_table_is_selected(obj: *mut AtspiTable, row: c_int, column: c_int, error: *mut *mut glib::GError) -> gboolean;
    pub fn atspi_table_remove_column_selection(obj: *mut AtspiTable, column: c_int, error: *mut *mut glib::GError) -> gboolean;
    pub fn atspi_table_remove_row_selection(obj: *mut AtspiTable, row: c_int, error: *mut *mut glib::GError) -> gboolean;

    //=========================================================================
    // AtspiTableCell
    //=========================================================================
    pub fn atspi_table_cell_get_type() -> GType;
    pub fn atspi_table_cell_get_column_header_cells(obj: *mut AtspiTableCell, error: *mut *mut glib::GError) -> *mut glib::GPtrArray;
    pub fn atspi_table_cell_get_column_index(obj: *mut AtspiTableCell, error: *mut *mut glib::GError) -> c_int;
    pub fn atspi_table_cell_get_column_span(obj: *mut AtspiTableCell, error: *mut *mut glib::GError) -> c_int;
    pub fn atspi_table_cell_get_position(obj: *mut AtspiTableCell, row: *mut c_int, column: *mut c_int, error: *mut *mut glib::GError) -> c_int;
    pub fn atspi_table_cell_get_row_column_span(obj: *mut AtspiTableCell, row: *mut c_int, column: *mut c_int, row_span: *mut c_int, column_span: *mut c_int, error: *mut *mut glib::GError);
    pub fn atspi_table_cell_get_row_header_cells(obj: *mut AtspiTableCell, error: *mut *mut glib::GError) -> *mut glib::GPtrArray;
    pub fn atspi_table_cell_get_row_span(obj: *mut AtspiTableCell, error: *mut *mut glib::GError) -> c_int;
    pub fn atspi_table_cell_get_table(obj: *mut AtspiTableCell, error: *mut *mut glib::GError) -> *mut AtspiAccessible;

    //=========================================================================
    // AtspiText
    //=========================================================================
    pub fn atspi_text_get_type() -> GType;
    pub fn atspi_text_add_selection(obj: *mut AtspiText, start_offset: c_int, end_offset: c_int, error: *mut *mut glib::GError) -> gboolean;
    pub fn atspi_text_get_attribute_run(obj: *mut AtspiText, offset: c_int, include_defaults: gboolean, start_offset: *mut c_int, end_offset: *mut c_int, error: *mut *mut glib::GError) -> *mut glib::GHashTable;
    pub fn atspi_text_get_attribute_value(obj: *mut AtspiText, offset: c_int, attribute_name: *mut c_char, error: *mut *mut glib::GError) -> *mut c_char;
    pub fn atspi_text_get_attributes(obj: *mut AtspiText, offset: c_int, start_offset: *mut c_int, end_offset: *mut c_int, error: *mut *mut glib::GError) -> *mut glib::GHashTable;
    pub fn atspi_text_get_bounded_ranges(obj: *mut AtspiText, x: c_int, y: c_int, width: c_int, height: c_int, type_: AtspiCoordType, clipTypeX: AtspiTextClipType, clipTypeY: AtspiTextClipType, error: *mut *mut glib::GError) -> *mut glib::GArray;
    pub fn atspi_text_get_caret_offset(obj: *mut AtspiText, error: *mut *mut glib::GError) -> c_int;
    pub fn atspi_text_get_character_at_offset(obj: *mut AtspiText, offset: c_int, error: *mut *mut glib::GError) -> c_uint;
    pub fn atspi_text_get_character_count(obj: *mut AtspiText, error: *mut *mut glib::GError) -> c_int;
    pub fn atspi_text_get_character_extents(obj: *mut AtspiText, offset: c_int, type_: AtspiCoordType, error: *mut *mut glib::GError) -> *mut AtspiRect;
    pub fn atspi_text_get_default_attributes(obj: *mut AtspiText, error: *mut *mut glib::GError) -> *mut glib::GHashTable;
    pub fn atspi_text_get_n_selections(obj: *mut AtspiText, error: *mut *mut glib::GError) -> c_int;
    pub fn atspi_text_get_offset_at_point(obj: *mut AtspiText, x: c_int, y: c_int, type_: AtspiCoordType, error: *mut *mut glib::GError) -> c_int;
    pub fn atspi_text_get_range_extents(obj: *mut AtspiText, start_offset: c_int, end_offset: c_int, type_: AtspiCoordType, error: *mut *mut glib::GError) -> *mut AtspiRect;
    pub fn atspi_text_get_selection(obj: *mut AtspiText, selection_num: c_int, error: *mut *mut glib::GError) -> *mut AtspiRange;
    #[cfg(any(feature = "v2_9_90", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v2_9_90")))]
    pub fn atspi_text_get_string_at_offset(obj: *mut AtspiText, offset: c_int, granularity: AtspiTextGranularity, error: *mut *mut glib::GError) -> *mut AtspiTextRange;
    pub fn atspi_text_get_text(obj: *mut AtspiText, start_offset: c_int, end_offset: c_int, error: *mut *mut glib::GError) -> *mut c_char;
    pub fn atspi_text_get_text_after_offset(obj: *mut AtspiText, offset: c_int, type_: AtspiTextBoundaryType, error: *mut *mut glib::GError) -> *mut AtspiTextRange;
    pub fn atspi_text_get_text_at_offset(obj: *mut AtspiText, offset: c_int, type_: AtspiTextBoundaryType, error: *mut *mut glib::GError) -> *mut AtspiTextRange;
    pub fn atspi_text_get_text_attribute_value(obj: *mut AtspiText, offset: c_int, attribute_name: *mut c_char, error: *mut *mut glib::GError) -> *mut c_char;
    pub fn atspi_text_get_text_attributes(obj: *mut AtspiText, offset: c_int, start_offset: *mut c_int, end_offset: *mut c_int, error: *mut *mut glib::GError) -> *mut glib::GHashTable;
    pub fn atspi_text_get_text_before_offset(obj: *mut AtspiText, offset: c_int, type_: AtspiTextBoundaryType, error: *mut *mut glib::GError) -> *mut AtspiTextRange;
    pub fn atspi_text_remove_selection(obj: *mut AtspiText, selection_num: c_int, error: *mut *mut glib::GError) -> gboolean;
    pub fn atspi_text_scroll_substring_to(obj: *mut AtspiText, start_offset: c_int, end_offset: c_int, type_: AtspiScrollType, error: *mut *mut glib::GError) -> gboolean;
    pub fn atspi_text_scroll_substring_to_point(obj: *mut AtspiText, start_offset: c_int, end_offset: c_int, coords: AtspiCoordType, x: c_int, y: c_int, error: *mut *mut glib::GError) -> gboolean;
    pub fn atspi_text_set_caret_offset(obj: *mut AtspiText, new_offset: c_int, error: *mut *mut glib::GError) -> gboolean;
    pub fn atspi_text_set_selection(obj: *mut AtspiText, selection_num: c_int, start_offset: c_int, end_offset: c_int, error: *mut *mut glib::GError) -> gboolean;

    //=========================================================================
    // AtspiValue
    //=========================================================================
    pub fn atspi_value_get_type() -> GType;
    pub fn atspi_value_get_current_value(obj: *mut AtspiValue, error: *mut *mut glib::GError) -> c_double;
    pub fn atspi_value_get_maximum_value(obj: *mut AtspiValue, error: *mut *mut glib::GError) -> c_double;
    pub fn atspi_value_get_minimum_increment(obj: *mut AtspiValue, error: *mut *mut glib::GError) -> c_double;
    pub fn atspi_value_get_minimum_value(obj: *mut AtspiValue, error: *mut *mut glib::GError) -> c_double;
    pub fn atspi_value_set_current_value(obj: *mut AtspiValue, new_value: c_double, error: *mut *mut glib::GError) -> gboolean;

    //=========================================================================
    // Other functions
    //=========================================================================
    pub fn atspi_dbus_connection_setup_with_g_main(connection: *mut dbus::DBusConnection, context: *mut glib::GMainContext);
    pub fn atspi_deregister_device_event_listener(listener: *mut AtspiDeviceListener, filter: *mut c_void, error: *mut *mut glib::GError) -> gboolean;
    pub fn atspi_deregister_keystroke_listener(listener: *mut AtspiDeviceListener, key_set: *mut glib::GArray, modmask: AtspiKeyMaskType, event_types: AtspiKeyEventMask, error: *mut *mut glib::GError) -> gboolean;
    pub fn atspi_exit() -> c_int;
    pub fn atspi_generate_keyboard_event(keyval: c_long, keystring: *const c_char, synth_type: AtspiKeySynthType, error: *mut *mut glib::GError) -> gboolean;
    pub fn atspi_generate_mouse_event(x: c_long, y: c_long, name: *const c_char, error: *mut *mut glib::GError) -> gboolean;
    pub fn atspi_get_a11y_bus() -> *mut dbus::DBusConnection;
    pub fn atspi_get_desktop(i: c_int) -> *mut AtspiAccessible;
    pub fn atspi_get_desktop_count() -> c_int;
    pub fn atspi_get_desktop_list() -> *mut glib::GArray;
    pub fn atspi_init() -> c_int;
    pub fn atspi_is_initialized() -> gboolean;
    pub fn atspi_register_device_event_listener(listener: *mut AtspiDeviceListener, event_types: AtspiDeviceEventMask, filter: *mut c_void, error: *mut *mut glib::GError) -> gboolean;
    pub fn atspi_register_keystroke_listener(listener: *mut AtspiDeviceListener, key_set: *mut glib::GArray, modmask: AtspiKeyMaskType, event_types: AtspiKeyEventMask, sync_type: AtspiKeyListenerSyncType, error: *mut *mut glib::GError) -> gboolean;
    pub fn atspi_set_main_context(cnx: *mut glib::GMainContext);
    pub fn atspi_set_reference_window(accessible: *mut AtspiAccessible);
    pub fn atspi_set_timeout(val: c_int, startup_time: c_int);

}
