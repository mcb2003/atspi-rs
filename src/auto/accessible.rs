// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files
// DO NOT EDIT

use glib::object::Cast;
use glib::object::IsA;
use glib::signal::connect_raw;
use glib::signal::SignalHandlerId;
use glib::translate::*;
use std::boxed::Box as Box_;
use std::fmt;
use std::mem::transmute;

glib::wrapper! {
    #[doc(alias = "AtspiAccessible")]
    pub struct Accessible(Object<ffi::AtspiAccessible, ffi::AtspiAccessibleClass>);

    match fn {
        type_ => || ffi::atspi_accessible_get_type(),
    }
}

pub const NONE_ACCESSIBLE: Option<&Accessible> = None;

pub trait AccessibleExt: 'static {
    #[doc(alias = "atspi_accessible_clear_cache")]
    fn clear_cache(&self);

    //#[cfg(any(feature = "v2_34", feature = "dox"))]
    //#[cfg_attr(feature = "dox", doc(cfg(feature = "v2_34")))]
    //#[doc(alias = "atspi_accessible_get_accessible_id")]
    //#[doc(alias = "get_accessible_id")]
    //fn accessible_id(&self, error: /*Ignored*/Option<glib::Error>) -> Option<glib::GString>;

    //#[cfg_attr(feature = "v2_10", deprecated = "Since 2.10")]
    //#[doc(alias = "atspi_accessible_get_action")]
    //#[doc(alias = "get_action")]
    //fn action(&self) -> /*Ignored*/Option<Action>;

    //#[doc(alias = "atspi_accessible_get_action_iface")]
    //#[doc(alias = "get_action_iface")]
    //fn action_iface(&self) -> /*Ignored*/Option<Action>;

    //#[doc(alias = "atspi_accessible_get_application")]
    //#[doc(alias = "get_application")]
    //fn application(&self, error: /*Ignored*/Option<glib::Error>) -> Option<Accessible>;

    //#[doc(alias = "atspi_accessible_get_atspi_version")]
    //#[doc(alias = "get_atspi_version")]
    //fn atspi_version(&self, error: /*Ignored*/Option<glib::Error>) -> Option<glib::GString>;

    //#[doc(alias = "atspi_accessible_get_attributes")]
    //#[doc(alias = "get_attributes")]
    //fn attributes(&self, error: /*Ignored*/Option<glib::Error>) -> /*Unknown conversion*//*Unimplemented*/HashTable TypeId { ns_id: 0, id: 28 }/TypeId { ns_id: 0, id: 28 };

    //#[doc(alias = "atspi_accessible_get_attributes_as_array")]
    //#[doc(alias = "get_attributes_as_array")]
    //fn attributes_as_array(&self, error: /*Ignored*/Option<glib::Error>) -> /*Unknown conversion*//*Unimplemented*/Array TypeId { ns_id: 0, id: 28 };

    //#[doc(alias = "atspi_accessible_get_child_at_index")]
    //#[doc(alias = "get_child_at_index")]
    //fn child_at_index(&self, child_index: i32, error: /*Ignored*/Option<glib::Error>) -> Option<Accessible>;

    //#[doc(alias = "atspi_accessible_get_child_count")]
    //#[doc(alias = "get_child_count")]
    //fn child_count(&self, error: /*Ignored*/Option<glib::Error>) -> i32;

    //#[cfg_attr(feature = "v2_10", deprecated = "Since 2.10")]
    //#[doc(alias = "atspi_accessible_get_collection")]
    //#[doc(alias = "get_collection")]
    //fn collection(&self) -> /*Ignored*/Option<Collection>;

    //#[doc(alias = "atspi_accessible_get_collection_iface")]
    //#[doc(alias = "get_collection_iface")]
    //fn collection_iface(&self) -> /*Ignored*/Option<Collection>;

    //#[cfg_attr(feature = "v2_10", deprecated = "Since 2.10")]
    //#[doc(alias = "atspi_accessible_get_component")]
    //#[doc(alias = "get_component")]
    //fn component(&self) -> /*Ignored*/Option<Component>;

    //#[doc(alias = "atspi_accessible_get_component_iface")]
    //#[doc(alias = "get_component_iface")]
    //fn component_iface(&self) -> /*Ignored*/Option<Component>;

    //#[doc(alias = "atspi_accessible_get_description")]
    //#[doc(alias = "get_description")]
    //fn description(&self, error: /*Ignored*/Option<glib::Error>) -> Option<glib::GString>;

    //#[cfg_attr(feature = "v2_10", deprecated = "Since 2.10")]
    //#[doc(alias = "atspi_accessible_get_document")]
    //#[doc(alias = "get_document")]
    //fn document(&self) -> /*Ignored*/Option<Document>;

    //#[doc(alias = "atspi_accessible_get_document_iface")]
    //#[doc(alias = "get_document_iface")]
    //fn document_iface(&self) -> /*Ignored*/Option<Document>;

    //#[cfg_attr(feature = "v2_10", deprecated = "Since 2.10")]
    //#[doc(alias = "atspi_accessible_get_editable_text")]
    //#[doc(alias = "get_editable_text")]
    //fn editable_text(&self) -> /*Ignored*/Option<EditableText>;

    //#[doc(alias = "atspi_accessible_get_editable_text_iface")]
    //#[doc(alias = "get_editable_text_iface")]
    //fn editable_text_iface(&self) -> /*Ignored*/Option<EditableText>;

    //#[doc(alias = "atspi_accessible_get_hyperlink")]
    //#[doc(alias = "get_hyperlink")]
    //fn hyperlink(&self) -> /*Ignored*/Option<Hyperlink>;

    //#[cfg_attr(feature = "v2_10", deprecated = "Since 2.10")]
    //#[doc(alias = "atspi_accessible_get_hypertext")]
    //#[doc(alias = "get_hypertext")]
    //fn hypertext(&self) -> /*Ignored*/Option<Hypertext>;

    //#[doc(alias = "atspi_accessible_get_hypertext_iface")]
    //#[doc(alias = "get_hypertext_iface")]
    //fn hypertext_iface(&self) -> /*Ignored*/Option<Hypertext>;

    //#[doc(alias = "atspi_accessible_get_id")]
    //#[doc(alias = "get_id")]
    //fn id(&self, error: /*Ignored*/Option<glib::Error>) -> i32;

    //#[cfg_attr(feature = "v2_10", deprecated = "Since 2.10")]
    //#[doc(alias = "atspi_accessible_get_image")]
    //#[doc(alias = "get_image")]
    //fn image(&self) -> /*Ignored*/Option<Image>;

    //#[doc(alias = "atspi_accessible_get_image_iface")]
    //#[doc(alias = "get_image_iface")]
    //fn image_iface(&self) -> /*Ignored*/Option<Image>;

    //#[doc(alias = "atspi_accessible_get_index_in_parent")]
    //#[doc(alias = "get_index_in_parent")]
    //fn index_in_parent(&self, error: /*Ignored*/Option<glib::Error>) -> i32;

    //#[doc(alias = "atspi_accessible_get_interfaces")]
    //#[doc(alias = "get_interfaces")]
    //fn interfaces(&self) -> /*Unknown conversion*//*Unimplemented*/Array TypeId { ns_id: 0, id: 28 };

    //#[doc(alias = "atspi_accessible_get_localized_role_name")]
    //#[doc(alias = "get_localized_role_name")]
    //fn localized_role_name(&self, error: /*Ignored*/Option<glib::Error>) -> Option<glib::GString>;

    //#[doc(alias = "atspi_accessible_get_name")]
    //#[doc(alias = "get_name")]
    //fn name(&self, error: /*Ignored*/Option<glib::Error>) -> Option<glib::GString>;

    //#[doc(alias = "atspi_accessible_get_object_locale")]
    //#[doc(alias = "get_object_locale")]
    //fn object_locale(&self, error: /*Ignored*/Option<glib::Error>) -> Option<glib::GString>;

    //#[doc(alias = "atspi_accessible_get_parent")]
    //#[doc(alias = "get_parent")]
    //fn parent(&self, error: /*Ignored*/Option<glib::Error>) -> Option<Accessible>;

    //#[doc(alias = "atspi_accessible_get_process_id")]
    //#[doc(alias = "get_process_id")]
    //fn process_id(&self, error: /*Ignored*/Option<glib::Error>) -> u32;

    //#[doc(alias = "atspi_accessible_get_relation_set")]
    //#[doc(alias = "get_relation_set")]
    //fn relation_set(&self, error: /*Ignored*/Option<glib::Error>) -> /*Unknown conversion*//*Unimplemented*/Array TypeId { ns_id: 1, id: 19 };

    //#[doc(alias = "atspi_accessible_get_role")]
    //#[doc(alias = "get_role")]
    //fn role(&self, error: /*Ignored*/Option<glib::Error>) -> /*Ignored*/Role;

    //#[doc(alias = "atspi_accessible_get_role_name")]
    //#[doc(alias = "get_role_name")]
    //fn role_name(&self, error: /*Ignored*/Option<glib::Error>) -> Option<glib::GString>;

    //#[cfg_attr(feature = "v2_10", deprecated = "Since 2.10")]
    //#[doc(alias = "atspi_accessible_get_selection")]
    //#[doc(alias = "get_selection")]
    //fn selection(&self) -> /*Ignored*/Option<Selection>;

    //#[doc(alias = "atspi_accessible_get_selection_iface")]
    //#[doc(alias = "get_selection_iface")]
    //fn selection_iface(&self) -> /*Ignored*/Option<Selection>;

    //#[doc(alias = "atspi_accessible_get_state_set")]
    //#[doc(alias = "get_state_set")]
    //fn state_set(&self) -> /*Ignored*/Option<StateSet>;

    //#[cfg_attr(feature = "v2_10", deprecated = "Since 2.10")]
    //#[doc(alias = "atspi_accessible_get_table")]
    //#[doc(alias = "get_table")]
    //fn table(&self) -> /*Ignored*/Option<Table>;

    //#[doc(alias = "atspi_accessible_get_table_cell")]
    //#[doc(alias = "get_table_cell")]
    //fn table_cell(&self) -> /*Ignored*/Option<TableCell>;

    //#[doc(alias = "atspi_accessible_get_table_iface")]
    //#[doc(alias = "get_table_iface")]
    //fn table_iface(&self) -> /*Ignored*/Option<Table>;

    //#[cfg_attr(feature = "v2_10", deprecated = "Since 2.10")]
    //#[doc(alias = "atspi_accessible_get_text")]
    //#[doc(alias = "get_text")]
    //fn text(&self) -> /*Ignored*/Option<Text>;

    //#[doc(alias = "atspi_accessible_get_text_iface")]
    //#[doc(alias = "get_text_iface")]
    //fn text_iface(&self) -> /*Ignored*/Option<Text>;

    //#[doc(alias = "atspi_accessible_get_toolkit_name")]
    //#[doc(alias = "get_toolkit_name")]
    //fn toolkit_name(&self, error: /*Ignored*/Option<glib::Error>) -> Option<glib::GString>;

    //#[doc(alias = "atspi_accessible_get_toolkit_version")]
    //#[doc(alias = "get_toolkit_version")]
    //fn toolkit_version(&self, error: /*Ignored*/Option<glib::Error>) -> Option<glib::GString>;

    //#[cfg_attr(feature = "v2_10", deprecated = "Since 2.10")]
    //#[doc(alias = "atspi_accessible_get_value")]
    //#[doc(alias = "get_value")]
    //fn value(&self) -> /*Ignored*/Option<Value>;

    //#[doc(alias = "atspi_accessible_get_value_iface")]
    //#[doc(alias = "get_value_iface")]
    //fn value_iface(&self) -> /*Ignored*/Option<Value>;

    //#[doc(alias = "atspi_accessible_set_cache_mask")]
    //fn set_cache_mask(&self, mask: /*Ignored*/Cache);

    #[doc(alias = "mode-changed")]
    fn connect_mode_changed<F: Fn(&Self, i32, &str) + 'static>(&self, detail: Option<&str>, f: F) -> SignalHandlerId;

    #[doc(alias = "region-changed")]
    fn connect_region_changed<F: Fn(&Self, i32, i32) + 'static>(&self, f: F) -> SignalHandlerId;
}

impl<O: IsA<Accessible>> AccessibleExt for O {
    fn clear_cache(&self) {
        unsafe {
            ffi::atspi_accessible_clear_cache(self.as_ref().to_glib_none().0);
        }
    }

    //#[cfg(any(feature = "v2_34", feature = "dox"))]
    //#[cfg_attr(feature = "dox", doc(cfg(feature = "v2_34")))]
    //fn accessible_id(&self, error: /*Ignored*/Option<glib::Error>) -> Option<glib::GString> {
    //    unsafe { TODO: call ffi:atspi_accessible_get_accessible_id() }
    //}

    //fn action(&self) -> /*Ignored*/Option<Action> {
    //    unsafe { TODO: call ffi:atspi_accessible_get_action() }
    //}

    //fn action_iface(&self) -> /*Ignored*/Option<Action> {
    //    unsafe { TODO: call ffi:atspi_accessible_get_action_iface() }
    //}

    //fn application(&self, error: /*Ignored*/Option<glib::Error>) -> Option<Accessible> {
    //    unsafe { TODO: call ffi:atspi_accessible_get_application() }
    //}

    //fn atspi_version(&self, error: /*Ignored*/Option<glib::Error>) -> Option<glib::GString> {
    //    unsafe { TODO: call ffi:atspi_accessible_get_atspi_version() }
    //}

    //fn attributes(&self, error: /*Ignored*/Option<glib::Error>) -> /*Unknown conversion*//*Unimplemented*/HashTable TypeId { ns_id: 0, id: 28 }/TypeId { ns_id: 0, id: 28 } {
    //    unsafe { TODO: call ffi:atspi_accessible_get_attributes() }
    //}

    //fn attributes_as_array(&self, error: /*Ignored*/Option<glib::Error>) -> /*Unknown conversion*//*Unimplemented*/Array TypeId { ns_id: 0, id: 28 } {
    //    unsafe { TODO: call ffi:atspi_accessible_get_attributes_as_array() }
    //}

    //fn child_at_index(&self, child_index: i32, error: /*Ignored*/Option<glib::Error>) -> Option<Accessible> {
    //    unsafe { TODO: call ffi:atspi_accessible_get_child_at_index() }
    //}

    //fn child_count(&self, error: /*Ignored*/Option<glib::Error>) -> i32 {
    //    unsafe { TODO: call ffi:atspi_accessible_get_child_count() }
    //}

    //fn collection(&self) -> /*Ignored*/Option<Collection> {
    //    unsafe { TODO: call ffi:atspi_accessible_get_collection() }
    //}

    //fn collection_iface(&self) -> /*Ignored*/Option<Collection> {
    //    unsafe { TODO: call ffi:atspi_accessible_get_collection_iface() }
    //}

    //fn component(&self) -> /*Ignored*/Option<Component> {
    //    unsafe { TODO: call ffi:atspi_accessible_get_component() }
    //}

    //fn component_iface(&self) -> /*Ignored*/Option<Component> {
    //    unsafe { TODO: call ffi:atspi_accessible_get_component_iface() }
    //}

    //fn description(&self, error: /*Ignored*/Option<glib::Error>) -> Option<glib::GString> {
    //    unsafe { TODO: call ffi:atspi_accessible_get_description() }
    //}

    //fn document(&self) -> /*Ignored*/Option<Document> {
    //    unsafe { TODO: call ffi:atspi_accessible_get_document() }
    //}

    //fn document_iface(&self) -> /*Ignored*/Option<Document> {
    //    unsafe { TODO: call ffi:atspi_accessible_get_document_iface() }
    //}

    //fn editable_text(&self) -> /*Ignored*/Option<EditableText> {
    //    unsafe { TODO: call ffi:atspi_accessible_get_editable_text() }
    //}

    //fn editable_text_iface(&self) -> /*Ignored*/Option<EditableText> {
    //    unsafe { TODO: call ffi:atspi_accessible_get_editable_text_iface() }
    //}

    //fn hyperlink(&self) -> /*Ignored*/Option<Hyperlink> {
    //    unsafe { TODO: call ffi:atspi_accessible_get_hyperlink() }
    //}

    //fn hypertext(&self) -> /*Ignored*/Option<Hypertext> {
    //    unsafe { TODO: call ffi:atspi_accessible_get_hypertext() }
    //}

    //fn hypertext_iface(&self) -> /*Ignored*/Option<Hypertext> {
    //    unsafe { TODO: call ffi:atspi_accessible_get_hypertext_iface() }
    //}

    //fn id(&self, error: /*Ignored*/Option<glib::Error>) -> i32 {
    //    unsafe { TODO: call ffi:atspi_accessible_get_id() }
    //}

    //fn image(&self) -> /*Ignored*/Option<Image> {
    //    unsafe { TODO: call ffi:atspi_accessible_get_image() }
    //}

    //fn image_iface(&self) -> /*Ignored*/Option<Image> {
    //    unsafe { TODO: call ffi:atspi_accessible_get_image_iface() }
    //}

    //fn index_in_parent(&self, error: /*Ignored*/Option<glib::Error>) -> i32 {
    //    unsafe { TODO: call ffi:atspi_accessible_get_index_in_parent() }
    //}

    //fn interfaces(&self) -> /*Unknown conversion*//*Unimplemented*/Array TypeId { ns_id: 0, id: 28 } {
    //    unsafe { TODO: call ffi:atspi_accessible_get_interfaces() }
    //}

    //fn localized_role_name(&self, error: /*Ignored*/Option<glib::Error>) -> Option<glib::GString> {
    //    unsafe { TODO: call ffi:atspi_accessible_get_localized_role_name() }
    //}

    //fn name(&self, error: /*Ignored*/Option<glib::Error>) -> Option<glib::GString> {
    //    unsafe { TODO: call ffi:atspi_accessible_get_name() }
    //}

    //fn object_locale(&self, error: /*Ignored*/Option<glib::Error>) -> Option<glib::GString> {
    //    unsafe { TODO: call ffi:atspi_accessible_get_object_locale() }
    //}

    //fn parent(&self, error: /*Ignored*/Option<glib::Error>) -> Option<Accessible> {
    //    unsafe { TODO: call ffi:atspi_accessible_get_parent() }
    //}

    //fn process_id(&self, error: /*Ignored*/Option<glib::Error>) -> u32 {
    //    unsafe { TODO: call ffi:atspi_accessible_get_process_id() }
    //}

    //fn relation_set(&self, error: /*Ignored*/Option<glib::Error>) -> /*Unknown conversion*//*Unimplemented*/Array TypeId { ns_id: 1, id: 19 } {
    //    unsafe { TODO: call ffi:atspi_accessible_get_relation_set() }
    //}

    //fn role(&self, error: /*Ignored*/Option<glib::Error>) -> /*Ignored*/Role {
    //    unsafe { TODO: call ffi:atspi_accessible_get_role() }
    //}

    //fn role_name(&self, error: /*Ignored*/Option<glib::Error>) -> Option<glib::GString> {
    //    unsafe { TODO: call ffi:atspi_accessible_get_role_name() }
    //}

    //fn selection(&self) -> /*Ignored*/Option<Selection> {
    //    unsafe { TODO: call ffi:atspi_accessible_get_selection() }
    //}

    //fn selection_iface(&self) -> /*Ignored*/Option<Selection> {
    //    unsafe { TODO: call ffi:atspi_accessible_get_selection_iface() }
    //}

    //fn state_set(&self) -> /*Ignored*/Option<StateSet> {
    //    unsafe { TODO: call ffi:atspi_accessible_get_state_set() }
    //}

    //fn table(&self) -> /*Ignored*/Option<Table> {
    //    unsafe { TODO: call ffi:atspi_accessible_get_table() }
    //}

    //fn table_cell(&self) -> /*Ignored*/Option<TableCell> {
    //    unsafe { TODO: call ffi:atspi_accessible_get_table_cell() }
    //}

    //fn table_iface(&self) -> /*Ignored*/Option<Table> {
    //    unsafe { TODO: call ffi:atspi_accessible_get_table_iface() }
    //}

    //fn text(&self) -> /*Ignored*/Option<Text> {
    //    unsafe { TODO: call ffi:atspi_accessible_get_text() }
    //}

    //fn text_iface(&self) -> /*Ignored*/Option<Text> {
    //    unsafe { TODO: call ffi:atspi_accessible_get_text_iface() }
    //}

    //fn toolkit_name(&self, error: /*Ignored*/Option<glib::Error>) -> Option<glib::GString> {
    //    unsafe { TODO: call ffi:atspi_accessible_get_toolkit_name() }
    //}

    //fn toolkit_version(&self, error: /*Ignored*/Option<glib::Error>) -> Option<glib::GString> {
    //    unsafe { TODO: call ffi:atspi_accessible_get_toolkit_version() }
    //}

    //fn value(&self) -> /*Ignored*/Option<Value> {
    //    unsafe { TODO: call ffi:atspi_accessible_get_value() }
    //}

    //fn value_iface(&self) -> /*Ignored*/Option<Value> {
    //    unsafe { TODO: call ffi:atspi_accessible_get_value_iface() }
    //}

    //fn set_cache_mask(&self, mask: /*Ignored*/Cache) {
    //    unsafe { TODO: call ffi:atspi_accessible_set_cache_mask() }
    //}

    fn connect_mode_changed<F: Fn(&Self, i32, &str) + 'static>(&self, detail: Option<&str>, f: F) -> SignalHandlerId {
        unsafe extern "C" fn mode_changed_trampoline<P: IsA<Accessible>, F: Fn(&P, i32, &str) + 'static>(this: *mut ffi::AtspiAccessible, arg1: libc::c_int, why: *mut libc::c_char, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(Accessible::from_glib_borrow(this).unsafe_cast_ref(), arg1, &glib::GString::from_glib_borrow(why))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            let detailed_signal_name = detail.map(|name| { format!("mode-changed::{}\0", name) });
            let signal_name: &[u8] = detailed_signal_name.as_ref().map_or(&b"mode-changed\0"[..], |n| n.as_bytes());
            connect_raw(self.as_ptr() as *mut _, signal_name.as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(mode_changed_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    fn connect_region_changed<F: Fn(&Self, i32, i32) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn region_changed_trampoline<P: IsA<Accessible>, F: Fn(&P, i32, i32) + 'static>(this: *mut ffi::AtspiAccessible, arg1: libc::c_int, arg2: libc::c_int, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(Accessible::from_glib_borrow(this).unsafe_cast_ref(), arg1, arg2)
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"region-changed\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(region_changed_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }
}

impl fmt::Display for Accessible {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        f.write_str("Accessible")
    }
}
