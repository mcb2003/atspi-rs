// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files
// DO NOT EDIT

use bitflags::bitflags;
use glib::translate::*;
use glib::value::FromValue;
use glib::value::ToValue;
use glib::StaticType;
use glib::Type;
use std::fmt;

bitflags! {
    #[doc(alias = "AtspiCache")]
    pub struct Cache: u32 {
        #[doc(alias = "ATSPI_CACHE_NONE")]
        const NONE = ffi::ATSPI_CACHE_NONE as u32;
        #[doc(alias = "ATSPI_CACHE_PARENT")]
        const PARENT = ffi::ATSPI_CACHE_PARENT as u32;
        #[doc(alias = "ATSPI_CACHE_CHILDREN")]
        const CHILDREN = ffi::ATSPI_CACHE_CHILDREN as u32;
        #[doc(alias = "ATSPI_CACHE_NAME")]
        const NAME = ffi::ATSPI_CACHE_NAME as u32;
        #[doc(alias = "ATSPI_CACHE_DESCRIPTION")]
        const DESCRIPTION = ffi::ATSPI_CACHE_DESCRIPTION as u32;
        #[doc(alias = "ATSPI_CACHE_STATES")]
        const STATES = ffi::ATSPI_CACHE_STATES as u32;
        #[doc(alias = "ATSPI_CACHE_ROLE")]
        const ROLE = ffi::ATSPI_CACHE_ROLE as u32;
        #[doc(alias = "ATSPI_CACHE_INTERFACES")]
        const INTERFACES = ffi::ATSPI_CACHE_INTERFACES as u32;
        #[doc(alias = "ATSPI_CACHE_ATTRIBUTES")]
        const ATTRIBUTES = ffi::ATSPI_CACHE_ATTRIBUTES as u32;
        #[doc(alias = "ATSPI_CACHE_ALL")]
        const ALL = ffi::ATSPI_CACHE_ALL as u32;
        #[doc(alias = "ATSPI_CACHE_DEFAULT")]
        const DEFAULT = ffi::ATSPI_CACHE_DEFAULT as u32;
        #[doc(alias = "ATSPI_CACHE_UNDEFINED")]
        const UNDEFINED = ffi::ATSPI_CACHE_UNDEFINED as u32;
    }
}

impl fmt::Display for Cache {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        <Self as fmt::Debug>::fmt(self, f)
    }
}

#[doc(hidden)]
impl IntoGlib for Cache {
    type GlibType = ffi::AtspiCache;

    fn into_glib(self) -> ffi::AtspiCache {
        self.bits()
    }
}

#[doc(hidden)]
impl FromGlib<ffi::AtspiCache> for Cache {
    unsafe fn from_glib(value: ffi::AtspiCache) -> Self {
        Self::from_bits_truncate(value)
    }
}

impl StaticType for Cache {
    fn static_type() -> Type {
        unsafe { from_glib(ffi::atspi_cache_get_type()) }
    }
}

impl glib::value::ValueType for Cache {
    type Type = Self;
}

unsafe impl<'a> FromValue<'a> for Cache {
    type Checker = glib::value::GenericValueTypeChecker<Self>;

    unsafe fn from_value(value: &'a glib::Value) -> Self {
        from_glib(glib::gobject_ffi::g_value_get_flags(value.to_glib_none().0))
    }
}

impl ToValue for Cache {
    fn to_value(&self) -> glib::Value {
        let mut value = glib::Value::for_value_type::<Self>();
        unsafe {
            glib::gobject_ffi::g_value_set_flags(value.to_glib_none_mut().0, self.into_glib());
        }
        value
    }

    fn value_type(&self) -> glib::Type {
        Self::static_type()
    }
}

bitflags! {
    #[doc(alias = "AtspiKeyListenerSyncType")]
    pub struct KeyListenerSyncType: u32 {
        #[doc(alias = "ATSPI_KEYLISTENER_NOSYNC")]
        const NOSYNC = ffi::ATSPI_KEYLISTENER_NOSYNC as u32;
        #[doc(alias = "ATSPI_KEYLISTENER_SYNCHRONOUS")]
        const SYNCHRONOUS = ffi::ATSPI_KEYLISTENER_SYNCHRONOUS as u32;
        #[doc(alias = "ATSPI_KEYLISTENER_CANCONSUME")]
        const CANCONSUME = ffi::ATSPI_KEYLISTENER_CANCONSUME as u32;
        #[doc(alias = "ATSPI_KEYLISTENER_ALL_WINDOWS")]
        const ALL_WINDOWS = ffi::ATSPI_KEYLISTENER_ALL_WINDOWS as u32;
    }
}

impl fmt::Display for KeyListenerSyncType {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        <Self as fmt::Debug>::fmt(self, f)
    }
}

#[doc(hidden)]
impl IntoGlib for KeyListenerSyncType {
    type GlibType = ffi::AtspiKeyListenerSyncType;

    fn into_glib(self) -> ffi::AtspiKeyListenerSyncType {
        self.bits()
    }
}

#[doc(hidden)]
impl FromGlib<ffi::AtspiKeyListenerSyncType> for KeyListenerSyncType {
    unsafe fn from_glib(value: ffi::AtspiKeyListenerSyncType) -> Self {
        Self::from_bits_truncate(value)
    }
}

impl StaticType for KeyListenerSyncType {
    fn static_type() -> Type {
        unsafe { from_glib(ffi::atspi_key_listener_sync_type_get_type()) }
    }
}

impl glib::value::ValueType for KeyListenerSyncType {
    type Type = Self;
}

unsafe impl<'a> FromValue<'a> for KeyListenerSyncType {
    type Checker = glib::value::GenericValueTypeChecker<Self>;

    unsafe fn from_value(value: &'a glib::Value) -> Self {
        from_glib(glib::gobject_ffi::g_value_get_flags(value.to_glib_none().0))
    }
}

impl ToValue for KeyListenerSyncType {
    fn to_value(&self) -> glib::Value {
        let mut value = glib::Value::for_value_type::<Self>();
        unsafe {
            glib::gobject_ffi::g_value_set_flags(value.to_glib_none_mut().0, self.into_glib());
        }
        value
    }

    fn value_type(&self) -> glib::Type {
        Self::static_type()
    }
}

