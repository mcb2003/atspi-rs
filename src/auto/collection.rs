// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files
// DO NOT EDIT

use crate::Accessible;
use glib::object::IsA;
use glib::translate::*;
use std::fmt;
use std::ptr;

glib::wrapper! {
    #[doc(alias = "AtspiCollection")]
    pub struct Collection(Interface<ffi::AtspiCollection>);

    match fn {
        type_ => || ffi::atspi_collection_get_type(),
    }
}

pub const NONE_COLLECTION: Option<&Collection> = None;

pub trait CollectionExt: 'static {
    #[doc(alias = "atspi_collection_get_active_descendant")]
    #[doc(alias = "get_active_descendant")]
    fn active_descendant(&self) -> Result<Accessible, glib::Error>;

    //#[doc(alias = "atspi_collection_get_matches")]
    //#[doc(alias = "get_matches")]
    //fn matches(&self, rule: /*Ignored*/&MatchRule, sortby: /*Ignored*/CollectionSortOrder, count: i32, traverse: bool) -> Result</*Unknown conversion*//*Unimplemented*/Array TypeId { ns_id: 1, id: 17 }, glib::Error>;

    //#[doc(alias = "atspi_collection_get_matches_from")]
    //#[doc(alias = "get_matches_from")]
    //fn matches_from<P: IsA<Accessible>>(&self, current_object: &P, rule: /*Ignored*/&MatchRule, sortby: /*Ignored*/CollectionSortOrder, tree: /*Ignored*/CollectionTreeTraversalType, count: i32, traverse: bool) -> Result</*Unknown conversion*//*Unimplemented*/Array TypeId { ns_id: 1, id: 17 }, glib::Error>;

    //#[doc(alias = "atspi_collection_get_matches_to")]
    //#[doc(alias = "get_matches_to")]
    //fn matches_to<P: IsA<Accessible>>(&self, current_object: &P, rule: /*Ignored*/&MatchRule, sortby: /*Ignored*/CollectionSortOrder, tree: /*Ignored*/CollectionTreeTraversalType, limit_scope: bool, count: i32, traverse: bool) -> Result</*Unknown conversion*//*Unimplemented*/Array TypeId { ns_id: 1, id: 17 }, glib::Error>;

    #[doc(alias = "atspi_collection_is_ancestor_of")]
    fn is_ancestor_of<P: IsA<Accessible>>(&self, test: &P) -> Result<(), glib::Error>;
}

impl<O: IsA<Collection>> CollectionExt for O {
    fn active_descendant(&self) -> Result<Accessible, glib::Error> {
        unsafe {
            let mut error = ptr::null_mut();
            let ret = ffi::atspi_collection_get_active_descendant(self.as_ref().to_glib_none().0, &mut error);
            if error.is_null() { Ok(from_glib_full(ret)) } else { Err(from_glib_full(error)) }
        }
    }

    //fn matches(&self, rule: /*Ignored*/&MatchRule, sortby: /*Ignored*/CollectionSortOrder, count: i32, traverse: bool) -> Result</*Unknown conversion*//*Unimplemented*/Array TypeId { ns_id: 1, id: 17 }, glib::Error> {
    //    unsafe { TODO: call ffi:atspi_collection_get_matches() }
    //}

    //fn matches_from<P: IsA<Accessible>>(&self, current_object: &P, rule: /*Ignored*/&MatchRule, sortby: /*Ignored*/CollectionSortOrder, tree: /*Ignored*/CollectionTreeTraversalType, count: i32, traverse: bool) -> Result</*Unknown conversion*//*Unimplemented*/Array TypeId { ns_id: 1, id: 17 }, glib::Error> {
    //    unsafe { TODO: call ffi:atspi_collection_get_matches_from() }
    //}

    //fn matches_to<P: IsA<Accessible>>(&self, current_object: &P, rule: /*Ignored*/&MatchRule, sortby: /*Ignored*/CollectionSortOrder, tree: /*Ignored*/CollectionTreeTraversalType, limit_scope: bool, count: i32, traverse: bool) -> Result</*Unknown conversion*//*Unimplemented*/Array TypeId { ns_id: 1, id: 17 }, glib::Error> {
    //    unsafe { TODO: call ffi:atspi_collection_get_matches_to() }
    //}

    fn is_ancestor_of<P: IsA<Accessible>>(&self, test: &P) -> Result<(), glib::Error> {
        unsafe {
            let mut error = ptr::null_mut();
            let _ = ffi::atspi_collection_is_ancestor_of(self.as_ref().to_glib_none().0, test.as_ref().to_glib_none().0, &mut error);
            if error.is_null() { Ok(()) } else { Err(from_glib_full(error)) }
        }
    }
}

impl fmt::Display for Collection {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        f.write_str("Collection")
    }
}
