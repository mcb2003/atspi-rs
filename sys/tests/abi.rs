// Generated by gir (https://github.com/gtk-rs/gir @ e8f82cf)
// from ../gir-files (@ 915ec7c)
// DO NOT EDIT

use atspi_sys::*;
use std::mem::{align_of, size_of};
use std::env;
use std::error::Error;
use std::ffi::OsString;
use std::path::Path;
use std::process::Command;
use std::str;
use tempfile::Builder;

static PACKAGES: &[&str] = &["atspi-2"];

#[derive(Clone, Debug)]
struct Compiler {
    pub args: Vec<String>,
}

impl Compiler {
    pub fn new() -> Result<Self, Box<dyn Error>> {
        let mut args = get_var("CC", "cc")?;
        args.push("-Wno-deprecated-declarations".to_owned());
        // For _Generic
        args.push("-std=c11".to_owned());
        // For %z support in printf when using MinGW.
        args.push("-D__USE_MINGW_ANSI_STDIO".to_owned());
        args.extend(get_var("CFLAGS", "")?);
        args.extend(get_var("CPPFLAGS", "")?);
        args.extend(pkg_config_cflags(PACKAGES)?);
        Ok(Self { args })
    }

    pub fn compile(&self, src: &Path, out: &Path) -> Result<(), Box<dyn Error>> {
        let mut cmd = self.to_command();
        cmd.arg(src);
        cmd.arg("-o");
        cmd.arg(out);
        let status = cmd.spawn()?.wait()?;
        if !status.success() {
            return Err(format!("compilation command {:?} failed, {}", &cmd, status).into());
        }
        Ok(())
    }

    fn to_command(&self) -> Command {
        let mut cmd = Command::new(&self.args[0]);
        cmd.args(&self.args[1..]);
        cmd
    }
}

fn get_var(name: &str, default: &str) -> Result<Vec<String>, Box<dyn Error>> {
    match env::var(name) {
        Ok(value) => Ok(shell_words::split(&value)?),
        Err(env::VarError::NotPresent) => Ok(shell_words::split(default)?),
        Err(err) => Err(format!("{} {}", name, err).into()),
    }
}

fn pkg_config_cflags(packages: &[&str]) -> Result<Vec<String>, Box<dyn Error>> {
    if packages.is_empty() {
        return Ok(Vec::new());
    }
    let pkg_config = env::var_os("PKG_CONFIG")
        .unwrap_or_else(|| OsString::from("pkg-config"));
    let mut cmd = Command::new(pkg_config);
    cmd.arg("--cflags");
    cmd.args(packages);
    let out = cmd.output()?;
    if !out.status.success() {
        return Err(format!("command {:?} returned {}",
                           &cmd, out.status).into());
    }
    let stdout = str::from_utf8(&out.stdout)?;
    Ok(shell_words::split(stdout.trim())?)
}


#[derive(Copy, Clone, Debug, Eq, PartialEq)]
struct Layout {
    size: usize,
    alignment: usize,
}

#[derive(Copy, Clone, Debug, Default, Eq, PartialEq)]
struct Results {
    /// Number of successfully completed tests.
    passed: usize,
    /// Total number of failed tests (including those that failed to compile).
    failed: usize,
}

impl Results {
    fn record_passed(&mut self) {
        self.passed += 1;
    }
    fn record_failed(&mut self) {
        self.failed += 1;
    }
    fn summary(&self) -> String {
        format!("{} passed; {} failed", self.passed, self.failed)
    }
    fn expect_total_success(&self) {
        if self.failed == 0 {
            println!("OK: {}", self.summary());
        } else {
            panic!("FAILED: {}", self.summary());
        };
    }
}

#[test]
fn cross_validate_constants_with_c() {
    let mut c_constants: Vec<(String, String)> = Vec::new();

    for l in get_c_output("constant").unwrap().lines() {
        let mut words = l.trim().split(';');
        let name = words.next().expect("Failed to parse name").to_owned();
        let value = words
            .next()
            .and_then(|s| s.parse().ok())
            .expect("Failed to parse value");
        c_constants.push((name, value));
    }

    let mut results = Results::default();

    for ((rust_name, rust_value), (c_name, c_value)) in
        RUST_CONSTANTS.iter().zip(c_constants.iter())
    {
        if rust_name != c_name {
            results.record_failed();
            eprintln!("Name mismatch:\nRust: {:?}\nC:    {:?}", rust_name, c_name,);
            continue;
        }

        if rust_value != c_value {
            results.record_failed();
            eprintln!(
                "Constant value mismatch for {}\nRust: {:?}\nC:    {:?}",
                rust_name, rust_value, &c_value
            );
            continue;
        }

        results.record_passed();
    }

    results.expect_total_success();
}

#[test]
fn cross_validate_layout_with_c() {
    let mut c_layouts = Vec::new();

    for l in get_c_output("layout").unwrap().lines() {
        let mut words = l.trim().split(';');
        let name = words.next().expect("Failed to parse name").to_owned();
        let size = words
            .next()
            .and_then(|s| s.parse().ok())
            .expect("Failed to parse size");
        let alignment = words
            .next()
            .and_then(|s| s.parse().ok())
            .expect("Failed to parse alignment");
        c_layouts.push((name, Layout { size, alignment }));
    }

    let mut results = Results::default();

    for ((rust_name, rust_layout), (c_name, c_layout)) in
        RUST_LAYOUTS.iter().zip(c_layouts.iter())
    {
        if rust_name != c_name {
            results.record_failed();
            eprintln!("Name mismatch:\nRust: {:?}\nC:    {:?}", rust_name, c_name,);
            continue;
        }

        if rust_layout != c_layout {
            results.record_failed();
            eprintln!(
                "Layout mismatch for {}\nRust: {:?}\nC:    {:?}",
                rust_name, rust_layout, &c_layout
            );
            continue;
        }

        results.record_passed();
    }

    results.expect_total_success();
}

fn get_c_output(name: &str) -> Result<String, Box<dyn Error>> {
    let tmpdir = Builder::new().prefix("abi").tempdir()?;
    let exe = tmpdir.path().join(name);
    let c_file = Path::new("tests").join(name).with_extension("c");

    let cc = Compiler::new().expect("configured compiler");
    cc.compile(&c_file, &exe)?;

    let mut abi_cmd = Command::new(exe);
    let output = abi_cmd.output()?;
    if !output.status.success() {
        return Err(format!("command {:?} failed, {:?}", &abi_cmd, &output).into());
    }

    Ok(String::from_utf8(output.stdout)?)
}

const RUST_LAYOUTS: &[(&str, Layout)] = &[
    ("AtspiAccessible", Layout {size: size_of::<AtspiAccessible>(), alignment: align_of::<AtspiAccessible>()}),
    ("AtspiAccessibleClass", Layout {size: size_of::<AtspiAccessibleClass>(), alignment: align_of::<AtspiAccessibleClass>()}),
    ("AtspiApplication", Layout {size: size_of::<AtspiApplication>(), alignment: align_of::<AtspiApplication>()}),
    ("AtspiApplicationClass", Layout {size: size_of::<AtspiApplicationClass>(), alignment: align_of::<AtspiApplicationClass>()}),
    ("AtspiCache", Layout {size: size_of::<AtspiCache>(), alignment: align_of::<AtspiCache>()}),
    ("AtspiCollectionMatchType", Layout {size: size_of::<AtspiCollectionMatchType>(), alignment: align_of::<AtspiCollectionMatchType>()}),
    ("AtspiCollectionSortOrder", Layout {size: size_of::<AtspiCollectionSortOrder>(), alignment: align_of::<AtspiCollectionSortOrder>()}),
    ("AtspiCollectionTreeTraversalType", Layout {size: size_of::<AtspiCollectionTreeTraversalType>(), alignment: align_of::<AtspiCollectionTreeTraversalType>()}),
    ("AtspiComponentLayer", Layout {size: size_of::<AtspiComponentLayer>(), alignment: align_of::<AtspiComponentLayer>()}),
    ("AtspiControllerEventMask", Layout {size: size_of::<AtspiControllerEventMask>(), alignment: align_of::<AtspiControllerEventMask>()}),
    ("AtspiCoordType", Layout {size: size_of::<AtspiCoordType>(), alignment: align_of::<AtspiCoordType>()}),
    ("AtspiDeviceEvent", Layout {size: size_of::<AtspiDeviceEvent>(), alignment: align_of::<AtspiDeviceEvent>()}),
    ("AtspiDeviceEventMask", Layout {size: size_of::<AtspiDeviceEventMask>(), alignment: align_of::<AtspiDeviceEventMask>()}),
    ("AtspiDeviceListener", Layout {size: size_of::<AtspiDeviceListener>(), alignment: align_of::<AtspiDeviceListener>()}),
    ("AtspiDeviceListenerClass", Layout {size: size_of::<AtspiDeviceListenerClass>(), alignment: align_of::<AtspiDeviceListenerClass>()}),
    ("AtspiEvent", Layout {size: size_of::<AtspiEvent>(), alignment: align_of::<AtspiEvent>()}),
    ("AtspiEventListener", Layout {size: size_of::<AtspiEventListener>(), alignment: align_of::<AtspiEventListener>()}),
    ("AtspiEventListenerClass", Layout {size: size_of::<AtspiEventListenerClass>(), alignment: align_of::<AtspiEventListenerClass>()}),
    ("AtspiEventListenerMode", Layout {size: size_of::<AtspiEventListenerMode>(), alignment: align_of::<AtspiEventListenerMode>()}),
    ("AtspiEventType", Layout {size: size_of::<AtspiEventType>(), alignment: align_of::<AtspiEventType>()}),
    ("AtspiHyperlink", Layout {size: size_of::<AtspiHyperlink>(), alignment: align_of::<AtspiHyperlink>()}),
    ("AtspiHyperlinkClass", Layout {size: size_of::<AtspiHyperlinkClass>(), alignment: align_of::<AtspiHyperlinkClass>()}),
    ("AtspiKeyDefinition", Layout {size: size_of::<AtspiKeyDefinition>(), alignment: align_of::<AtspiKeyDefinition>()}),
    ("AtspiKeyEventMask", Layout {size: size_of::<AtspiKeyEventMask>(), alignment: align_of::<AtspiKeyEventMask>()}),
    ("AtspiKeyEventType", Layout {size: size_of::<AtspiKeyEventType>(), alignment: align_of::<AtspiKeyEventType>()}),
    ("AtspiKeyListenerSyncType", Layout {size: size_of::<AtspiKeyListenerSyncType>(), alignment: align_of::<AtspiKeyListenerSyncType>()}),
    ("AtspiKeyMaskType", Layout {size: size_of::<AtspiKeyMaskType>(), alignment: align_of::<AtspiKeyMaskType>()}),
    ("AtspiKeySet", Layout {size: size_of::<AtspiKeySet>(), alignment: align_of::<AtspiKeySet>()}),
    ("AtspiKeySynthType", Layout {size: size_of::<AtspiKeySynthType>(), alignment: align_of::<AtspiKeySynthType>()}),
    ("AtspiLocaleType", Layout {size: size_of::<AtspiLocaleType>(), alignment: align_of::<AtspiLocaleType>()}),
    ("AtspiMatchRule", Layout {size: size_of::<AtspiMatchRule>(), alignment: align_of::<AtspiMatchRule>()}),
    ("AtspiMatchRuleClass", Layout {size: size_of::<AtspiMatchRuleClass>(), alignment: align_of::<AtspiMatchRuleClass>()}),
    ("AtspiModifierType", Layout {size: size_of::<AtspiModifierType>(), alignment: align_of::<AtspiModifierType>()}),
    ("AtspiObject", Layout {size: size_of::<AtspiObject>(), alignment: align_of::<AtspiObject>()}),
    ("AtspiObjectClass", Layout {size: size_of::<AtspiObjectClass>(), alignment: align_of::<AtspiObjectClass>()}),
    ("AtspiPoint", Layout {size: size_of::<AtspiPoint>(), alignment: align_of::<AtspiPoint>()}),
    ("AtspiRange", Layout {size: size_of::<AtspiRange>(), alignment: align_of::<AtspiRange>()}),
    ("AtspiRect", Layout {size: size_of::<AtspiRect>(), alignment: align_of::<AtspiRect>()}),
    ("AtspiRelation", Layout {size: size_of::<AtspiRelation>(), alignment: align_of::<AtspiRelation>()}),
    ("AtspiRelationClass", Layout {size: size_of::<AtspiRelationClass>(), alignment: align_of::<AtspiRelationClass>()}),
    ("AtspiRelationType", Layout {size: size_of::<AtspiRelationType>(), alignment: align_of::<AtspiRelationType>()}),
    ("AtspiRole", Layout {size: size_of::<AtspiRole>(), alignment: align_of::<AtspiRole>()}),
    ("AtspiScrollType", Layout {size: size_of::<AtspiScrollType>(), alignment: align_of::<AtspiScrollType>()}),
    ("AtspiStateSet", Layout {size: size_of::<AtspiStateSet>(), alignment: align_of::<AtspiStateSet>()}),
    ("AtspiStateSetClass", Layout {size: size_of::<AtspiStateSetClass>(), alignment: align_of::<AtspiStateSetClass>()}),
    ("AtspiStateType", Layout {size: size_of::<AtspiStateType>(), alignment: align_of::<AtspiStateType>()}),
    ("AtspiTextBoundaryType", Layout {size: size_of::<AtspiTextBoundaryType>(), alignment: align_of::<AtspiTextBoundaryType>()}),
    ("AtspiTextClipType", Layout {size: size_of::<AtspiTextClipType>(), alignment: align_of::<AtspiTextClipType>()}),
    ("AtspiTextGranularity", Layout {size: size_of::<AtspiTextGranularity>(), alignment: align_of::<AtspiTextGranularity>()}),
    ("AtspiTextRange", Layout {size: size_of::<AtspiTextRange>(), alignment: align_of::<AtspiTextRange>()}),
];

const RUST_CONSTANTS: &[(&str, &str)] = &[
    ("(gint) ATSPI_BUTTON_PRESSED_EVENT", "2"),
    ("(gint) ATSPI_BUTTON_RELEASED_EVENT", "3"),
    ("(guint) ATSPI_CACHE_ALL", "1073741823"),
    ("(guint) ATSPI_CACHE_ATTRIBUTES", "128"),
    ("(guint) ATSPI_CACHE_CHILDREN", "2"),
    ("(guint) ATSPI_CACHE_DEFAULT", "127"),
    ("(guint) ATSPI_CACHE_DESCRIPTION", "8"),
    ("(guint) ATSPI_CACHE_INTERFACES", "64"),
    ("(guint) ATSPI_CACHE_NAME", "4"),
    ("(guint) ATSPI_CACHE_NONE", "0"),
    ("(guint) ATSPI_CACHE_PARENT", "1"),
    ("(guint) ATSPI_CACHE_ROLE", "32"),
    ("(guint) ATSPI_CACHE_STATES", "16"),
    ("(guint) ATSPI_CACHE_UNDEFINED", "1073741824"),
    ("ATSPI_COMPONENTLAYER_COUNT", "9"),
    ("ATSPI_COORD_TYPE_COUNT", "3"),
    ("(gint) ATSPI_COORD_TYPE_PARENT", "2"),
    ("(gint) ATSPI_COORD_TYPE_SCREEN", "0"),
    ("(gint) ATSPI_COORD_TYPE_WINDOW", "1"),
    ("(gint) ATSPI_Collection_MATCH_ALL", "1"),
    ("(gint) ATSPI_Collection_MATCH_ANY", "2"),
    ("(gint) ATSPI_Collection_MATCH_EMPTY", "4"),
    ("(gint) ATSPI_Collection_MATCH_INVALID", "0"),
    ("(gint) ATSPI_Collection_MATCH_LAST_DEFINED", "5"),
    ("(gint) ATSPI_Collection_MATCH_NONE", "3"),
    ("(gint) ATSPI_Collection_SORT_ORDER_CANONICAL", "1"),
    ("(gint) ATSPI_Collection_SORT_ORDER_FLOW", "2"),
    ("(gint) ATSPI_Collection_SORT_ORDER_INVALID", "0"),
    ("(gint) ATSPI_Collection_SORT_ORDER_LAST_DEFINED", "7"),
    ("(gint) ATSPI_Collection_SORT_ORDER_REVERSE_CANONICAL", "4"),
    ("(gint) ATSPI_Collection_SORT_ORDER_REVERSE_FLOW", "5"),
    ("(gint) ATSPI_Collection_SORT_ORDER_REVERSE_TAB", "6"),
    ("(gint) ATSPI_Collection_SORT_ORDER_TAB", "3"),
    ("(gint) ATSPI_Collection_TREE_INORDER", "2"),
    ("(gint) ATSPI_Collection_TREE_LAST_DEFINED", "3"),
    ("(gint) ATSPI_Collection_TREE_RESTRICT_CHILDREN", "0"),
    ("(gint) ATSPI_Collection_TREE_RESTRICT_SIBLING", "1"),
    ("ATSPI_DBUS_INTERFACE_ACCESSIBLE", "org.a11y.atspi.Accessible"),
    ("ATSPI_DBUS_INTERFACE_ACTION", "org.a11y.atspi.Action"),
    ("ATSPI_DBUS_INTERFACE_APPLICATION", "org.a11y.atspi.Application"),
    ("ATSPI_DBUS_INTERFACE_CACHE", "org.a11y.atspi.Cache"),
    ("ATSPI_DBUS_INTERFACE_COLLECTION", "org.a11y.atspi.Collection"),
    ("ATSPI_DBUS_INTERFACE_COMPONENT", "org.a11y.atspi.Component"),
    ("ATSPI_DBUS_INTERFACE_DEC", "org.a11y.atspi.DeviceEventController"),
    ("ATSPI_DBUS_INTERFACE_DEVICE_EVENT_LISTENER", "org.a11y.atspi.DeviceEventListener"),
    ("ATSPI_DBUS_INTERFACE_DOCUMENT", "org.a11y.atspi.Document"),
    ("ATSPI_DBUS_INTERFACE_EDITABLE_TEXT", "org.a11y.atspi.EditableText"),
    ("ATSPI_DBUS_INTERFACE_EVENT_KEYBOARD", "org.a11y.atspi.Event.Keyboard"),
    ("ATSPI_DBUS_INTERFACE_EVENT_MOUSE", "org.a11y.atspi.Event.Mouse"),
    ("ATSPI_DBUS_INTERFACE_EVENT_OBJECT", "org.a11y.atspi.Event.Object"),
    ("ATSPI_DBUS_INTERFACE_EVENT_SCREEN_READER", "org.a11y.atspi.Event.ScreenReader"),
    ("ATSPI_DBUS_INTERFACE_HYPERLINK", "org.a11y.atspi.Hyperlink"),
    ("ATSPI_DBUS_INTERFACE_HYPERTEXT", "org.a11y.atspi.Hypertext"),
    ("ATSPI_DBUS_INTERFACE_IMAGE", "org.a11y.atspi.Image"),
    ("ATSPI_DBUS_INTERFACE_REGISTRY", "org.a11y.atspi.Registry"),
    ("ATSPI_DBUS_INTERFACE_SELECTION", "org.a11y.atspi.Selection"),
    ("ATSPI_DBUS_INTERFACE_SOCKET", "org.a11y.atspi.Socket"),
    ("ATSPI_DBUS_INTERFACE_TABLE", "org.a11y.atspi.Table"),
    ("ATSPI_DBUS_INTERFACE_TABLE_CELL", "org.a11y.atspi.TableCell"),
    ("ATSPI_DBUS_INTERFACE_TEXT", "org.a11y.atspi.Text"),
    ("ATSPI_DBUS_INTERFACE_VALUE", "org.a11y.atspi.Value"),
    ("ATSPI_DBUS_NAME_REGISTRY", "org.a11y.atspi.Registry"),
    ("ATSPI_DBUS_PATH_DEC", "/org/a11y/atspi/registry/deviceeventcontroller"),
    ("ATSPI_DBUS_PATH_NULL", "/org/a11y/atspi/null"),
    ("ATSPI_DBUS_PATH_REGISTRY", "/org/a11y/atspi/registry"),
    ("ATSPI_DBUS_PATH_ROOT", "/org/a11y/atspi/accessible/root"),
    ("ATSPI_DBUS_PATH_SCREEN_READER", "/org/a11y/atspi/screenreader"),
    ("ATSPI_EVENTTYPE_COUNT", "4"),
    ("ATSPI_KEYEVENTTYPE_COUNT", "2"),
    ("(guint) ATSPI_KEYLISTENER_ALL_WINDOWS", "4"),
    ("(guint) ATSPI_KEYLISTENER_CANCONSUME", "2"),
    ("(guint) ATSPI_KEYLISTENER_NOSYNC", "0"),
    ("(guint) ATSPI_KEYLISTENER_SYNCHRONOUS", "1"),
    ("ATSPI_KEYSYNTHTYPE_COUNT", "5"),
    ("(gint) ATSPI_KEY_LOCKMODIFIERS", "5"),
    ("(gint) ATSPI_KEY_PRESS", "0"),
    ("(gint) ATSPI_KEY_PRESSED", "0"),
    ("(gint) ATSPI_KEY_PRESSED_EVENT", "0"),
    ("(gint) ATSPI_KEY_PRESSRELEASE", "2"),
    ("(gint) ATSPI_KEY_RELEASE", "1"),
    ("(gint) ATSPI_KEY_RELEASED", "1"),
    ("(gint) ATSPI_KEY_RELEASED_EVENT", "1"),
    ("(gint) ATSPI_KEY_STRING", "4"),
    ("(gint) ATSPI_KEY_SYM", "3"),
    ("(gint) ATSPI_KEY_UNLOCKMODIFIERS", "6"),
    ("(gint) ATSPI_LAYER_BACKGROUND", "1"),
    ("(gint) ATSPI_LAYER_CANVAS", "2"),
    ("(gint) ATSPI_LAYER_INVALID", "0"),
    ("(gint) ATSPI_LAYER_LAST_DEFINED", "8"),
    ("(gint) ATSPI_LAYER_MDI", "4"),
    ("(gint) ATSPI_LAYER_OVERLAY", "6"),
    ("(gint) ATSPI_LAYER_POPUP", "5"),
    ("(gint) ATSPI_LAYER_WIDGET", "3"),
    ("(gint) ATSPI_LAYER_WINDOW", "7"),
    ("(gint) ATSPI_LOCALE_TYPE_COLLATE", "1"),
    ("ATSPI_LOCALE_TYPE_COUNT", "6"),
    ("(gint) ATSPI_LOCALE_TYPE_CTYPE", "2"),
    ("(gint) ATSPI_LOCALE_TYPE_MESSAGES", "0"),
    ("(gint) ATSPI_LOCALE_TYPE_MONETARY", "3"),
    ("(gint) ATSPI_LOCALE_TYPE_NUMERIC", "4"),
    ("(gint) ATSPI_LOCALE_TYPE_TIME", "5"),
    ("ATSPI_MATCHTYPES_COUNT", "6"),
    ("ATSPI_MODIFIERTYPE_COUNT", "8"),
    ("(gint) ATSPI_MODIFIER_ALT", "3"),
    ("(gint) ATSPI_MODIFIER_CONTROL", "2"),
    ("(gint) ATSPI_MODIFIER_META", "4"),
    ("(gint) ATSPI_MODIFIER_META2", "5"),
    ("(gint) ATSPI_MODIFIER_META3", "6"),
    ("(gint) ATSPI_MODIFIER_NUMLOCK", "14"),
    ("(gint) ATSPI_MODIFIER_SHIFT", "0"),
    ("(gint) ATSPI_MODIFIER_SHIFTLOCK", "1"),
    ("ATSPI_RELATIONTYPE_COUNT", "24"),
    ("(gint) ATSPI_RELATION_CONTROLLED_BY", "4"),
    ("(gint) ATSPI_RELATION_CONTROLLER_FOR", "3"),
    ("(gint) ATSPI_RELATION_DESCRIBED_BY", "18"),
    ("(gint) ATSPI_RELATION_DESCRIPTION_FOR", "17"),
    ("(gint) ATSPI_RELATION_DETAILS", "19"),
    ("(gint) ATSPI_RELATION_DETAILS_FOR", "20"),
    ("(gint) ATSPI_RELATION_EMBEDDED_BY", "14"),
    ("(gint) ATSPI_RELATION_EMBEDS", "13"),
    ("(gint) ATSPI_RELATION_ERROR_FOR", "22"),
    ("(gint) ATSPI_RELATION_ERROR_MESSAGE", "21"),
    ("(gint) ATSPI_RELATION_EXTENDED", "9"),
    ("(gint) ATSPI_RELATION_FLOWS_FROM", "11"),
    ("(gint) ATSPI_RELATION_FLOWS_TO", "10"),
    ("(gint) ATSPI_RELATION_LABELLED_BY", "2"),
    ("(gint) ATSPI_RELATION_LABEL_FOR", "1"),
    ("(gint) ATSPI_RELATION_LAST_DEFINED", "23"),
    ("(gint) ATSPI_RELATION_MEMBER_OF", "5"),
    ("(gint) ATSPI_RELATION_NODE_CHILD_OF", "7"),
    ("(gint) ATSPI_RELATION_NODE_PARENT_OF", "8"),
    ("(gint) ATSPI_RELATION_NULL", "0"),
    ("(gint) ATSPI_RELATION_PARENT_WINDOW_OF", "16"),
    ("(gint) ATSPI_RELATION_POPUP_FOR", "15"),
    ("(gint) ATSPI_RELATION_SUBWINDOW_OF", "12"),
    ("(gint) ATSPI_RELATION_TOOLTIP_FOR", "6"),
    ("(gint) ATSPI_ROLE_ACCELERATOR_LABEL", "1"),
    ("(gint) ATSPI_ROLE_ALERT", "2"),
    ("(gint) ATSPI_ROLE_ANIMATION", "3"),
    ("(gint) ATSPI_ROLE_APPLICATION", "75"),
    ("(gint) ATSPI_ROLE_ARROW", "4"),
    ("(gint) ATSPI_ROLE_ARTICLE", "109"),
    ("(gint) ATSPI_ROLE_AUDIO", "106"),
    ("(gint) ATSPI_ROLE_AUTOCOMPLETE", "76"),
    ("(gint) ATSPI_ROLE_BLOCK_QUOTE", "105"),
    ("(gint) ATSPI_ROLE_CALENDAR", "5"),
    ("(gint) ATSPI_ROLE_CANVAS", "6"),
    ("(gint) ATSPI_ROLE_CAPTION", "81"),
    ("(gint) ATSPI_ROLE_CHART", "80"),
    ("(gint) ATSPI_ROLE_CHECK_BOX", "7"),
    ("(gint) ATSPI_ROLE_CHECK_MENU_ITEM", "8"),
    ("(gint) ATSPI_ROLE_COLOR_CHOOSER", "9"),
    ("(gint) ATSPI_ROLE_COLUMN_HEADER", "10"),
    ("(gint) ATSPI_ROLE_COMBO_BOX", "11"),
    ("(gint) ATSPI_ROLE_COMMENT", "97"),
    ("(gint) ATSPI_ROLE_CONTENT_DELETION", "125"),
    ("(gint) ATSPI_ROLE_CONTENT_INSERTION", "126"),
    ("ATSPI_ROLE_COUNT", "130"),
    ("(gint) ATSPI_ROLE_DATE_EDITOR", "12"),
    ("(gint) ATSPI_ROLE_DEFINITION", "108"),
    ("(gint) ATSPI_ROLE_DESCRIPTION_LIST", "121"),
    ("(gint) ATSPI_ROLE_DESCRIPTION_TERM", "122"),
    ("(gint) ATSPI_ROLE_DESCRIPTION_VALUE", "123"),
    ("(gint) ATSPI_ROLE_DESKTOP_FRAME", "14"),
    ("(gint) ATSPI_ROLE_DESKTOP_ICON", "13"),
    ("(gint) ATSPI_ROLE_DIAL", "15"),
    ("(gint) ATSPI_ROLE_DIALOG", "16"),
    ("(gint) ATSPI_ROLE_DIRECTORY_PANE", "17"),
    ("(gint) ATSPI_ROLE_DOCUMENT_EMAIL", "96"),
    ("(gint) ATSPI_ROLE_DOCUMENT_FRAME", "82"),
    ("(gint) ATSPI_ROLE_DOCUMENT_PRESENTATION", "93"),
    ("(gint) ATSPI_ROLE_DOCUMENT_SPREADSHEET", "92"),
    ("(gint) ATSPI_ROLE_DOCUMENT_TEXT", "94"),
    ("(gint) ATSPI_ROLE_DOCUMENT_WEB", "95"),
    ("(gint) ATSPI_ROLE_DRAWING_AREA", "18"),
    ("(gint) ATSPI_ROLE_EDITBAR", "77"),
    ("(gint) ATSPI_ROLE_EMBEDDED", "78"),
    ("(gint) ATSPI_ROLE_ENTRY", "79"),
    ("(gint) ATSPI_ROLE_EXTENDED", "70"),
    ("(gint) ATSPI_ROLE_FILE_CHOOSER", "19"),
    ("(gint) ATSPI_ROLE_FILLER", "20"),
    ("(gint) ATSPI_ROLE_FOCUS_TRAVERSABLE", "21"),
    ("(gint) ATSPI_ROLE_FONT_CHOOSER", "22"),
    ("(gint) ATSPI_ROLE_FOOTER", "72"),
    ("(gint) ATSPI_ROLE_FOOTNOTE", "124"),
    ("(gint) ATSPI_ROLE_FORM", "87"),
    ("(gint) ATSPI_ROLE_FRAME", "23"),
    ("(gint) ATSPI_ROLE_GLASS_PANE", "24"),
    ("(gint) ATSPI_ROLE_GROUPING", "99"),
    ("(gint) ATSPI_ROLE_HEADER", "71"),
    ("(gint) ATSPI_ROLE_HEADING", "83"),
    ("(gint) ATSPI_ROLE_HTML_CONTAINER", "25"),
    ("(gint) ATSPI_ROLE_ICON", "26"),
    ("(gint) ATSPI_ROLE_IMAGE", "27"),
    ("(gint) ATSPI_ROLE_IMAGE_MAP", "100"),
    ("(gint) ATSPI_ROLE_INFO_BAR", "102"),
    ("(gint) ATSPI_ROLE_INPUT_METHOD_WINDOW", "89"),
    ("(gint) ATSPI_ROLE_INTERNAL_FRAME", "28"),
    ("(gint) ATSPI_ROLE_INVALID", "0"),
    ("(gint) ATSPI_ROLE_LABEL", "29"),
    ("(gint) ATSPI_ROLE_LANDMARK", "110"),
    ("(gint) ATSPI_ROLE_LAST_DEFINED", "129"),
    ("(gint) ATSPI_ROLE_LAYERED_PANE", "30"),
    ("(gint) ATSPI_ROLE_LEVEL_BAR", "103"),
    ("(gint) ATSPI_ROLE_LINK", "88"),
    ("(gint) ATSPI_ROLE_LIST", "31"),
    ("(gint) ATSPI_ROLE_LIST_BOX", "98"),
    ("(gint) ATSPI_ROLE_LIST_ITEM", "32"),
    ("(gint) ATSPI_ROLE_LOG", "111"),
    ("(gint) ATSPI_ROLE_MARK", "127"),
    ("(gint) ATSPI_ROLE_MARQUEE", "112"),
    ("(gint) ATSPI_ROLE_MATH", "113"),
    ("(gint) ATSPI_ROLE_MATH_FRACTION", "117"),
    ("(gint) ATSPI_ROLE_MATH_ROOT", "118"),
    ("(gint) ATSPI_ROLE_MENU", "33"),
    ("(gint) ATSPI_ROLE_MENU_BAR", "34"),
    ("(gint) ATSPI_ROLE_MENU_ITEM", "35"),
    ("(gint) ATSPI_ROLE_NOTIFICATION", "101"),
    ("(gint) ATSPI_ROLE_OPTION_PANE", "36"),
    ("(gint) ATSPI_ROLE_PAGE", "84"),
    ("(gint) ATSPI_ROLE_PAGE_TAB", "37"),
    ("(gint) ATSPI_ROLE_PAGE_TAB_LIST", "38"),
    ("(gint) ATSPI_ROLE_PANEL", "39"),
    ("(gint) ATSPI_ROLE_PARAGRAPH", "73"),
    ("(gint) ATSPI_ROLE_PASSWORD_TEXT", "40"),
    ("(gint) ATSPI_ROLE_POPUP_MENU", "41"),
    ("(gint) ATSPI_ROLE_PROGRESS_BAR", "42"),
    ("(gint) ATSPI_ROLE_PUSH_BUTTON", "43"),
    ("(gint) ATSPI_ROLE_RADIO_BUTTON", "44"),
    ("(gint) ATSPI_ROLE_RADIO_MENU_ITEM", "45"),
    ("(gint) ATSPI_ROLE_RATING", "114"),
    ("(gint) ATSPI_ROLE_REDUNDANT_OBJECT", "86"),
    ("(gint) ATSPI_ROLE_ROOT_PANE", "46"),
    ("(gint) ATSPI_ROLE_ROW_HEADER", "47"),
    ("(gint) ATSPI_ROLE_RULER", "74"),
    ("(gint) ATSPI_ROLE_SCROLL_BAR", "48"),
    ("(gint) ATSPI_ROLE_SCROLL_PANE", "49"),
    ("(gint) ATSPI_ROLE_SECTION", "85"),
    ("(gint) ATSPI_ROLE_SEPARATOR", "50"),
    ("(gint) ATSPI_ROLE_SLIDER", "51"),
    ("(gint) ATSPI_ROLE_SPIN_BUTTON", "52"),
    ("(gint) ATSPI_ROLE_SPLIT_PANE", "53"),
    ("(gint) ATSPI_ROLE_STATIC", "116"),
    ("(gint) ATSPI_ROLE_STATUS_BAR", "54"),
    ("(gint) ATSPI_ROLE_SUBSCRIPT", "119"),
    ("(gint) ATSPI_ROLE_SUGGESTION", "128"),
    ("(gint) ATSPI_ROLE_SUPERSCRIPT", "120"),
    ("(gint) ATSPI_ROLE_TABLE", "55"),
    ("(gint) ATSPI_ROLE_TABLE_CELL", "56"),
    ("(gint) ATSPI_ROLE_TABLE_COLUMN_HEADER", "57"),
    ("(gint) ATSPI_ROLE_TABLE_ROW", "90"),
    ("(gint) ATSPI_ROLE_TABLE_ROW_HEADER", "58"),
    ("(gint) ATSPI_ROLE_TEAROFF_MENU_ITEM", "59"),
    ("(gint) ATSPI_ROLE_TERMINAL", "60"),
    ("(gint) ATSPI_ROLE_TEXT", "61"),
    ("(gint) ATSPI_ROLE_TIMER", "115"),
    ("(gint) ATSPI_ROLE_TITLE_BAR", "104"),
    ("(gint) ATSPI_ROLE_TOGGLE_BUTTON", "62"),
    ("(gint) ATSPI_ROLE_TOOL_BAR", "63"),
    ("(gint) ATSPI_ROLE_TOOL_TIP", "64"),
    ("(gint) ATSPI_ROLE_TREE", "65"),
    ("(gint) ATSPI_ROLE_TREE_ITEM", "91"),
    ("(gint) ATSPI_ROLE_TREE_TABLE", "66"),
    ("(gint) ATSPI_ROLE_UNKNOWN", "67"),
    ("(gint) ATSPI_ROLE_VIDEO", "107"),
    ("(gint) ATSPI_ROLE_VIEWPORT", "68"),
    ("(gint) ATSPI_ROLE_WINDOW", "69"),
    ("ATSPI_SCROLLTYPE_COUNT", "7"),
    ("(gint) ATSPI_SCROLL_ANYWHERE", "6"),
    ("(gint) ATSPI_SCROLL_BOTTOM_EDGE", "3"),
    ("(gint) ATSPI_SCROLL_BOTTOM_RIGHT", "1"),
    ("(gint) ATSPI_SCROLL_LEFT_EDGE", "4"),
    ("(gint) ATSPI_SCROLL_RIGHT_EDGE", "5"),
    ("(gint) ATSPI_SCROLL_TOP_EDGE", "2"),
    ("(gint) ATSPI_SCROLL_TOP_LEFT", "0"),
    ("ATSPI_SORTORDER_COUNT", "8"),
    ("ATSPI_STATETYPE_COUNT", "42"),
    ("(gint) ATSPI_STATE_ACTIVE", "1"),
    ("(gint) ATSPI_STATE_ANIMATED", "35"),
    ("(gint) ATSPI_STATE_ARMED", "2"),
    ("(gint) ATSPI_STATE_BUSY", "3"),
    ("(gint) ATSPI_STATE_CHECKABLE", "41"),
    ("(gint) ATSPI_STATE_CHECKED", "4"),
    ("(gint) ATSPI_STATE_COLLAPSED", "5"),
    ("(gint) ATSPI_STATE_DEFUNCT", "6"),
    ("(gint) ATSPI_STATE_EDITABLE", "7"),
    ("(gint) ATSPI_STATE_ENABLED", "8"),
    ("(gint) ATSPI_STATE_EXPANDABLE", "9"),
    ("(gint) ATSPI_STATE_EXPANDED", "10"),
    ("(gint) ATSPI_STATE_FOCUSABLE", "11"),
    ("(gint) ATSPI_STATE_FOCUSED", "12"),
    ("(gint) ATSPI_STATE_HAS_POPUP", "42"),
    ("(gint) ATSPI_STATE_HAS_TOOLTIP", "13"),
    ("(gint) ATSPI_STATE_HORIZONTAL", "14"),
    ("(gint) ATSPI_STATE_ICONIFIED", "15"),
    ("(gint) ATSPI_STATE_INDETERMINATE", "32"),
    ("(gint) ATSPI_STATE_INVALID", "0"),
    ("(gint) ATSPI_STATE_INVALID_ENTRY", "36"),
    ("(gint) ATSPI_STATE_IS_DEFAULT", "39"),
    ("(gint) ATSPI_STATE_LAST_DEFINED", "44"),
    ("(gint) ATSPI_STATE_MANAGES_DESCENDANTS", "31"),
    ("(gint) ATSPI_STATE_MODAL", "16"),
    ("(gint) ATSPI_STATE_MULTISELECTABLE", "18"),
    ("(gint) ATSPI_STATE_MULTI_LINE", "17"),
    ("(gint) ATSPI_STATE_OPAQUE", "19"),
    ("(gint) ATSPI_STATE_PRESSED", "20"),
    ("(gint) ATSPI_STATE_READ_ONLY", "43"),
    ("(gint) ATSPI_STATE_REQUIRED", "33"),
    ("(gint) ATSPI_STATE_RESIZABLE", "21"),
    ("(gint) ATSPI_STATE_SELECTABLE", "22"),
    ("(gint) ATSPI_STATE_SELECTABLE_TEXT", "38"),
    ("(gint) ATSPI_STATE_SELECTED", "23"),
    ("(gint) ATSPI_STATE_SENSITIVE", "24"),
    ("(gint) ATSPI_STATE_SHOWING", "25"),
    ("(gint) ATSPI_STATE_SINGLE_LINE", "26"),
    ("(gint) ATSPI_STATE_STALE", "27"),
    ("(gint) ATSPI_STATE_SUPPORTS_AUTOCOMPLETION", "37"),
    ("(gint) ATSPI_STATE_TRANSIENT", "28"),
    ("(gint) ATSPI_STATE_TRUNCATED", "34"),
    ("(gint) ATSPI_STATE_VERTICAL", "29"),
    ("(gint) ATSPI_STATE_VISIBLE", "30"),
    ("(gint) ATSPI_STATE_VISITED", "40"),
    ("(gint) ATSPI_TEXT_BOUNDARY_CHAR", "0"),
    ("(gint) ATSPI_TEXT_BOUNDARY_LINE_END", "6"),
    ("(gint) ATSPI_TEXT_BOUNDARY_LINE_START", "5"),
    ("(gint) ATSPI_TEXT_BOUNDARY_SENTENCE_END", "4"),
    ("(gint) ATSPI_TEXT_BOUNDARY_SENTENCE_START", "3"),
    ("ATSPI_TEXT_BOUNDARY_TYPE_COUNT", "7"),
    ("(gint) ATSPI_TEXT_BOUNDARY_WORD_END", "2"),
    ("(gint) ATSPI_TEXT_BOUNDARY_WORD_START", "1"),
    ("(gint) ATSPI_TEXT_CLIP_BOTH", "3"),
    ("(gint) ATSPI_TEXT_CLIP_MAX", "2"),
    ("(gint) ATSPI_TEXT_CLIP_MIN", "1"),
    ("(gint) ATSPI_TEXT_CLIP_NONE", "0"),
    ("ATSPI_TEXT_CLIP_TYPE_COUNT", "4"),
    ("(gint) ATSPI_TEXT_GRANULARITY_CHAR", "0"),
    ("(gint) ATSPI_TEXT_GRANULARITY_LINE", "3"),
    ("(gint) ATSPI_TEXT_GRANULARITY_PARAGRAPH", "4"),
    ("(gint) ATSPI_TEXT_GRANULARITY_SENTENCE", "2"),
    ("(gint) ATSPI_TEXT_GRANULARITY_WORD", "1"),
    ("ATSPI_TREETRAVERSALTYPE_COUNT", "4"),
];


